{"version":3,"sources":["/mnt/c/Users/npt/projects/jsGraph/src/graph.position.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.util.js","/mnt/c/Users/npt/projects/jsGraph/src/renderer/style.js","/mnt/c/Users/npt/projects/jsGraph/src/renderer/axes.js","/mnt/c/Users/npt/projects/jsGraph/src/renderer/annotations.js","/mnt/c/Users/npt/projects/jsGraph/src/renderer/main.js","/mnt/c/Users/npt/projects/jsGraph/src/renderer/mixin.js","/mnt/c/Users/npt/projects/jsGraph/src/mixins/graph.mixin.event.js","/mnt/c/Users/npt/projects/jsGraph/src/util/data_aggregator.js","/mnt/c/Users/npt/projects/jsGraph/src/util/fit_lm.js","/mnt/c/Users/npt/projects/jsGraph/src/util/waveform.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.core.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.legend.js","/mnt/c/Users/npt/projects/jsGraph/src/mixins/graph.mixin.event_graph.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.axis.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.axis.x.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.axis.y.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.axis.x.bar.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.axis.x.time.js","/mnt/c/Users/npt/projects/jsGraph/src/mixins/graph.mixin.errorbars.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.scatter.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.line.js","/mnt/c/Users/npt/projects/jsGraph/src/mixins/graph.mixin.serie3d.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.line.3d.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.bar.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.box.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.line.colored.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.zone.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.zone.3d.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.densitymap.js","/mnt/c/Users/npt/projects/jsGraph/src/series/graph.serie.contour.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.areaundercurve.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.line.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.arrow.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.ellipse.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.label.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.polyline.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.polygon.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.nmrintegral.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.rect.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.peakintegration2d.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.cross.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.peakboundariescenter.js","/mnt/c/Users/npt/projects/jsGraph/src/shapes/graph.shape.html.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.drag.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.shape.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.selectScatter.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.zoom.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.lru.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.timeseriemanager.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.serielinedifference.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.axissplitting.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.makeTracesDifferent.js","/mnt/c/Users/npt/projects/jsGraph/src/plugins/graph.plugin.peakpicking.js","/mnt/c/Users/npt/projects/jsGraph/src/graph.js"],"names":["px","parseInt","isNaN","parseFloat","isFinite","constructor","x","duplicate","compute","graph","_compute","relativeTo","relativeToComputed","pos","y","xAxis","yAxis","axis","i","val","dval","_parsePx","console","closest","serie","def","parsed","_getPositionPx","_parsePercent","percent","getDeltaPx","v","deltaPosition","mode","ref","refd","refPx","deltaPx","getValPosition","rel","getPx","value","isNumeric","getPxRel","Position","posObject","position","callback","to","params","source","options","eventName","r","Math","c","Array","obj","t","p","q","s","g","b","l","hue2rgb","h","restoreDomAttributes","attributes","dom","hasSavedAttribute","attrs","context","args","timeout","func","callNow","immediate","clearTimeout","setTimeout","parser","doc","rect","el","top","left","style","element","values","request","response","JSON","resolve","reject","status","hasOwn","Object","toStr","isArray","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","target","arguments","length","deep","src","copy","copyIsArray","clone","extend","mixin","baseClass","setMarkerStyle","_default","modifiers","setSerieStyle","styles","jsonSerie","name","type","Graph","processAxes","axisOptions","constructorName","allAxes","makeAxes","jsonAxes","makeAnnotation","json","newPropertyName","propertyName","label","shape","axes","makeGraph","opts","legend","data","index","serieStyle","annotation","graphFromJson","state","min","max","trigger","handler","allHandlers","EventMixin","on","off","handlers","onAll","ofAll","emit","Obj","URL","dataAggregator","queue","string","onmessage","e","maxX","minX","maxY","minY","direction","numPoints","k","slots","dataAggregatedX","dataAggregatedY","aggregationSum","getX","aggregations","dataPerSlot","slotNumber","slotX","slotY","sums","lastAggregation","lastAggregationX","lastAggregationSum","newAggregation","newAggregationX","postMessage","aggregates","_queueId","workerUrl","aggregatorWorker","id","requestId","Date","toOptimize","prom","resolver","setYData","setXData","setWeight","setInitialParams","setSubset","fromIndex","toIndex","hookIteration","f","setFunction","init","_from","_to","fit","computeResiduals","sumsq","log","nudge","j","dp","buildJacobian","delta","FACTOR","d","getResidualElement","getJacobianElement","buildFit","xmin","xmax","waveformResult","niter","done","hook","bLMiter","sos","rrise","gaussj","det","ik","jk","big","a","save","L","N","xOffset","xScale","nb","bars","above","below","boxes","Waveform","setData","dataX","mutated","nanable","warnNaN","newData","getY","optimized","setXWaveform","waveform","hasXWaveform","getXWaveform","wave","rescaleX","getTypedArrayClass","setTypedArrayClass","isNaNAllowed","isUnsigned","recalculateMinMaxNewPoint","prepend","append","concat","wave2","_makeArray","_setData","dataY","monoDir","Number","checkMinMaxErrorBars","computeXMinMax","b1","b2","getDataInUse","getIndexFromVal","useDataToUse","roundingMethod","getIndexFromX","xval","xdata","euclidianSearch","getIndexFromY","yval","ydata","setAtIndex","getIndexFromXY","scaleX","scaleY","getIndexFromDataXY","valX","valY","getIndexFromMonotoneousData","binarySearch","findWithShortestDistance","getShortestDistanceToPoint","point","shortestDistance","shortestDistanceIndex","x2","y2","maxDistanceX","maxDistanceY","distance","distToSegment","getReductionType","getXMin","getXMax","getYMin","getYMax","getMin","getMax","getMinX","getMaxX","getMinY","getMaxY","getDataMaxX","getDataMinX","getDataMaxY","getDataMinY","getDataY","getData","setShift","shift","getShift","getScale","setScale","scale","setXShift","getXShift","setXScale","getXScale","getLength","getDataToUseFlat","arr","self","getXRaw","_integrateP","from","temp","sum","deltaTot","arrY","diff","integrateP","integrate","average","p0","p1","mean","stddev","num","denom","getAverageP","getAverageX","checkMonotonicity","dir","requireXMonotonicity","requireMonotonicity","isMonotoneous","isXMonotoneous","invert","resampleForDisplay","inverting","dataMinMax","doing_mean","firstPointIndex","x_px","resampleSum","resampleMin","resampleMax","resampleNum","resample_x_px_start","resample_x_start","xpos","interpolate","yData","xData","xIndex","xIndexF","interpolateIndex_X","indexStart","getMonotoneousAscending","getXMonotoneousAscending","isXMonotoneousAscending","divide","divideBy","multiply","multiplyBy","ln","logBase","add","addBy","subtract","subtractBy","math","method","_arithmetic","numberOrWave","_numberArithmetic","operation","_waveArithmetic","yDataThis","xSet","xData2","xs","ys","aggregate","pow2","pow2floor","event","hasAggregation","selectAggregatedData","pxWidth","level","pow2ceil","_dataAggregationDirection","alsoDuplicateXWave","newWaveform","subrangeX","fromP","toP","findLocalMinMax","indexPlus","xRef","indexMinus","findLocalMinMaxIndex","tmp","curr","currI","warn","setUnit","setXUnit","getUnit","getXUnit","hasXUnit","hasUnit","findLevels","box","edge","rounding","rangeP","lastLvlIndex","indices","lvlIndex","findLevel","increment","getIndexInterpolate","normalize","factor","maxValue","total","minValue","ratio","filterNaN","filterInfinity","setErrorBarX","xWave","setErrorBarXBelow","setErrorBarXAbove","setErrorBoxX","setErrorBoxXBelow","setErrorBoxXAbove","setErrorBar","checkMinMax","setErrorBarBelow","setErrorBarAbove","setErrorBox","setErrorBoxBelow","setErrorBoxAbove","getMaxError","side","getMaxErrorType","stack","getErrorBarXBelow","getErrorBarXAbove","getErrorBoxXBelow","getErrorBoxXAbove","getErrorBarYBelow","getErrorBarYAbove","getErrorBoxYBelow","getErrorBoxYAbove","getErrorX","getError","errors","hasErrorBars","Symbol","MULTIPLY","ADD","SUBTRACT","DIVIDE","valueAfter","indexAfter","targetX","targetY","haystackX","distance_i","haystackY","reverse","haystack","fineCheck","seedA","seedB","nanDirection","seedInt","getYFromX","xValue","errorNotImplemented","w","l2","dist2","distToSegmentSquared","GraphOptionsDefault","title","paddingTop","paddingBottom","paddingLeft","paddingRight","close","right","bottom","closeColor","fontSize","fontFamily","plugins","pluginAction","mouseActions","keyActions","wheel","dblclick","shapesUnselectOnClick","shapesUniqueSelection","_constructors","wrapper","util","__createDOM","setWrapper","document","wrapperStyle","getComputedStyle","_registerEvents","getDom","getId","getWrapper","setOption","setTitle","setTitleFontSize","setTitleFontColor","setTitleFontFamily","displayTitle","hideTitle","hide","show","redraw","haveAxesChanged","hasSizeChanged","refreshDrawingZone","executeRedrawSlaves","draw","delayUpdate","doUpdate","resumeUpdate","isDelayedUpdate","setWidth","setHeight","resize","setSize","getWidth","getHeight","getPaddingTop","getPaddingLeft","getPaddingBottom","getPaddingRight","getDrawingHeight","useCache","getDrawingWidth","cacheOffset","uncacheOffset","getNumAxes","getXAxis","getYAxis","getTopAxis","_getAxis","getBottomAxis","getLeftAxis","getRightAxis","setXAxis","setYAxis","setLeftAxis","setRightAxis","setTopAxis","setBottomAxis","killAxis","noRedraw","noSerieKill","hasXAxis","hasYAxis","hasTopAxis","hasBottomAxis","hasLeftAxis","hasRightAxis","hasAxis","axisList","autoscaleAxes","autoscale","autoScale","autoScaleAxes","autoScaleAxis","gridsOff","gridsOn","setBackgroundColor","getAxisState","setAxisState","saveAxisState","recallAxisState","_applyToAxis","getBoundaryAxis","valSeries","getBoundaryAxisFromSeries","minmax","func2use","infinity2use","series","serieValue","getSeriesFromAxis","updateDataMinMaxAxes","axisvars","_applyToAxes","tb","lr","ax","findAxesLinkedTo","_axisHasChanged","newSerie","makeSerie","getSerie","getSeries","allSeries","types","sortSeries","drawSerie","drawSeries","resetSeries","killSeries","killLegend","killShapes","removeSeries","selectSerie","selectName","getSelectedSerie","unselectSerie","getShapesOfSerie","shapes","makeToolbar","getShapes","newShape","mute","shapeData","shapeType","shapeProperties","newPosition","redrawShapes","removeShapes","selectShape","getSelectedShapes","unselectShape","unselectShapes","_removeShape","appendShapeToDom","removeShapeFromDom","appendSerieToDom","removeSerieFromDom","getLayer","prevLayer","layer","focus","elementMoving","stopElementMoving","_makeClosingLines","els","line","isActionAllowed","action","backspace","enter","tab","ctrl","alt","pause","escape","up","down","keyCheck","forcePlugin","unforcePlugin","_pluginsExecute","_pluginExecute","pluginYieldActiveState","_serieExecute","_pluginsInit","pluginName","pluginOptions","getPlugin","plugin","hasPlugin","triggerEvent","makeLegend","updateLegend","onlyIfRequired","getLegend","requireLegendUpdate","orthogonalProjectionSetup","maxZ","minZ","shiftX","shiftY","orthogonalProjectionUpdate","refAxisX","refAxisY","x0","y0","dx","dy","sort","sb","sa","kill","_removeSerie","contextListen","lockShapes","unlockShapes","prevent","arg","_getXY","_resize","updateGraphingZone","transform","getDrawingSpaceWidth","getDrawingSpaceHeight","getDrawingSpaceMinX","getDrawingSpaceMinY","getDrawingSpaceMaxX","getDrawingSpaceMaxY","tracking","trackingLine","seriesSet","stroke","addSerieToTrackingLine","serieShape","properties","rx","ry","fillColor","strokeColor","strokeWidth","setKatexRenderer","hasKatexRenderer","renderWithKatex","katexElement","div","exportToSchema","schema","axesExport","allaxes","axesPositions","axisPosition","unit","flip","flipped","toType","exportData","linestyle","styleName","color","lineWidth","lineStyle","styleObj","markers","zoom","lineColor","points","softFail","m","span","possible","levels","getAxisLevelFromSpan","shiftTop","prev","shiftBottom","drawn","shift2","shiftLeft","shiftRight","floatingAxis","floatingValue","floatingPx","_closeLine","checkKeyActions","keyComb","parameters","xmlns","fill","_creation","pathArrow","path","pathVertLine","_handleKey","coords","_handleMouseMove","_handleMouseLeave","_handleMouseDown","_handleMouseUp","_handleDblClick","_handleClick","deltaY","_handleMouseWheel","checkMouseActions","xOverwritePx","snapToSerie","_trackingLegendSerie","output","closestPoint","yClosest","results","executed","textMethod","justCreated","_makeTrackingLegend","seriesOutput","forceTrackingLegendMode","_trackingLegendMove","txt","start","startX","startY","toX","toY","progress","window","group","trackingLineDefaultTextMethod","_availableAxes","time","bar","axisInstance","inst","GraphJSON","legendDefaults","backgroundColor","frame","frameWidth","frameColor","frameRounding","movable","shapesToggleable","isSerieHideable","isSerieSelectable","transformX","transformY","eyeClosed","eyeCrossedId","eye","eyeId","setPosition","alignToX","alignToY","setDraggable","setAutoPosition","autoPosition","buildLegendBox","posX","posY","bbox","getBBox","drawingSpaceMinX","redrawGraph","calculatePosition","GraphPosition","poscoords","update","fullWidth","marker","text","eyeUse","isHideable","notHideable","hideable","isSelectable","isToggleShapes","setEvents","handleMouseUp","handleMouseMove","deltaX","_setPosition","applyStyle","fixSeries","fixSeriesAdd","requireDelayedUpdate","svgElement","height","width","ExtendedEventMixin","manglingName","defaults","lineAt","display","axisDataSpacing","unitModification","primaryGrid","secondaryGrid","primaryGridWidth","primaryGridColor","primaryGridDasharray","primaryGridOpacity","primaryTicksColor","secondaryGridWidth","secondaryGridColor","secondaryGridDasharray","secondaryGridOpacity","secondaryTicksColor","hideWhenNoSeriesShown","shiftToZero","tickPosition","nbTicksPrimary","nbTicksSecondary","ticklabelratio","exponentialFactor","exponentialLabelFactor","logScale","forcedMin","forcedMax","marginMin","marginMax","scientificScale","scientificScaleExponent","engineeringScale","unitInTicks","unitWrapperBefore","unitWrapperAfter","tickLabelOffset","useKatexForLabel","highestMax","lowestMin","labelValue","primary","secondary","handleMouseMoveLocal","setDisplay","isDisplayed","accumulator","isShown","hideGroup","showGroup","setLineAt","adaptTo","thisValue","foreignValue","preference","adapt","current","foreign","use","setFloating","getFloatingAxis","getFloatingValue","setAxisDataSpacing","val2","dataSpacing","setAxisDataSpacingMin","setAxisDataSpacingMax","setMinPx","setMaxPx","getMinPx","getMaxPx","getMathMaxPx","getMathMinPx","getMinValue","getMaxValue","setMinValueData","setMaxValueData","getDataMax","getDataMin","setLowestMin","forceMin","noRescale","setHighestMax","forceMax","getForcedMin","getForcedMax","forceToAxis","getNbTicksPrimary","setNbTicksPrimary","getNbTicksSecondary","setNbTicksSecondary","handleMouseWheel","baseline","_doZoomVal","_doZoom","val1","getSerieShift","getSerieScale","getMouseVal","getUnitPerTick","pxPerTick","nbTick","unitPerTick","valrange","breaked","unitPerTickCorrect","decimals","numberToNatural","possibleTicks","nbTicks","setMinMaxToFitSeries","interval","getInterval","getCurrentInterval","getCurrentMin","getCurrentMax","cacheCurrentMin","cacheCurrentMax","cacheInterval","cache","setCurrentMin","setCurrentMax","isFlipped","_draw","widthPx","letter","scientificExponent","widthHeight","drawLines","writeUnit","getExponentGreekLetter","drawLinearTicksWrapper","tickPrimaryUnit","forcePrimaryTickUnit","forcePrimaryTickUnitMax","forcePrimaryTickUnitMin","getPrimaryTickUnit","setTickLabelRatio","doesHideWhenNoSeriesShown","drawTicks","loop","secondaryIncr","incrTick","subIncrTick","loop2","nextTick","tick","nextTickLabel","tickLabel","removeUselessTicks","removeUselessTickLabels","nextGridLine","x1","y1","setGridLineStyle","gridLine","dasharray","setGridLinesStyle","resetTicksLength","secondaryTicks","drawLogTicks","incr","optsMain","exponential","overwrite","pow","drawTickWrapper","linkToAxis","scalingFunction","drawLinkedToAxisTicksWrapper","String","delta2","getPos","getRoundedPx","getVal","getRelPx","getRelVal","valueToText","dec","forceDecimals","valueToHtml","getModifiedValue","modifyUnit","units","umin","valueRounded","setExponentialFactor","getExponentialFactor","setExponentialLabelFactor","getExponentialLabelFactor","setLabelExponentialFactor","getLabelExponentialFactor","setName","setLabel","setLabelFont","getLabel","setSpan","getSpan","setLevel","getLevel","setTickPosition","setGrids","setPrimaryGrid","setSecondaryGrid","primaryGridOn","primaryGridOff","secondaryGridOn","secondaryGridOff","turnGridsOff","turnGridsOn","setColor","setAxisColor","getAxisColor","setTickLabelOffset","setPrimaryTicksColor","getPrimaryTicksColor","setSecondaryTicksColor","getSecondaryTicksColor","setTicksLabelColor","getTicksLabelColor","setPrimaryGridColor","getPrimaryGridColor","setSecondaryGridColor","getSecondaryGridColor","setPrimaryGridWidth","getPrimaryGridWidth","setSecondaryGridWidth","getSecondaryGridWidth","setPrimaryGridOpacity","getPrimaryGridOpacity","setSecondaryGridOpacity","getSecondaryGridOpacity","setPrimaryGridDasharray","getPrimaryGridDasharray","setSecondaryGridDasharray","getSecondaryGridDasharray","setLabelColor","getLabelColor","setTickContent","tspan","isX","isY","setUnitInTicks","setUnitWrapper","setUnitDecade","setScientific","setScientificScaleExponent","setEngineering","getEngineeringExponent","setLogScale","isZoomed","getType","Axis","topbottom","getAxisPosition","size","forceHeight","getMaxSizeTick","drawTick","forcedPos","drawLabel","tickWidth","drawSpecifics","_drawLine","_hideLine","setMinMaxFlipped","maxPx","minPx","getZProj","zValue","leftright","forceWidth","setAxisPosition","getAdditionalWidth","equalizePosition","placeLabel","xshift","isLeft","isRight","scaleToFitAxis","end","excludeSerie","maxV","minV","elements","autoSeries","setSeries","_getUsedCategories","categories","usedCategories","dispatchedCategories","scategories","cat","axisFormat","threshold","increments","format","dateFormat","token","timezone","timezoneClip","pad","len","getWeek","onejan","dF","mask","date","SyntaxError","utc","_","D","H","M","o","flags","dd","ddd","dddd","mm","mmm","mmmm","yy","yyyy","hh","HH","MM","ss","tt","T","TT","Z","S","W","$0","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","dayNames","monthNames","getClosestIncrement","x1B","x2B","widthTime","maxVal","minVal","currentFormat","hideGroups","dateFirst","currentDate","roundDate","getDateText","getGroup","xVal1","incrementDate","xVal2","renderGroup","ErrorBarMixin","makeBarY","coordY","origin","makeBoxY","makeBarX","coordX","makeBoxX","setErrorBarStyle","setErrorBoxStyle","_setErrorStyle","errorstyles","pairs","makePath","errorDrawInit","errorAddPoint","error","xpx","ypx","errorAddPointBarChart","errorDraw","defaultOptions","redrawShapesAfterDraw","postInit","beforeDraw","afterDraw","_addData","clearData","setOptions","hideShapes","showShapes","hideImpl","showImpl","toggleDisplay","axisCheck","isSelected","_checkX","_checkY","getName","autoAxis","autoAxes","setAxes","getWaveform","getWaveforms","setWaveform","getSymbolForLegend","_getSymbolForLegendContainer","setLegendSymbolStyle","updateStyle","getTextForLegend","getIndex","setFlip","getFlip","setLayer","newLayer","setStyle","selectionType","styleHasChanged","hasStyleChanged","dataHasChanged","hasDataChanged","setInfo","getInfo","setAdditionalData","getAdditionalData","select","unselect","enableTracking","disableTracking","allowTrackingLine","getMarkerForLegend","excludeFromLegend","includeInLegend","setDataIndices","hasErrors","EventMixing","markerStyles","unselected","default","cx","cy","selected","setDataCategory","dataCategory","empty","container","isCategory","keys","n","_makeMarker","getMarkerStyle","selection","styleAll","defaultStyle","modifier","applyMarkerStyle","unselectMarker","selectMarker","setOn","selectionStyle","allStyles","setMarkers","bln","showMarkers","hideMarkers","getUsedCategories","getClosestPointToXY","withinPxX","withinPxY","useAxis","usePx","xValAllowed","yValAllowed","closestPointIndex","xMax","yMax","interpolation","indexBefore","xBefore","xAfter","yBefore","yAfter","xExact","indexClosest","interpolatedY","xClosest","trackMouse","lineToZero","selectableOnClick","overflowX","overflowY","cursor","onMouseWheel","degrade","drawInit","resampleToPx","xPosition","xaxis","numberOfPointsInTotal","promise","removeLinesGroup","insertLinesGroup","removeExtraLines","force","slotToUse","lastX","lastY","xMin","yMin","yshift","yscale","lastPointOutside","_monotoneous","xpx2","ypx2","pointOutside","pointOnAxis","cloned","ret","_getIterativeBounds","wL","isPointOutside","calculateAxisCrossing","yLeftCrossingRatio","yLeftCrossing","yRightCrossingRatio","yRightCrossing","xTopCrossingRatio","xTopCrossing","xBottomCrossingRatio","xBottomCrossing","_addPoint","_createLine","applyLineStyles","applyLineStyle","getMarkerPath","z","family","yValue","intY","doMarker","trueX","start2","end2","v1","v2","initJ","maxJ","setLineStyle","getLineStyle","getLineDashArray","getStyle","extendStyles","extendStyle","styleOrigin","setLineWidth","getLineWidth","setLineColor","setFillColor","getLineColor","getFillColor","xMaxDistance","yMaxDistance","axisRef","dataOutput","Serie3DMixin","getZPos","getZCorrectedValue","wf","valFinal","zpos","setZPos","setz","fillOpacity","setFillOpacity","getFillOpacity","orientation","maxBoxWidth","meanLineColor","meanLineWidth","boxAboveLineWidth","boxAboveLineColor","boxAboveFillColor","boxAboveFillOpacity","boxBelowLineWidth","boxBelowLineColor","boxBelowFillColor","boxBelowFillOpacity","barAboveLineColor","barAboveLineWidth","barBelowLineColor","barBelowLineWidth","outlierLineWidth","outlierLineColor","outlierFillColor","outlierFillOpacity","defaultInherited","axisref","axisval","methodref","methodval","blnX","throwError","_style","applyToSelected","_gstyle","setMeanLineColor","getMeanLineColor","setMeanLineWidth","getMeanLineWidth","setBoxAboveLineColor","getBoxAboveLineColor","setBoxBelowLineColor","getBoxBelowLineColor","setBoxAboveLineWidth","getBoxAboveLineWidth","setBoxBelowLineWidth","getBoxBelowLineWidth","setBoxAboveFillColor","getBoxAboveFillColor","setBoxBelowFillColor","getBoxBelowFillColor","setBoxAboveFillOpacity","getBoxAboveFillOpacity","setBoxBelowFillOpacity","getBoxBelowFillOpacity","setBarAboveLineColor","getBarAboveLineColor","setBarBelowLineColor","getBarBelowLineColor","setBarAboveLineWidth","getBarAboveLineWidth","setBarBelowLineWidth","getBarBelowLineWidth","setOutlierLineColor","getOutlierLineColor","setOutlierLineWidth","getOutlierLineWidth","setOutlierFillColor","getOutlierFillColor","setOutlierFillOpacity","getOutlierFillOpacity","axis2","emptyDom","boxOtherDimension","scatter_serie","boxAbove","boxBelow","barBelow","barAbove","outliers","lineMean","rectAbove","rectBelow","whiskerAbove","whiskerBelow","outliervalue","outlier","applyBoxStyle","applyWhiskerStyle","applyMeanStyle","setOutlierStyle","getCategoryIndex","boxPos","extremity","xymode","scatter_serie_cat","linkToScatterSerie","setColors","xpxbefore","object","ypxbefore","latchLines","eraseLines","guid","setWaveforms","setMinMaxWaveforms","move","xminpx","xmaxpx","yminpx","ymaxpx","ymin","ymax","buffer","setLineOpacity","getLineOpacity","calculateDensity","densitymap","binMin","binMax","indexX","indexY","setDensityMap","calculateDensityWeighted","exactX","exactY","indexXLow","indexYLow","indexXHigh","indexYHigh","compX","compY","autoBins","numX","numY","setPxPerBin","pxPerBin","weighted","weightedDensityMap","setBinsFromTo","numBins","calculationDensityMap","calculateDensityAdvanced","weighing","widthValues","drawingSpaceHeight","axisGetter","dimension","setColorMapBinBoundaries","autoColorMapBinBoundaries","onRedrawColorMapBinBoundaries","colorMapHSL","methods","numColors","colorMap","opacities","slices","colorStops","first","autoColorMapHSL","getColorIndex","binValue","deltaXPx","deltaYPx","colorIndex","drawRects","datas","lines","next","incrXFlip","incrYFlip","domLine","shiftKey","fixed","setDynamicColor","setNegative","setColorTo","hsl","rgb","overwriteValue","setShapeZoom","simplified","maskPath","maskDom","initImpl","isHidden","isVisible","addClass","removeClass","makeClasses","changed","setEventReceptacle","setSerie","redrawImpl","setProperties","getRelativePosition","result","getProperties","setProp","getProp","getProps","addProp","resetProp","setDom","setDomGroup","setStrokeColor","getStrokeColor","setStrokeWidth","getStrokeWidth","setStrokeDasharray","setAttributes","overwriteSavedProp","addAttribute","added","addTransform","addTransformRotate","angleType","center","angle","resetTransforms","setLabelText","setLabelData","getLabelText","displayLabel","hideLabel","setLabelFontSize","getLabelPosition","setLabelPosition","setLabelAngle","setLabelBaseline","setLabelAnchor","setLabelSize","setLabelStrokeColor","setLabelStrokeWidth","setLabelBackgroundColor","setLabelBackgroundOpacity","applyGenericStyle","getPosition","sortPositions","_applyTransforms","transforms","transformString","posCenter","makeLabels","bg","isLabelEditable","labelIndex","updateLabels","_applyLabelData","visible","currAngle","labelData","emptyLabels","_getLabelAnchor","anchor","hasHandles","addHandles","removeHandles","hideHandles","areHandlesInDom","_select","applySelectedStyle","style2","_unselect","getSelectStyle","setSelectStyle","setStaticHandles","hasStaticHandles","_createHandles","handle","attr","callbackEach","createHandles","handleMouseDownImpl","handleMouseMoveImpl","handleMouseUpImpl","handleCreateImpl","handleMouseDown","handleClick","handleDblClick","handleMouseOver","handleMouseOut","lock","unlock","isLocked","unmovable","isMovable","resizable","unresizable","isResizable","selectable","unselectable","highlight","saveDomName","unHighlight","highlightImpl","unHighlightImpl","getHighlightAttributes","setHighlightAttributes","getMaskingID","maskWith","maskingId","maskingShape","updateMask","labelDblClickListener","shapeLabel","marginTop","marginLeft","textAlign","previousValue","blurEvent","nextValue","appendToDom","forceParentDom","isHTML","Shape","createDom","applyPosition","posXY","posXY2","v3","firstX","setHandles","position2","pos2","posToChange","forced","posR","posComputed","setR","setPointsPx","str","xor","currentLine","baseLine","pos1","index1","index2","index3","condition","incrementation","xVal","yVal","firstY","firstXVal","firstYVal","lastXVal","lastYVal","py","updateIntegralValue","ratioLabel","forceValue","getAxis","selectStyle","selectHandles","handles","sides","invX","invY","pos2X","pos2Y","currentX","currentW","currentY","currentH","redrawLines","posLeft","posRight","redrawY","setY","setLineHeight","setContent","setRenderer","Plugin","onMouseDown","onMouseUp","onMouseMove","dragX","dragY","persistanceX","persistanceY","dt","_persistanceMove","setShape","shapeInfo","onChange","locked","findPoints","counter","j2","zoomMode","_x","_y","modeX","modeY","removeZone","doX","doY","onDblClick","pref","xActual","diffX","yActual","diffY","transition","maxTime","isFullX","isFullY","toAxes","memory","memoryHead","head","getFromMemory","LRUName","intervals","maxParallelRequests","optimalPxPerPoint","nbPoints","url","LRU","setURL","setAvailableIntervals","serieName","registerPlugin","updateSerie","optimalInterval","optimalIntervalIndex","startSlotId","endSlotId","intervalMultipliers","firstSlotId","multiplier","lastSlotId","slotId","cleanRegister","levelArray","levelElement","register","noRecalculate","priority","processRequests","currentLevelChecking","requestToMake","computeTimeMax","computeTimeMin","getURL","requestElements","dbElements","getOptimalInterval","newDiff","optimalIntervalAmongAvailable","computeUniqueID","extra","info","computeSlotID","computeSlotTime","getZoneSerie","updateZoneSerie","recalculateSeries","recalculateSerie","lruData","setIntervalCheck","clearInterval","setInterval","recalculateSerieUpwards","nextInterval","newSlotTime","newSlotTimeEnd","downSlotId","newSlotId","lockRedraw","unlockRedraw","isRedrawLocked","positiveStyle","negativeStyle","setBoundaries","getFrom","getTo","w1","w2","wFinal","wFinal2","chunks","newChunk","currentChunk","wave1","crossing","chunk","computeCrossing","a1","y12","x12","a2","y22","x22","x11","x21","y11","getPositivePolyline","getNegativePolyline","excludingMethods","addMethods","SerieLine","SerieLineExtended","subSerie","returnMethods","SerieScatterExtended","margins","high","low","newXAxis","newYAxis","newTopAxis","newBottomAxis","newLeftAxis","newRightAxis","getOptions","preDraw","splits","subserie","subAxisIndex","xSubAxis","sserie","ySubAxis","newLineSerie","serieObj","newScatterSerie","defaultAxisConstructorOptions","splitMarks","SplitAxis","cl","all","splitAxis","splitNumber","fixGridIntervalBasedOnAxis","splitSpread","_splitSpread","currentSplit","split","setChunkBoundaries","baseWidth","baseWidthIndex","subAxis","spanReference","getSubAxis","delegateMethods","methodName","getConstructor","widthAfter","checkHSL","hue","saturation","lightness","buildHSLString","colorizeAll","seriesLength","endS","endL","colorString","autoPeakPicking","autoPeakPickingNb","autoPeakPickingMinDistance","autoPeakPickingFormat","autoPeakPickingAllowAllY","shapeOptions","minPosY","pick","serieRemoved","postDraw","lookForMaxima","lookForMinima","peaks","lastYPeakPicking","passed","hidePeakPicking","showPeakPicking","killPeakPicking"],"mappings":"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","sourcesContent":["function _parsePx( px ) {\r\n  if ( px && px.indexOf && px.indexOf( 'px' ) > -1 ) {\r\n    return parseInt( px.replace( 'px', '' ) );\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isNumeric( n ) {\r\n  return !isNaN( parseFloat( n ) ) && isFinite( n );\r\n}\r\n\r\n/**\r\n * Utility class to compute positioning\r\n * @class\r\n */\r\nclass Position {\r\n  constructor( x, y, dx, dy ) {\r\n    if ( typeof x == 'object' ) {\r\n      this.x = x.x;\r\n      this.y = x.y;\r\n      this.dx = x.dx;\r\n      this.dy = x.dy;\r\n    } else {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.dx = dx;\r\n      this.dy = dy;\r\n    }\r\n  }\r\n\r\n  duplicate() {\r\n    return new Position( this.x, this.y, this.dx, this.dy );\r\n  }\r\n\r\n  /**\r\n   *  Computes the position of the position\r\n   *  @param {Graph} graph - The graph for which the position has to be computed\r\n   *  @param {AxisX} xAxis - The x axis to consider (has to belong to the graph)\r\n   *  @param {AxisY} yAxis - The y axis to consider (has to belong to the graph)\r\n   *  @param {Serie} [serie] - For non-existing y value, use a serie to compute it automatically from the serie data\r\n   *  @return {Object} An object in the format ```{x: xPx, y: yPx}``` containing the position in pixels of the position\r\n   */\r\n  compute( graph, xAxis, yAxis, serie ) {\r\n    if ( !graph || !xAxis || !yAxis || !graph.hasXAxis || !graph.hasYAxis ) {\r\n      graph.throw();\r\n    }\r\n\r\n    if ( !graph.hasXAxis( xAxis ) ) {\r\n      throw 'Graph does not contain the x axis that was used as a parameter';\r\n    }\r\n\r\n    if ( !graph.hasYAxis( yAxis ) ) {\r\n      throw 'Graph does not contain the x axis that was used as a parameter';\r\n    }\r\n\r\n    return this._compute( graph, xAxis, yAxis, serie );\r\n  }\r\n\r\n  _compute( graph, xAxis, yAxis, serie ) {\r\n    var relativeTo = this._relativeTo;\r\n    if ( relativeTo ) {\r\n      var relativeToComputed = relativeTo._compute( graph, xAxis, yAxis, serie );\r\n    }\r\n\r\n    var parsed,\r\n      pos = {\r\n        x: false,\r\n        y: false\r\n      };\r\n\r\n    if ( !xAxis ) {\r\n      xAxis = graph.getXAxis();\r\n    }\r\n\r\n    if ( !yAxis ) {\r\n      yAxis = graph.getYAxis();\r\n    }\r\n\r\n    for ( var i in pos ) {\r\n      var axis = i == 'x' ? xAxis : yAxis;\r\n      var val = this[ i ];\r\n      var dval = this[ `d${i}` ];\r\n\r\n      if (\r\n        val === undefined &&\r\n        ( ( dval !== undefined && relativeTo === undefined ) ||\r\n          relativeTo === undefined )\r\n      ) {\r\n        if ( i == 'x' ) {\r\n          if ( dval === undefined ) {\r\n            continue;\r\n          }\r\n\r\n          pos[ i ] = relativeTo ? relativeTo[ i ] : 0;\r\n        } else if ( this.x !== undefined && serie ) {\r\n          if ( _parsePx( this.x ) !== false ) {\r\n            console.warn(\r\n              'You have defined x in px and not y. Makes no sense. Returning 0 for y'\r\n            );\r\n            pos[ i ] = 0;\r\n          } else {\r\n            try {\r\n              var closest = serie.getClosestPointToXY( this.x );\r\n\r\n              if ( !closest ) {\r\n                throw new Error(\r\n                  `Could not find y position for x = ${this.x\r\n                  } on serie \"${serie.getName()}\". Returning 0 for y.`\r\n                );\r\n              }\r\n\r\n              pos[ i ] = serie.getY( closest.yClosest );\r\n            } catch ( error ) {\r\n              console.error( error );\r\n              pos[ i ] = 0;\r\n            }\r\n          }\r\n        }\r\n      } else if ( val !== undefined ) {\r\n        pos[ i ] = this.getPx( val, axis );\r\n      }\r\n\r\n      if ( dval !== undefined ) {\r\n        var def =\r\n          val !== undefined ||\r\n          relativeToComputed == undefined ||\r\n          relativeToComputed[ i ] == undefined ?\r\n          pos[ i ] :\r\n          relativeToComputed[ i ];\r\n\r\n        if (\r\n          i == 'y' &&\r\n          relativeToComputed &&\r\n          relativeToComputed.x !== undefined &&\r\n          relativeToComputed.y == undefined\r\n        ) {\r\n          if ( !serie ) {\r\n            throw new Error( 'Error. No serie exists. Cannot find y value' );\r\n            return;\r\n          }\r\n\r\n          var closest = serie.getClosestPointToXY( relativeTo.x );\r\n          if ( closest ) {\r\n            def = serie.getY( closest.yMin );\r\n          }\r\n\r\n          //console.log( relativeTo.x, closest, serie.getY( closest.yMin ), def );\r\n        }\r\n\r\n        if ( !def ) {\r\n          def = 0;\r\n        }\r\n\r\n        if ( ( parsed = _parsePx( dval ) ) !== false ) {\r\n          // dx in px => val + 10px\r\n\r\n          pos[ i ] = def + parsed; // return integer (will be interpreted as px)\r\n        } else if ( ( parsed = this._parsePercent( dval ) ) !== false ) {\r\n          pos[ i ] = def + this._getPositionPx( parsed, true, axis, graph ); // returns xx%\r\n        } else if ( axis ) {\r\n          pos[ i ] = def + axis.getRelPx( dval ); // px + unittopx\r\n        }\r\n      }\r\n    }\r\n\r\n    return pos;\r\n  }\r\n\r\n  _getPositionPx( value, x, axis, graph ) {\r\n    var parsed;\r\n\r\n    if ( ( parsed = _parsePx( value ) ) !== false ) {\r\n      return parsed; // return integer (will be interpreted as px)\r\n    }\r\n\r\n    if ( ( parsed = this._parsePercent( value ) ) !== false ) {\r\n      return (\r\n        ( parsed / 100 ) *\r\n        ( x ? graph.getDrawingWidth() : graph.getDrawingHeight() )\r\n      );\r\n    } else if ( axis ) {\r\n      return axis.getPos( value );\r\n    }\r\n  }\r\n\r\n  _parsePercent( percent ) {\r\n    if ( percent && percent.indexOf && percent.indexOf( '%' ) > -1 ) {\r\n      return percent;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   *  Computes the value in pixels of an amplitude (or a distance) for a certain axis\r\n   *  @param {Number} value - The value in axis unit\r\n   *  @param {Axis} Axis - The x axis to consider (has to belong to the graph)\r\n   *  @return {String} The value in pixels, e.g. \"20px\"\r\n   */\r\n  getDeltaPx( value, axis ) {\r\n    var v;\r\n    if ( ( v = _parsePx( value ) ) !== false ) {\r\n      return `${v}px`;\r\n    } else {\r\n      return `${axis.getRelPx( value )}px`;\r\n    }\r\n  }\r\n\r\n  deltaPosition( mode, delta, axis ) {\r\n    mode = mode == 'y' ? 'y' : 'x';\r\n    var ref = this[ mode ],\r\n      refd = this[ `d${mode}` ],\r\n      refPx,\r\n      deltaPx;\r\n\r\n    if ( ref !== undefined ) {\r\n      if ( ( refPx = _parsePx( ref ) ) !== false ) {\r\n        if ( ( deltaPx = _parsePx( delta ) ) !== false ) {\r\n          this[ mode ] = `${refPx + deltaPx}px`;\r\n        } else {\r\n          this[ mode ] = `${refPx + axis.getRelPx( delta )}px`;\r\n        }\r\n      } else {\r\n        ref = this.getValPosition( ref, axis );\r\n\r\n        if ( ( deltaPx = _parsePx( delta ) ) !== false ) {\r\n          this[ mode ] = ref + axis.getRelVal( deltaPx );\r\n        } else {\r\n          this[ mode ] = ref + delta;\r\n        }\r\n      }\r\n    } else if ( refd !== undefined ) {\r\n      if ( mode == 'y' && ref === undefined && !this._relativeTo ) {\r\n        // This means that the shape is placed by the x value. Therefore, the dy is only a stand-off.\r\n        // Therefore, we do nothing\r\n        return;\r\n      }\r\n\r\n      if ( ( refPx = _parsePx( refd ) ) !== false ) {\r\n        if ( ( deltaPx = _parsePx( delta ) ) !== false ) {\r\n          this[ `d${mode}` ] = `${refPx + deltaPx}px`;\r\n        } else {\r\n          this[ `d${mode}` ] = `${refPx + axis.getRelPx( delta )}px`;\r\n        }\r\n      } else {\r\n        refd = this.getValPosition( refd, axis );\r\n\r\n        if ( ( deltaPx = _parsePx( delta ) ) !== false ) {\r\n          this[ `d${mode}` ] = refd + axis.getRelVal( deltaPx );\r\n        } else {\r\n          this[ `d${mode}` ] = refd + delta;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getValPosition( rel, axis ) {\r\n    if ( rel == 'max' ) {\r\n      return axis.getMaxValue();\r\n    }\r\n\r\n    if ( rel == 'min' ) {\r\n      return axis.getMinValue();\r\n    }\r\n\r\n    if ( rel == 'max' ) {\r\n      return axis.getMaxValue();\r\n    }\r\n\r\n    if ( rel == 'min' ) {\r\n      return axis.getMinValue();\r\n    }\r\n\r\n    return rel;\r\n  }\r\n\r\n  /**\r\n   *  Computes a value in pixels\r\n   *  @param {Number} value - The value in axis unit\r\n   *  @param {Axis} axis - The x or y axis to consider (has to belong to the graph)\r\n   *  @param {Boolean} rel - Whether or not the value is a distance\r\n   *  @return {(Number|String)} The computed value\r\n   */\r\n  getPx( value, axis, rel ) {\r\n    var parsed;\r\n\r\n    if ( typeof value == 'function' ) {\r\n      return value( axis, rel );\r\n    } else if ( ( parsed = _parsePx( value ) ) !== false ) {\r\n      return parsed; // return integer (will be interpreted as px)\r\n    } else if ( ( parsed = this._parsePercent( value ) ) !== false ) {\r\n      return parsed; // returns xx%\r\n    } else if ( axis ) {\r\n      if ( value == 'min' ) {\r\n        return axis.getMinPx();\r\n      } else if ( value == 'max' ) {\r\n        return axis.getMaxPx();\r\n      } else if ( rel ) {\r\n        return axis.getRelPx( value );\r\n      } else if ( isNumeric( value ) ) {\r\n        return axis.getPos( value );\r\n      }\r\n    }\r\n  }\r\n\r\n  getPxRel( value, axis ) {\r\n    return this.getPx( value, axis, true );\r\n  }\r\n\r\n  /**\r\n   *  Assigns the current position as relative to another. This is used when a position is used with \"dx\" or \"dy\" and not \"x\" or \"y\"\r\n   *  @param {Position} pos - The reference position\r\n   *  @return {Position} The current position\r\n   */\r\n  relativeTo( pos ) {\r\n    this._relativeTo = Position.check( pos );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Checks if an object is a position. If not, creates a new Position instance with the ```pos``` object. If a new position is created, ```callback``` is fired with the position as a unique parameter. The return of the function, if not false, should be a ```Position``` instance which serves as the reference position.\r\n   *  @example Position.check( { x: 1, y: 2 }, function() { return someOtherPosition; } );\r\n   *  @param {(Object|Position)} pos - The position object or the object fed into the constructor\r\n   *  @param {Function} callback - The callback fired if a new position is created\r\n   *  @return {Position} The resulting position object\r\n   */\r\n  static check( pos, callback ) {\r\n    if ( pos instanceof Position ) {\r\n      return pos;\r\n    }\r\n\r\n    var posObject = new Position( pos );\r\n\r\n    if ( pos && pos.relativeTo ) {\r\n      const position = callback( pos.relativeTo );\r\n      if ( position ) {\r\n        posObject.relativeTo( position );\r\n      }\r\n    }\r\n\r\n    return posObject;\r\n  }\r\n}\r\n\r\nexport default Position;","/**\r\n * Easy set attribute method to apply to a SVG Element the attributes listed. Optional namespacing\r\n * @param {SVGElement} to - The SVG element to apply the attributes to\r\n * @param {Object<String,Any>} attr - A key/value hashmap of attributes\r\n * @param {String} [ ns = undefined ] - The namespace to use (with <code>setAttributeNS</code>). Default if without namespacing\r\n */\r\nexport function setAttributeTo( to, params, ns ) {\r\n  var i;\r\n\r\n  if ( ns ) {\r\n    for ( i in params ) {\r\n      to.setAttributeNS( ns, i, params[ i ] );\r\n    }\r\n  } else {\r\n    for ( i in params ) {\r\n      to.setAttribute( i, params[ i ] );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Maps old-style events defined within the creation (i.e. <code>{ onMouseOver: function() }</code>) to modern event listening <code>.on(\"mouseover\")</code>\r\n * The function will read any object and select the ones starting with \"on\"\r\n * @params {Object} options - An option object to read the events from\r\n * @param {Object} source - The source object to which the options belong\r\n * @example util.mapEventEmission( this.options, this );\r\n */\r\nexport function mapEventEmission( options, source ) {\r\n\r\n  if ( !source ) {\r\n    source = this;\r\n  }\r\n\r\n  var eventName;\r\n\r\n  for ( var i in options ) {\r\n\r\n    // Starts with onXXX\r\n    if ( i.indexOf( 'on' ) == 0 && typeof options[ i ] == 'function' ) {\r\n      eventName = i.substring( 2 );\r\n      eventName = eventName.substring( 0, 1 ).toLowerCase() + eventName.substring( 1 );\r\n\r\n      if ( source.on ) {\r\n\r\n        ( function( j ) {\r\n\r\n          source.on( eventName, function() {\r\n            options[ j ].apply( source, arguments );\r\n          } );\r\n\r\n        } )( i );\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @link http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n * @return {String} a random id\r\n */\r\nexport function guid() {\r\n  //\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace( /[xy]/g, function( c ) {\r\n    var r = Math.random() * 16 | 0,\r\n      v = c == 'x' ? r : ( r & 0x3 | 0x8 );\r\n    return v.toString( 16 );\r\n  } );\r\n\r\n}\r\n\r\nexport function throwError( message ) {\r\n  console.error( message );\r\n}\r\n\r\nexport function warn( message ) {\r\n  console.warn( message );\r\n}\r\n\r\n/**\r\n * Checks if a variable is a numeric or not\r\n * @return {Boolean} <code>true</code> for a numeric value, false otherwise\r\n */\r\nexport function isNumeric( obj ) {\r\n  return !Array.isArray( obj ) && ( obj - parseFloat( obj ) + 1 ) >= 0;\r\n}\r\n\r\n/**\r\n * @see http://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  l       The lightness\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hue2rgb( p, q, t ) {\r\n  if ( t < 0 ) t += 1;\r\n  if ( t > 1 ) t -= 1;\r\n  if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n  if ( t < 1 / 2 ) return q;\r\n  if ( t < 2 / 3 ) return p + ( q - p ) * ( 2 / 3 - t ) * 6;\r\n  return p;\r\n}\r\n\r\nexport function hslToRgb( h, s, l ) {\r\n  var r, g, b;\r\n\r\n  if ( s == 0 ) {\r\n    r = g = b = l; // achromatic\r\n  } else {\r\n\r\n    var q = l < 0.5 ? l * ( 1 + s ) : l + s - l * s;\r\n    var p = 2 * l - q;\r\n    r = hue2rgb( p, q, h + 1 / 3 );\r\n    g = hue2rgb( p, q, h );\r\n    b = hue2rgb( p, q, h - 1 / 3 );\r\n  }\r\n\r\n  return [ Math.round( r * 255 ), Math.round( g * 255 ), Math.round( b * 255 ) ];\r\n}\r\n\r\nexport function saveDomAttributes( to, attributes, identification ) {\r\n\r\n  if ( !to ) return;\r\n\r\n  to._savedAttributesIds = to._savedAttributesIds || [];\r\n\r\n  if ( to._savedAttributesIds.indexOf( identification ) > -1 ) {\r\n    restoreDomAttributes( to, identification );\r\n  }\r\n\r\n  to._savedAttributes = to._savedAttributes || {};\r\n  to._attributes = to._attributes || {};\r\n  to._attributes[ identification ] = attributes;\r\n\r\n  to._savedAttributesIds.push( identification );\r\n\r\n  for ( var i in attributes ) {\r\n\r\n    if ( !to._savedAttributes[ i ] ) {\r\n      to._savedAttributes[ i ] = to.getAttribute( i );\r\n    }\r\n\r\n    to.setAttribute( i, attributes[ i ] );\r\n  }\r\n\r\n}\r\n\r\nexport function hasSavedAttribute( dom, attr ) {\r\n  return dom._savedAttributes && dom._savedAttributes[ attr ] !== undefined;\r\n}\r\n\r\nexport function overwriteDomAttribute( dom, attribute, newValue ) {\r\n  if ( hasSavedAttribute( dom, attribute ) ) {\r\n    dom._savedAttributes[ attribute ] = newValue;\r\n  }\r\n}\r\n\r\nexport function restoreDomAttributes( to, identification ) {\r\n\r\n  if ( !to || !to._savedAttributesIds ) {\r\n    return;\r\n  }\r\n\r\n  to._savedAttributesIds.splice( to._savedAttributesIds.indexOf( identification ), 1 );\r\n  delete to._attributes[ identification ];\r\n\r\n  var attrs = {};\r\n\r\n  for ( var i in to._savedAttributes ) {\r\n    attrs[ i ] = to._savedAttributes[ i ];\r\n  }\r\n\r\n  for ( var i = 0, l = to._savedAttributesIds.length; i < l; i++ ) {\r\n\r\n    for ( var j in to._attributes[ to._savedAttributesIds[ i ] ] ) {\r\n      attrs[ j ] = to._attributes[ to._savedAttributesIds[ i ] ][ j ];\r\n    }\r\n  }\r\n\r\n  for ( var j in attrs ) {\r\n    to.setAttribute( j, attrs[ j ] );\r\n  }\r\n\r\n}\r\n\r\n// https://davidwalsh.name/function-debounce\r\nexport function debounce( func, wait, immediate ) {\r\n  var timeout;\r\n  return function() {\r\n    var context = this,\r\n      args = arguments;\r\n    var later = function() {\r\n      timeout = null;\r\n      if ( !immediate ) func.apply( context, args );\r\n    };\r\n    var callNow = immediate && !timeout;\r\n    clearTimeout( timeout );\r\n    timeout = setTimeout( later, wait );\r\n    if ( callNow ) func.apply( context, args );\r\n  };\r\n}\r\n\r\nexport function SVGParser( svgString ) {\r\n\r\n  var parser = new DOMParser();\r\n  var doc = parser.parseFromString( svgString, 'image/svg+xml' );\r\n  // returns a SVGDocument, which also is a Document.\r\n\r\n  return doc;\r\n\r\n}\r\n\r\n// http://stackoverflow.com/questions/5276953/what-is-the-most-efficient-way-to-reverse-an-array-in-javascript\r\nexport function reverseArray( array ) {\r\n  var left = null;\r\n  var right = null;\r\n  var length = array.length;\r\n  for ( left = 0, right = length - 1; left < right; left += 1, right -= 1 ) {\r\n    var temporary = array[ left ];\r\n    array[ left ] = array[ right ];\r\n    array[ right ] = temporary;\r\n  }\r\n  return array;\r\n}\r\n\r\n// jQuery.fn.offset\r\nexport function getOffset( el ) {\r\n  var rect = el.getBoundingClientRect();\r\n  return {\r\n    top: rect.top,\r\n    left: rect.left\r\n  };\r\n}\r\n\r\n// jQuery.fn.css\r\nexport function setCSS( element, values ) {\r\n  var style = element.style;\r\n  for ( var i in values ) {\r\n    style[ i ] = values[ i ];\r\n  }\r\n}\r\n\r\nexport function ajaxGet( options ) {\r\n  return new Promise( function( resolve, reject ) {\r\n    var request = new XMLHttpRequest();\r\n    request.open( options.type || 'GET', options.url, true );\r\n    if ( options.json ) request.setRequestHeader( 'Accept', 'application/json' );\r\n    request.onload = function() {\r\n      if ( request.status === 200 ) {\r\n        var response = request.responseText;\r\n        if ( options.json ) response = JSON.parse( response );\r\n        resolve( response );\r\n      } else {\r\n        reject( new Error( `Request error: ${ request.status}` ) );\r\n      }\r\n    };\r\n    request.onerror = function() {\r\n      reject( new Error( `Network error: ${ request.status}` ) );\r\n    };\r\n    request.send();\r\n  } );\r\n}\r\n\r\n// https://raw.githubusercontent.com/justmoon/node-extend/888f153645115d1c6aa9a7e346e8e9cd9a83de9b/index.js\r\n// Copyright (c) 2014 Stefan Thomas\r\nvar hasOwn = Object.prototype.hasOwnProperty;\r\nvar toStr = Object.prototype.toString;\r\n\r\nvar isArray = function isArray( arr ) {\r\n  if ( typeof Array.isArray === 'function' ) {\r\n    return Array.isArray( arr );\r\n  }\r\n\r\n  return toStr.call( arr ) === '[object Array]';\r\n};\r\n\r\nvar isPlainObject = function isPlainObject( obj ) {\r\n  if ( !obj || toStr.call( obj ) !== '[object Object]' ) {\r\n    return false;\r\n  }\r\n\r\n  var hasOwnConstructor = hasOwn.call( obj, 'constructor' );\r\n  var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call( obj.constructor.prototype, 'isPrototypeOf' );\r\n  // Not own constructor property must be Object\r\n  if ( obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf ) {\r\n    return false;\r\n  }\r\n\r\n  // Own properties are enumerated firstly, so to speed up,\r\n  // if last one is own, then all properties are own.\r\n  var key;\r\n  for ( key in obj ) {\r\n    /**/\r\n  }\r\n\r\n  return typeof key === 'undefined' || hasOwn.call( obj, key );\r\n};\r\n\r\nexport function extend() {\r\n  var options, name, src, copy, copyIsArray, clone;\r\n  var target = arguments[ 0 ];\r\n  var i = 1;\r\n  var length = arguments.length;\r\n  var deep = false;\r\n\r\n  // Handle a deep copy situation\r\n  if ( typeof target === 'boolean' ) {\r\n    deep = target;\r\n    target = arguments[ 1 ] || {};\r\n    // skip the boolean and the target\r\n    i = 2;\r\n  } else if ( ( typeof target !== 'object' && typeof target !== 'function' ) || target == null ) {\r\n    target = {};\r\n  }\r\n\r\n  for ( ; i < length; ++i ) {\r\n    options = arguments[ i ];\r\n    // Only deal with non-null/undefined values\r\n    if ( options != null ) {\r\n      // Extend the base object\r\n      for ( name in options ) {\r\n        src = target[ name ];\r\n        copy = options[ name ];\r\n\r\n        // Prevent never-ending loop\r\n        if ( target !== copy ) {\r\n          // Recurse if we're merging plain objects or arrays\r\n          if ( deep && copy && ( isPlainObject( copy ) || ( copyIsArray = isArray( copy ) ) ) ) {\r\n            if ( copyIsArray ) {\r\n              copyIsArray = false;\r\n              clone = src && isArray( src ) ? src : [];\r\n            } else {\r\n              clone = src && isPlainObject( src ) ? src : {};\r\n            }\r\n\r\n            // Never move original objects, clone them\r\n            target[ name ] = extend( deep, clone, copy );\r\n\r\n            // Don't bring in undefined values\r\n          } else if ( typeof copy !== 'undefined' ) {\r\n            target[ name ] = copy;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the modified object\r\n  return target;\r\n}\r\n\r\nexport default {};\r\n\r\nexport {\r\n  isArray\r\n};\r\nexport {\r\n  isPlainObject\r\n};\r\n\r\nexport function mix( baseClass, mixin ) {\r\n\r\n  for ( let prop in mixin ) {\r\n\r\n    if ( mixin.hasOwnProperty( prop ) ) {\r\n      baseClass.prototype[ prop ] = mixin[ prop ];\r\n    }\r\n  }\r\n}\r\n\r\nexport function emptyDom( dom ) {\r\n  while ( dom.firstChild ) {\r\n    dom.removeChild( dom.firstChild );\r\n  }\r\n}","const setMarkerStyle = ( serie, style, styleName ) => {\r\n  serie.showMarkers();\r\n  let _default = {};\r\n  let modifiers = [];\r\n\r\n  if ( style.default ) {\r\n    _default = style.default;\r\n    if ( style.modifiers ) {\r\n      modifiers = style.modifiers;\r\n    }\r\n  } else {\r\n    _default = style;\r\n    modifiers = [];\r\n  }\r\n\r\n  serie.setMarkerStyle( _default, modifiers, styleName );\r\n};\r\n\r\nconst setSerieStyle = ( Graph, serie, jsonSerie, type ) => {\r\n  let styles = jsonSerie.style;\r\n\r\n  if ( !Array.isArray( styles ) ) {\r\n    styles = [ {\r\n      name: 'unselected',\r\n      style: styles\r\n    } ];\r\n  }\r\n  styles.map( ( {\r\n    name,\r\n    style\r\n  }, index ) => {\r\n    if ( style.line && ( type == Graph.SERIE_LINE || type == Graph.SERIE_BAR || type == Graph.SERIE_LINE_COLORED ) ) {\r\n      if ( style.line.color && type != Graph.SERIE_LINE_COLORED ) {\r\n        serie.setLineColor( style.line.color, name );\r\n      }\r\n\r\n      if ( style.line.width ) {\r\n        serie.setLineWidth( style.line.width, name );\r\n      }\r\n\r\n      if ( style.line.dash || style.line.style ) {\r\n        serie.setLineStyle( style.line.dash || style.line.style, name );\r\n      }\r\n\r\n      if ( style.line.fill ) {\r\n        serie.setFillColor( style.line.fill, name );\r\n      }\r\n\r\n      if ( style.line.fillOpacity && serie.setFillOpacity ) {\r\n        serie.setFillOpacity( style.line.fillOpacity, name );\r\n      }\r\n    }\r\n    if ( style.errorBar ) {\r\n      serie.setErrorBarStyle( style.errorBar );\r\n    }\r\n\r\n    if ( style.errorBox ) {\r\n      serie.setErrorBoxStyle( style.errorBox );\r\n    }\r\n\r\n    if (\r\n      style.marker &&\r\n      ( type == Graph.SERIE_LINE || type == Graph.SERIE_SCATTER )\r\n    ) {\r\n\r\n      setMarkerStyle( serie, style.marker, name );\r\n    }\r\n  } );\r\n};\r\n\r\nexport default setSerieStyle;","const processAxes = ( Graph, graph, type, axisOptions, allAxes ) => {\r\n\r\n  if ( !Array.isArray( axisOptions ) ) {\r\n    axisOptions = [ axisOptions ];\r\n  }\r\n\r\n  axisOptions.forEach( ( options ) => {\r\n    let constructorName;\r\n\r\n    if ( type == 'x' ) {\r\n      type = 'bottom';\r\n    } else if ( type == 'y' ) {\r\n      type = 'left';\r\n    }\r\n\r\n    if ( type == 'bottom' || type == 'top' ) {\r\n      constructorName = 'graph.axis.x';\r\n\r\n      if ( options.type == 'category' ) {\r\n        constructorName += '.bar';\r\n      }\r\n    } else {\r\n      constructorName = 'graph.axis.y';\r\n    }\r\n\r\n    var axis = new( Graph.getConstructor( constructorName ) )( graph, type );\r\n    axis.init( graph, options );\r\n\r\n    if ( type == 'bottom' ) {\r\n      graph.setBottomAxis( axis, graph.getNumAxes( 'bottom' ) );\r\n    } else if ( type == 'top' ) {\r\n      graph.setTopAxis( axis, graph.getNumAxes( 'top' ) );\r\n    } else if ( type == 'left' ) {\r\n      graph.setLeftAxis( axis, graph.getNumAxes( 'left' ) );\r\n    } else if ( type == 'right' ) {\r\n      graph.setRightAxis( axis, graph.getNumAxes( 'right' ) );\r\n    }\r\n\r\n    if ( options.type == 'category' ) {\r\n      axis.categories = options.categories;\r\n    }\r\n\r\n    if ( options.name ) {\r\n      allAxes[ name ] = axis;\r\n    }\r\n  } );\r\n};\r\n\r\nconst makeAxes = ( Graph, graph, jsonAxes ) => {\r\n  const allAxes = [];\r\n  if ( jsonAxes.x ) {\r\n    processAxes( Graph, graph, 'x', jsonAxes.x, allAxes );\r\n  }\r\n\r\n  if ( jsonAxes.y ) {\r\n    processAxes( Graph, graph, 'y', jsonAxes.y, allAxes );\r\n  }\r\n\r\n  if ( jsonAxes.top ) {\r\n    processAxes( Graph, graph, 'top', jsonAxes.top, allAxes );\r\n  }\r\n\r\n  if ( jsonAxes.left ) {\r\n    processAxes( Graph, graph, 'left', jsonAxes.left, allAxes );\r\n  }\r\n\r\n  if ( jsonAxes.bottom ) {\r\n    processAxes( Graph, graph, 'bottom', jsonAxes.bottom, allAxes );\r\n  }\r\n\r\n  if ( jsonAxes.right ) {\r\n    processAxes( Graph, graph, 'right', jsonAxes.right, allAxes );\r\n  }\r\n};\r\n\r\nexport default makeAxes;","const makeAnnotation = ( graph, json, serie, axes ) => {\r\n  if ( json.type ) {\r\n\r\n    if ( json.properties.label ) {\r\n\r\n      if ( !Array.isArray( json.properties.label ) ) {\r\n        json.properties.label = [ json.properties.label ];\r\n      }\r\n\r\n      json.properties.label.forEach( ( label, index ) => {\r\n\r\n        for ( let propertyName in label ) {\r\n          let newPropertyName = `label${ propertyName.charAt( 0 ).toUpperCase() }${propertyName.slice( 1 )}`;\r\n\r\n          if ( !json.properties[ newPropertyName ] ) {\r\n            json.properties[ newPropertyName ] = [];\r\n          }\r\n          json.properties[ newPropertyName ][ index ] = label[ propertyName ];\r\n\r\n        }\r\n      } );\r\n    }\r\n\r\n    const shape = graph.newShape( json.type, {}, false, json.properties );\r\n\r\n    if ( json.serie ) {\r\n      shape.setSerie( json.serie );\r\n    }\r\n\r\n    if ( serie ) {\r\n      shape.setSerie( serie );\r\n    }\r\n\r\n    if ( json.layer ) {\r\n      shape.setLayer( json.layer );\r\n    }\r\n\r\n    if ( json.xAxis ) {\r\n      shape.setXAxis( axes[ json.xAxis ] );\r\n    }\r\n\r\n    if ( json.yAxis ) {\r\n      shape.setYAxis( axes[ json.yAxis ] );\r\n    }\r\n\r\n    shape.draw();\r\n    shape.redraw();\r\n  }\r\n};\r\n\r\nexport default makeAnnotation;","import serieStyle from './style.js';\r\nimport makeAxes from './axes.js';\r\nimport makeAnnotation from './annotations.js';\r\n\r\nconst makeGraph = ( Graph, graph, json ) => {\r\n  let axes = [];\r\n\r\n  graph.resize( json.width || 400, json.height || 300 );\r\n\r\n  if ( json.axes ) {\r\n    makeAxes( Graph, graph, json.axes );\r\n  }\r\n\r\n  if ( json.legend ) {\r\n    const opts = {};\r\n\r\n    if ( json.legend.seriesHideable ) {\r\n      opts.isSerieHideable = true;\r\n    }\r\n\r\n    if ( json.legend.seriesSelectable ) {\r\n      opts.isSerieSelectable = true;\r\n    }\r\n\r\n    const legend = graph.makeLegend( opts );\r\n\r\n    if ( json.legend.position ) {\r\n      switch ( json.legend.position ) {\r\n        case 'bottom':\r\n          legend.setAutoPosition( 'bottom' );\r\n          break;\r\n\r\n        case 'top':\r\n          legend.setAutoPosition( 'top' );\r\n          break;\r\n\r\n        case 'left':\r\n          legend.setAutoPosition( 'left' );\r\n          break;\r\n\r\n        case 'right':\r\n          legend.setAutoPosition( 'right' );\r\n          break;\r\n\r\n        default:\r\n          legend.setPosition( json.legend.position );\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if ( json.series ) {\r\n    if ( !Array.isArray( json.series ) ) {\r\n      json.series = [ json.series ];\r\n    }\r\n\r\n    json.series.forEach( ( jsonSerie, index ) => {\r\n      let type, data;\r\n\r\n      switch ( jsonSerie.type ) {\r\n        case 'scatter':\r\n          type = Graph.SERIE_SCATTER;\r\n          break;\r\n\r\n        case 'bar':\r\n          type = Graph.SERIE_BAR;\r\n          break;\r\n\r\n        case 'box':\r\n          type = Graph.SERIE_BOX;\r\n          break;\r\n\r\n        case 'color':\r\n          type = Graph.SERIE_LINE_COLORED;\r\n          break;\r\n\r\n        case 'line':\r\n        default:\r\n          type = Graph.SERIE_LINE;\r\n          break;\r\n      }\r\n\r\n      switch ( jsonSerie.type ) {\r\n        case 'bar':\r\n          data = Graph.newWaveformHash();\r\n          if ( jsonSerie.data.errors ) {\r\n            data.setData( jsonSerie.data.values );\r\n          } else {\r\n            data.setData( jsonSerie.data );\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n        case 'line':\r\n        case 'scatter':\r\n          data = Graph.newWaveform();\r\n          data.setData( jsonSerie.data.y, jsonSerie.data.x );\r\n          break;\r\n      }\r\n\r\n      if ( jsonSerie.data.errors ) {\r\n        if ( jsonSerie.data.errors.xBar ) {\r\n          data.setErrorBarX( jsonSerie.data.errors.xBar );\r\n        }\r\n        if ( jsonSerie.data.errors.xBarAbove ) {\r\n          data.setErrorBarXAbove( jsonSerie.data.errors.xBarAbove );\r\n        }\r\n        if ( jsonSerie.data.errors.xBarBelow ) {\r\n          data.setErrorBarXBelow( jsonSerie.data.errors.xBarBelow );\r\n        }\r\n\r\n        if ( jsonSerie.data.errors.yBar ) {\r\n          data.setErrorBar( jsonSerie.data.errors.yBar );\r\n        }\r\n        if ( jsonSerie.data.errors.yBarAbove ) {\r\n          data.setErrorBarAbove( jsonSerie.data.errors.yBarAbove );\r\n        }\r\n        if ( jsonSerie.data.errors.yBarBelow ) {\r\n          data.setErrorBarBelow( jsonSerie.data.errors.yBarBelow );\r\n        }\r\n\r\n        if ( jsonSerie.data.errors.xBox ) {\r\n          data.setErrorBoxX( jsonSerie.data.errors.xBox );\r\n        }\r\n        if ( jsonSerie.data.errors.xBoxAbove ) {\r\n          data.setErrorBoxXAbove( jsonSerie.data.errors.xBoxAbove );\r\n        }\r\n        if ( jsonSerie.data.errors.xBoxBelow ) {\r\n          data.setErrorBoxXBelow( jsonSerie.data.errors.xBoxBelow );\r\n        }\r\n\r\n        if ( jsonSerie.data.errors.yBox ) {\r\n          data.setErrorBox( jsonSerie.data.errors.yBox );\r\n        }\r\n        if ( jsonSerie.data.errors.yBoxAbove ) {\r\n          data.setErrorBoxAbove( jsonSerie.data.errors.yBoxAbove );\r\n        }\r\n        if ( jsonSerie.data.errors.yBoxBelow ) {\r\n          data.setErrorBoxBelow( jsonSerie.data.errors.yBoxBelow );\r\n        }\r\n      }\r\n\r\n      const serie = graph.newSerie(\r\n        jsonSerie.name || `_serie_${index}`,\r\n        jsonSerie.options || {},\r\n        type,\r\n      );\r\n\r\n      switch ( jsonSerie.type ) {\r\n        case 'color':\r\n          if ( jsonSerie.data.color ) {\r\n            serie.setColors( jsonSerie.data.color );\r\n          }\r\n          break;\r\n        default:\r\n      }\r\n\r\n      serie.autoAxis();\r\n\r\n      if ( jsonSerie.excludeFromLegend ) {\r\n        serie.excludeFromLegend( true );\r\n      }\r\n\r\n      if ( data.xAxis && axes[ data.xAxis ] ) {\r\n        serie.setXAxis( axes[ data.xAxis ] );\r\n      }\r\n\r\n      if ( data.yAxis && axes[ data.yAxis ] ) {\r\n        serie.setYAxis( axes[ data.yAxis ] );\r\n      }\r\n\r\n      if ( data ) {\r\n        serie.setWaveform( data );\r\n      }\r\n\r\n      if ( jsonSerie.style ) {\r\n        serieStyle( Graph, serie, jsonSerie, type );\r\n      }\r\n\r\n      if ( jsonSerie.annotations ) {\r\n        jsonSerie.annotations.forEach( ( annotation ) => {\r\n          makeAnnotation( graph, annotation, serie, axes );\r\n        } );\r\n      }\r\n    } );\r\n  }\r\n\r\n  if ( json.annotations ) {\r\n    json.annotations.forEach( ( annotation ) => {\r\n      makeAnnotation( graph, annotation, undefined, axes );\r\n    } );\r\n  }\r\n};\r\n\r\nexport default makeGraph;","import graphFromJson from './main.js';\r\n\r\nexport default (Graph) => {\r\n  /**\r\n   * Returns a graph created from a schema\r\n   * @param {Object} json\r\n   * @param {HTMLElement} wrapper - The wrapping element\r\n   * @param {Function} callback - A callback function called when something has changed, in the form of ( event, params... ) {}\r\n   * @returns {Graph} Newly created graph\r\n   */\r\n  Graph.fromJSON = (json, wrapper, callback) => {\r\n    const options = json.options || {};\r\n    const graph = new Graph(undefined, options);\r\n\r\n    graphFromJson(Graph, graph, json, wrapper);\r\n    graph.setWrapper(wrapper);\r\n\r\n    if (callback) {\r\n      graph.onAll(function (eventName, ...args) {\r\n        callback(eventName, ...args);\r\n      });\r\n    }\r\n    return graph;\r\n  }\r\n\r\n  Graph.prototype.setJSON = (json, options = {}) => {\r\n\r\n    // Destroy the current elements\r\n    this.killSeries();\r\n\r\n    const state = {};\r\n    if (options.keepState) {\r\n\r\n      this._applyToAxes((axis) => {\r\n\r\n        if (axis.options.name) {\r\n\r\n          state[axis.options.name] = {\r\n            min: axis.getCurrentMin(),\r\n            max: axis.getCurrentMax()\r\n          };\r\n        }\r\n      }, undefined, true, true);\r\n    }\r\n\r\n    this._applyToAxes((axis) => {\r\n      this.killAxis(axis, true, true);\r\n    }, undefined, true, true);\r\n\r\n    this.killLegend();\r\n    this.killShapes();\r\n\r\n    graphFromJson(Graph, this, json);\r\n\r\n    if (options.keepState) {\r\n\r\n      this._applyToAxes((axis) => {\r\n\r\n        if (axis.options.name && state[axis.options.name]) {\r\n\r\n          axis.setCurrentMin(state[axis.options.name].min);\r\n          axis.setCurrentMax(state[axis.options.name].max);\r\n        }\r\n      }, undefined, true, true);\r\n    }\r\n\r\n    this.draw();\r\n  }\r\n};","const trigger = function (eventName, ...params) {\r\n\r\n  if (this.__eventHandlers?.[eventName]) {\r\n    this.__eventHandlers[eventName].forEach(handler => handler.apply(this, params));\r\n  }\r\n\r\n  const allHandlers = this.__eventHandlers?.__all;\r\n  if (allHandlers) {\r\n    allHandlers.forEach(handler => handler.apply(this, [eventName, ...params]));\r\n  }\r\n};\r\n\r\nconst EventMixin = {\r\n\r\n  on(eventName, handler) {\r\n\r\n    if (!this.__eventHandlers) {\r\n      this.__eventHandlers = {};\r\n    }\r\n\r\n    if (!this.__eventHandlers[eventName]) {\r\n      this.__eventHandlers[eventName] = [];\r\n    }\r\n\r\n    this.__eventHandlers[eventName].push(handler);\r\n    return this;\r\n  },\r\n\r\n  off(eventName, handler) {\r\n    let handlers = this.__eventHandlers?.[eventName];\r\n    if (!handlers) {\r\n      return;\r\n    }\r\n\r\n    if (!handler) {\r\n      handlers = []; // Reset the array and let the GC recycle all the handlers\r\n    } else {\r\n\r\n      for (let i = 0, l = handlers.length; i < l; i++) {\r\n        if (handlers[i] == handler) {\r\n          handlers.splice(i--, 1);\r\n        }\r\n      }\r\n    }\r\n    return this;\r\n  },\r\n\r\n  onAll(handler) {\r\n    return this.on('__all', handler);\r\n  },\r\n\r\n  ofAll(handler) {\r\n    return this.off('__all', handler);\r\n  },\r\n\r\n  trigger(...args) {\r\n    trigger.apply(this, args);\r\n    return this;\r\n  },\r\n\r\n  emit(eventName, ...params) {\r\n    return this.trigger(eventName, ...params);\r\n  }\r\n}\r\n\r\nexport {\r\n  trigger,\r\n  EventMixin\r\n};\r\n\r\nexport default (Obj) => {\r\n  Object.assign(Obj.prototype, EventMixin);\r\n};","var dataAggregator;\r\n\r\nif (\r\n  typeof URL === 'undefined' ||\r\n  typeof URL.createObjectURL === 'undefined' ||\r\n  typeof Blob === 'undefined' ||\r\n  typeof Worker === 'undefined'\r\n) {\r\n  dataAggregator = () => {};\r\n} else {\r\n  var aggregatorWorker;\r\n  var queue = {};\r\n\r\n  let string = function() {\r\n    onmessage = function( e ) {\r\n      const data = e.data.data, // The initial data\r\n        maxX = e.data.maxX,\r\n        minX = e.data.minX,\r\n        maxY = e.data.maxY,\r\n        minY = e.data.minY,\r\n        direction = e.data.direction;\r\n\r\n      let numPoints = e.data.numPoints; // Total number of points in the slot\r\n      let l = data.length; // Number of data in the original buffer\r\n      let i = 0;\r\n      let k = -4;\r\n      let slots = [];\r\n      let dataAggregatedX = [];\r\n      let dataAggregatedY = [];\r\n      let aggregationSum = [];\r\n      let getX;\r\n      let slotNumber;\r\n      let lastAggregationX;\r\n      let lastAggregation;\r\n      let lastAggregationSum;\r\n      let newAggregation;\r\n      let newAggregationX;\r\n\r\n      if ( e.data.xdata ) {\r\n        getX = function getX( index ) {\r\n          return e.data.xdata[ index ];\r\n        };\r\n      } else {\r\n        getX = function getX( index ) {\r\n          return index * e.data.xScale + e.data.xOffset;\r\n        };\r\n      }\r\n\r\n      let aggregations = {};\r\n\r\n      // Direction x\r\n      if ( direction == 'x' ) {\r\n        const dataPerSlot = numPoints / ( maxX - minX ); // Computed number of aggregation per slot\r\n\r\n        for ( ; i < l; i++ ) {\r\n          // dataPerSlot: 1 / 1000 ( compression by 1'000 )\r\n          //console.log( dataPerSlot, getX( i ) );\r\n          slotNumber = Math.floor( ( getX( i ) - minX ) * dataPerSlot );\r\n\r\n          if ( slots[ k ] !== slotNumber ) {\r\n            k += 4;\r\n            slots[ k ] = slotNumber;\r\n\r\n            let slotX = ( slotNumber + 0.5 ) / dataPerSlot + minX;\r\n\r\n            dataAggregatedX[ k ] = slotX;\r\n            dataAggregatedX[ k + 1 ] = slotX;\r\n            dataAggregatedX[ k + 2 ] = slotX;\r\n            dataAggregatedX[ k + 3 ] = slotX;\r\n\r\n            dataAggregatedY[ k ] = data[ i ];\r\n            dataAggregatedY[ k + 1 ] = data[ i ];\r\n            dataAggregatedY[ k + 2 ] = data[ i ];\r\n            dataAggregatedY[ k + 3 ] = data[ i ];\r\n            aggregationSum[ k ] = 0;\r\n          }\r\n\r\n          dataAggregatedY[ k + 1 ] = Math.min( data[ i ], dataAggregatedY[ k + 1 ] );\r\n          dataAggregatedY[ k + 2 ] = Math.max( data[ i ], dataAggregatedY[ k + 2 ] );\r\n          dataAggregatedY[ k + 3 ] = data[ i ];\r\n          aggregationSum[ k ] += data[ i ];\r\n        }\r\n      } else {\r\n        // y\r\n\r\n        const dataPerSlot = numPoints / ( maxY - minY ); // Computed number of aggregation per slot\r\n\r\n        for ( ; i < l; i++ ) {\r\n          // dataPerSlot: 1 / 1000 ( compression by 1'000 )\r\n          //console.log( dataPerSlot, getX( i ) );\r\n          slotNumber = Math.floor( ( data[ i ] - minY ) * dataPerSlot );\r\n\r\n          if ( slots[ k ] !== slotNumber ) {\r\n            k += 4;\r\n            slots[ k ] = slotNumber;\r\n\r\n            let slotY = ( slotNumber + 0.5 ) / dataPerSlot + minY;\r\n\r\n            dataAggregatedY[ k ] = slotY;\r\n            dataAggregatedY[ k + 1 ] = slotY;\r\n            dataAggregatedY[ k + 2 ] = slotY;\r\n            dataAggregatedY[ k + 3 ] = slotY;\r\n\r\n            dataAggregatedX[ k ] = data[ i ];\r\n            dataAggregatedX[ k + 1 ] = data[ i ];\r\n            dataAggregatedX[ k + 2 ] = data[ i ];\r\n            dataAggregatedX[ k + 3 ] = data[ i ];\r\n            aggregationSum[ k ] = 0;\r\n          }\r\n          dataAggregatedX[ k + 1 ] = Math.min( getX( i ), dataAggregatedX[ k + 1 ] );\r\n          dataAggregatedX[ k + 2 ] = Math.max( getX( i ), dataAggregatedX[ k + 2 ] );\r\n          dataAggregatedX[ k + 3 ] = getX( i );\r\n          aggregationSum[ k ] += getX( i );\r\n        }\r\n      }\r\n\r\n      aggregations[ numPoints ] = {\r\n        x: dataAggregatedX,\r\n        y: dataAggregatedY,\r\n        sums: aggregationSum\r\n      };\r\n\r\n      lastAggregation = dataAggregatedY;\r\n      lastAggregationX = dataAggregatedX;\r\n      lastAggregationSum = aggregationSum;\r\n\r\n      while ( numPoints > 256 ) {\r\n        numPoints /= 2;\r\n\r\n        newAggregation = [];\r\n        newAggregationX = [];\r\n\r\n        k = 0;\r\n\r\n        if ( direction == 'x' ) {\r\n          for ( i = 0, l = lastAggregation.length - 8; i < l; i += 8 ) {\r\n            newAggregationX[ k ] =\r\n              ( lastAggregationX[ i ] + lastAggregationX[ i + 4 ] ) / 2;\r\n            newAggregationX[ k + 1 ] = newAggregationX[ k ];\r\n            newAggregationX[ k + 2 ] = newAggregationX[ k ];\r\n            newAggregationX[ k + 3 ] = newAggregationX[ k ];\r\n\r\n            newAggregation[ k ] = lastAggregation[ i ];\r\n            newAggregation[ k + 1 ] = Math.min(\r\n              lastAggregation[ i + 1 ],\r\n              lastAggregation[ i + 5 ]\r\n            );\r\n            newAggregation[ k + 2 ] = Math.max(\r\n              lastAggregation[ i + 2 ],\r\n              lastAggregation[ i + 6 ]\r\n            );\r\n            newAggregation[ k + 3 ] = lastAggregation[ i + 7 ];\r\n\r\n            aggregationSum[ k ] =\r\n              ( lastAggregationSum[ i ] + lastAggregationSum[ i + 4 ] ) / 2;\r\n\r\n            k += 4;\r\n          }\r\n        } else {\r\n          for ( i = 0, l = lastAggregation.length - 8; i < l; i += 8 ) {\r\n            newAggregation[ k ] =\r\n              ( lastAggregation[ i ] + lastAggregation[ i + 4 ] ) / 2;\r\n            newAggregation[ k + 1 ] = newAggregation[ k ];\r\n            newAggregation[ k + 2 ] = newAggregation[ k ];\r\n            newAggregation[ k + 3 ] = newAggregation[ k ];\r\n\r\n            newAggregationX[ k ] = lastAggregationX[ i ];\r\n            newAggregationX[ k + 1 ] = Math.min(\r\n              lastAggregationX[ i + 1 ],\r\n              lastAggregationX[ i + 5 ]\r\n            );\r\n            newAggregationX[ k + 2 ] = Math.max(\r\n              lastAggregationX[ i + 2 ],\r\n              lastAggregationX[ i + 6 ]\r\n            );\r\n            newAggregationX[ k + 3 ] = lastAggregationX[ i + 7 ];\r\n\r\n            aggregationSum[ k ] =\r\n              ( lastAggregationSum[ i ] + lastAggregationSum[ i + 4 ] ) / 2;\r\n\r\n            k += 4;\r\n          }\r\n        }\r\n\r\n        aggregations[ numPoints ] = {\r\n          x: newAggregationX,\r\n          y: newAggregation,\r\n          sums: aggregationSum\r\n        };\r\n\r\n        lastAggregation = newAggregation;\r\n        lastAggregationX = newAggregationX;\r\n        lastAggregationSum = aggregationSum;\r\n\r\n        aggregationSum = [];\r\n      }\r\n\r\n      postMessage( {\r\n        aggregates: aggregations,\r\n        _queueId: e.data._queueId\r\n      } );\r\n    };\r\n  }.toString();\r\n\r\n  string = string.replace( /^\\s*function\\s*\\(\\s*\\)\\s*\\{/, '' );\r\n  string = string.replace( /}\\s*$/, '' );\r\n  /*\r\n  if ( typeof URL == \"undefined\" ) {\r\n    module.exports = function() {};\r\n\r\n  } else {\r\n  */\r\n\r\n  var workerUrl = URL.createObjectURL(\r\n    new Blob( [ string ], {\r\n      type: 'application/javascript'\r\n    } )\r\n  );\r\n\r\n  aggregatorWorker = new Worker( workerUrl );\r\n\r\n  aggregatorWorker.onmessage = function( e ) {\r\n    var id = e.data._queueId;\r\n    delete e.data._queueId;\r\n    queue[ id ]( e.data );\r\n    delete queue[ id ];\r\n  };\r\n\r\n  dataAggregator = function( toOptimize ) {\r\n    var requestId = Date.now();\r\n    toOptimize._queueId = requestId;\r\n\r\n    var prom = new Promise( ( resolver ) => {\r\n      queue[ requestId ] = resolver;\r\n    } );\r\n\r\n    aggregatorWorker.postMessage( toOptimize );\r\n    return prom;\r\n  };\r\n}\r\n\r\nexport default dataAggregator;","class FitHost {\r\n  constructor( options ) {\r\n    this.DELTAP = 1e-6;\r\n    this.BIGVAL = 9e99;\r\n    this.WEIGHT = 1.0;\r\n\r\n    this.setYData( options.dataY );\r\n    this.setXData( options.dataX );\r\n    this.setWeight( options.weight );\r\n    this.setInitialParams( options.params );\r\n\r\n    if ( options.subsetIndex ) {\r\n      this.setSubset( ...options.subsetIndex );\r\n    }\r\n\r\n    this.setFunction( options.function );\r\n\r\n    if ( options.progress ) {\r\n      this.hookIteration( options.progress );\r\n    }\r\n\r\n    this.options = options;\r\n  }\r\n\r\n  //[ [ x1, y1 ], [ x2, y2 ] ]\r\n  setYData( data ) {\r\n    // Waveform instance\r\n    this.data = data;\r\n  }\r\n\r\n  setXData( data ) {\r\n    // Waveform instance\r\n    this.dataX = data;\r\n  }\r\n\r\n  setWeight( weight ) {\r\n    // Waveform instance\r\n    this.weight = weight;\r\n  }\r\n\r\n  setInitialParams( params ) {\r\n    this.parms = params;\r\n\r\n    this.parms = this.parms.map( ( el ) => {\r\n      if ( typeof el == 'function' ) {\r\n        return el( this.data, this.dataX );\r\n      } else {\r\n        return el;\r\n      }\r\n    } );\r\n    this.NPARMS = params.length;\r\n  }\r\n\r\n  setSubset( fromIndex, toIndex ) {\r\n    if ( fromIndex !== undefined && toIndex !== undefined ) {\r\n      this._from = fromIndex;\r\n      this._to = toIndex;\r\n    }\r\n  }\r\n\r\n  hookIteration( f ) {\r\n    this._hookIteration = ( params ) => {\r\n      let data = this.buildFit( params, 200 );\r\n      f( data );\r\n    };\r\n  }\r\n\r\n  setFunction( func ) {\r\n    this._func = func;\r\n  }\r\n\r\n  init() {\r\n    // Get data length\r\n    if ( this._from !== undefined && this._to !== undefined ) {\r\n      if ( this._from >= this._to ) {\r\n        throw 'Impossible to fit negative subranges. The starting index must be lower than the ending index';\r\n      }\r\n\r\n      this.NPTS = this._to - this._from + 1;\r\n\r\n      if ( this.data && this.data.getLength() <= this._to ) {\r\n        throw `Wave Y has not enough point to be fitted to subrange [${this._from\r\n        }, ${this._to}]`;\r\n      }\r\n\r\n      if ( this._from < 0 ) {\r\n        throw 'Impossible to fit a subrange with negative indices';\r\n      }\r\n    } else {\r\n      this.NPTS = this.data.getLength();\r\n      this._from = 0;\r\n      this._to = this.data.getLength() - 1;\r\n    }\r\n\r\n    if ( this.dataX && this.dataX.getLength() <= this._to ) {\r\n      throw `Wave X has not enough point to be fitted to subrange [${this._from\r\n      }, ${this._to}]`;\r\n    }\r\n\r\n    this.arrY = this.data.getDataY();\r\n\r\n    if ( this.dataX ) {\r\n      this.arrX = this.dataX.getDataY();\r\n    } else {\r\n      this.arrX = this.data.getDataX();\r\n    }\r\n\r\n    this.resid = new Array( this.NPTS ).fill( 0 );\r\n    this.jac = new Array( this.NPTS ).fill( 0 );\r\n    this.jac = this.jac.map( ( el ) => new Array( this.NPARMS ) );\r\n  }\r\n\r\n  fit() {\r\n    this.log(\r\n      `Starting the fit with initial parameter list {${this.parms.join()}};`\r\n    );\r\n    new LM( this, this.NPARMS, this.NPTS, this._hookIteration );\r\n    this.log( `Fit successful. Output parameters {${this.parms.join()}};` );\r\n\r\n    this._result = this.buildFit( this.parms, 200 );\r\n\r\n    if ( this.options.done ) {\r\n      this.options.done( this.parms, this._result );\r\n    }\r\n\r\n    return this._result;\r\n  }\r\n\r\n  func( x, param ) {\r\n    return this._func( x, param );\r\n  }\r\n\r\n  computeResiduals() {\r\n    var sumsq = 0;\r\n    for ( var i = 0; i < this.NPTS; i++ ) {\r\n      this.resid[ i ] =\r\n        ( this.func( this.arrX[ i + this._from ], this.parms ) -\r\n          this.arrY[ i + this._from ] ) *\r\n        this.WEIGHT;\r\n      sumsq += this.resid[ i ] * this.resid[ i ];\r\n    }\r\n\r\n    return sumsq;\r\n  }\r\n\r\n  log( message ) {\r\n    if ( this.options.log ) {\r\n      console.log( message );\r\n    }\r\n  }\r\n\r\n  //------the four mandated interface methods------------\r\n  nudge( dp ) {\r\n    for ( var j = 0; j < this.NPARMS; j++ ) {\r\n      this.parms[ j ] += dp[ j ];\r\n    }\r\n    return this.computeResiduals();\r\n  }\r\n\r\n  buildJacobian() {\r\n    // Allows LM to compute a new Jacobian.\r\n    // Uses current parms[] and two-sided finite difference.\r\n    // If current parms[] is bad, returns false.\r\n    var delta = new Array( this.NPARMS );\r\n    var FACTOR = 0.5 / this.DELTAP;\r\n    var d = 0;\r\n\r\n    for ( var j = 0; j < this.NPARMS; j++ ) {\r\n      for ( var k = 0; k < this.NPARMS; k++ )\r\n        delta[ k ] = k == j ? this.DELTAP : 0.0;\r\n\r\n      d = this.nudge( delta ); // resid at pplus\r\n      if ( d == this.BIGVAL ) {\r\n        throw 'Bad dBuildJacobian() exit 2';\r\n      }\r\n\r\n      for ( var i = 0; i < this.NPTS; i++ ) {\r\n        this.jac[ i ][ j ] = this.getResidualElement( i );\r\n      }\r\n\r\n      for ( var k = 0; k < this.NPARMS; k++ ) {\r\n        delta[ k ] = k == j ? -2 * this.DELTAP : 0.0;\r\n      }\r\n\r\n      d = this.nudge( delta ); // resid at pminus\r\n      if ( d == this.BIGVAL ) {\r\n        throw 'Bad dBuildJacobian(). exit 3';\r\n      }\r\n\r\n      for ( var i = 0; i < this.NPTS; i++ )\r\n        this.jac[ i ][ j ] -= this.getResidualElement( i ); // fetches resid[]\r\n\r\n      for ( var i = 0; i < this.NPTS; i++ ) this.jac[ i ][ j ] *= FACTOR;\r\n\r\n      for ( var k = 0; k < this.NPARMS; k++ )\r\n        delta[ k ] = k == j ? this.DELTAP : 0.0;\r\n\r\n      d = this.nudge( delta );\r\n      if ( d == this.BIGVAL ) {\r\n        throw 'Bad dBuildJacobian(). exit 4';\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getResidualElement( i ) {\r\n    // Allows LM to see one element of the resid[] vector.\r\n    return this.resid[ i ];\r\n  }\r\n\r\n  getJacobianElement( i, j ) {\r\n    // Allows LM to see one element of the Jacobian matrix.\r\n    return this.jac[ i ][ j ];\r\n  }\r\n\r\n  buildFit( parms, length ) {\r\n    let x;\r\n\r\n    if ( !length ) {\r\n      x = this.arrX;\r\n    } else {\r\n      const xmin = this.dataX.getMin( this._from, this._to );\r\n      const xmax = this.dataX.getMax( this._from, this._to );\r\n\r\n      x = new Array( length )\r\n        .fill( 0 )\r\n        .map( ( el, index ) => ( index * ( xmax - xmin ) ) / ( length - 1 ) + xmin );\r\n    }\r\n\r\n    var fit = new Array( x.length );\r\n    for ( var i = 0, l = x.length; i < l; i++ ) {\r\n      fit[ i ] = this.func( x[ i ], this.parms );\r\n    }\r\n\r\n    let waveformResult = this.options.waveform;\r\n    waveformResult.setData( fit, x );\r\n    //waveformResult.setXWaveform( x );\r\n\r\n    return waveformResult;\r\n  }\r\n}\r\n\r\nclass LM {\r\n  constructor( gH, gnadj, gnpnts, hook ) {\r\n    this.LMITER = 100; // max number of L-M iterations\r\n    this.LMBOOST = 2.0; // damping increase per failed step\r\n    this.LMSHRINK = 0.1; // damping decrease per successful step\r\n    this.LAMBDAZERO = 0.001; // initial damping\r\n    this.LAMBDAMAX = 1e9; // max damping\r\n    this.LMTOL = 1e-12; // exit tolerance\r\n    this.BIGVAL = 9e99; // trouble flag\r\n\r\n    this.sos;\r\n    this.sosprev;\r\n    this.lambda;\r\n\r\n    this.myH = null; // overwritten by constructor\r\n    this.nadj = 0; // overwritten by constructor\r\n    this.npts = 0; // overwritten by constructor\r\n\r\n    this.delta; // local parm change\r\n    this.beta;\r\n    this.alpha;\r\n    this.amatrix;\r\n\r\n    // Constructor sets up fields and drives iterations.\r\n    this.myH = gH;\r\n    this.nadj = gnadj;\r\n    this.npts = gnpnts;\r\n\r\n    this.delta = new Array( this.nadj ).fill( 0 );\r\n    this.beta = new Array( this.nadj ).fill( 0 );\r\n\r\n    this.alpha = new Array( this.nadj ).fill( 0 );\r\n    this.amatrix = new Array( this.nadj ).fill( 0 );\r\n\r\n    this.alpha = this.alpha.map( () => new Array( this.nadj ) );\r\n    this.amatrix = this.amatrix.map( () => new Array( this.nadj ) );\r\n\r\n    this.lambda = this.LAMBDAZERO;\r\n\r\n    var niter = 0;\r\n    var done = false;\r\n    do {\r\n      done = this.bLMiter();\r\n\r\n      if ( hook ) {\r\n        hook( this.myH.params );\r\n      }\r\n\r\n      niter++;\r\n    } while ( !done && niter < this.LMITER );\r\n  }\r\n\r\n  bLMiter() {\r\n    // Each call performs one LM iteration.\r\n    // Returns true if done with iterations; false=wants more.\r\n    // Global nadj, npts; needs nadj, myH to be preset.\r\n    // Ref: M.Lampton, Computers in Physics v.11 pp.110-115 1997.\r\n    for ( var k = 0; k < this.nadj; k++ ) this.delta[ k ] = 0.0;\r\n    this.sos = this.myH.nudge( this.delta );\r\n    if ( this.sos == this.BIGVAL ) {\r\n      console.error( '  bLMiter finds faulty initial nudge()' );\r\n      return false;\r\n    }\r\n    this.sosprev = this.sos;\r\n\r\n    this.myH.log( `  bLMiter..SumOfSquares= ${this.sos}` );\r\n    if ( !this.myH.buildJacobian() ) {\r\n      console.error( '  bLMiter finds buildJacobian()=false' );\r\n      return false;\r\n    }\r\n\r\n    for (\r\n      var k = 0; k < this.nadj; k++ // get downhill gradient beta\r\n    ) {\r\n      this.beta[ k ] = 0.0;\r\n      for ( var i = 0; i < this.npts; i++ ) {\r\n        this.beta[ k ] -=\r\n          this.myH.getResidualElement( i ) * this.myH.getJacobianElement( i, k );\r\n      }\r\n    }\r\n\r\n    for (\r\n      var k = 0; k < this.nadj; k++ // get curvature matrix alpha\r\n    )\r\n      for ( var j = 0; j < this.nadj; j++ ) {\r\n        this.alpha[ j ][ k ] = 0.0;\r\n        for ( var i = 0; i < this.npts; i++ ) {\r\n          this.alpha[ j ][ k ] +=\r\n            this.myH.getJacobianElement( i, j ) *\r\n            this.myH.getJacobianElement( i, k );\r\n        }\r\n      }\r\n    var rrise = 0;\r\n    do // inner damping loop searches for one downhill step\r\n    {\r\n      for ( var k = 0; k < this.nadj; k++ ) {\r\n        // copy and damp it\r\n        for ( var j = 0; j < this.nadj; j++ ) {\r\n          this.amatrix[ j ][ k ] = this.alpha[ j ][ k ] + ( j == k ? this.lambda : 0.0 );\r\n        }\r\n      }\r\n\r\n      this.gaussj( this.amatrix, this.nadj ); // invert\r\n\r\n      for (\r\n        var k = 0; k < this.nadj; k++ // compute delta[]\r\n      ) {\r\n        this.delta[ k ] = 0.0;\r\n        for ( var j = 0; j < this.nadj; j++ )\r\n          this.delta[ k ] += this.amatrix[ j ][ k ] * this.beta[ j ];\r\n      }\r\n      this.sos = this.myH.nudge( this.delta ); // try it out.\r\n      if ( this.sos == this.BIGVAL ) {\r\n        console.error( '  LMinner failed SOS step' );\r\n        return false;\r\n      }\r\n      rrise = ( this.sos - this.sosprev ) / ( 1 + this.sos );\r\n      if ( rrise <= 0.0 ) {\r\n        // good step!\r\n        this.lambda *= this.LMSHRINK; // shrink lambda\r\n        break; // leave lmInner.\r\n      }\r\n      for ( var q = 0; q < this.nadj; q++ ) {\r\n        // reverse course!\r\n        this.delta[ q ] *= -1.0;\r\n      }\r\n      this.myH.nudge( this.delta ); // sosprev should still be OK\r\n      if ( rrise < this.LMTOL ) {\r\n        // finished but keep prev parms\r\n        break; // leave inner loop\r\n      }\r\n      this.lambda *= this.LMBOOST; // else try more damping.\r\n    } while ( this.lambda < this.LAMBDAMAX );\r\n    return rrise > -this.LMTOL || this.lambda > this.LAMBDAMAX;\r\n  }\r\n\r\n  gaussj( a, N ) {\r\n    // Inverts the double array a[N][N] by Gauss-Jordan method\r\n    // M.Lampton UCB SSL (c)2003, 2005\r\n\r\n    var det = 1.0,\r\n      big,\r\n      save;\r\n    var i, j, k, L;\r\n    var ik = new Array( 100 );\r\n    var jk = new Array( 100 );\r\n\r\n    for ( k = 0; k < N; k++ ) {\r\n      big = 0.0;\r\n      for ( i = k; i < N; i++ )\r\n        for (\r\n          j = k; j < N; j++ // find biggest element\r\n        )\r\n          if ( Math.abs( big ) <= Math.abs( a[ i ][ j ] ) ) {\r\n            big = a[ i ][ j ];\r\n            ik[ k ] = i;\r\n            jk[ k ] = j;\r\n          }\r\n      if ( big == 0.0 ) return 0.0;\r\n      i = ik[ k ];\r\n      if ( i > k )\r\n        for (\r\n          j = 0; j < N; j++ // exchange rows\r\n        ) {\r\n          save = a[ k ][ j ];\r\n          a[ k ][ j ] = a[ i ][ j ];\r\n          a[ i ][ j ] = -save;\r\n        }\r\n      j = jk[ k ];\r\n      if ( j > k )\r\n        for ( i = 0; i < N; i++ ) {\r\n          save = a[ i ][ k ];\r\n          a[ i ][ k ] = a[ i ][ j ];\r\n          a[ i ][ j ] = -save;\r\n        }\r\n      for (\r\n        i = 0; i < N; i++ // build the inverse\r\n      )\r\n        if ( i != k ) a[ i ][ k ] = -a[ i ][ k ] / big;\r\n      for ( i = 0; i < N; i++ )\r\n        for ( j = 0; j < N; j++ )\r\n          if ( i != k && j != k ) a[ i ][ j ] += a[ i ][ k ] * a[ k ][ j ];\r\n      for ( j = 0; j < N; j++ )\r\n        if ( j != k ) a[ k ][ j ] /= big;\r\n      a[ k ][ k ] = 1.0 / big;\r\n      det *= big; // bomb point\r\n    } // end k loop\r\n    for ( L = 0; L < N; L++ ) {\r\n      k = N - L - 1;\r\n      j = ik[ k ];\r\n      if ( j > k )\r\n        for ( i = 0; i < N; i++ ) {\r\n          save = a[ i ][ k ];\r\n          a[ i ][ k ] = -a[ i ][ j ];\r\n          a[ i ][ j ] = save;\r\n        }\r\n      i = jk[ k ];\r\n      if ( i > k )\r\n        for ( j = 0; j < N; j++ ) {\r\n          save = a[ k ][ j ];\r\n          a[ k ][ j ] = -a[ i ][ j ];\r\n          a[ i ][ j ] = save;\r\n        }\r\n    }\r\n    return det;\r\n  }\r\n}\r\n\r\nexport default FitHost;\r\n//module.export = FitHost","import * as util from '../graph.util.js';\r\n\r\nimport aggregator from './data_aggregator.js';\r\nimport FitLM from './fit_lm.js';\r\n\r\nclass Waveform {\r\n  constructor(data = [], xOffset = 0, xScale = 1) {\r\n    this.xOffset = xOffset;\r\n    this.xScale = xScale;\r\n\r\n    // Error bar handling\r\n    this.errors = {\r\n      nb: 0,\r\n\r\n      bars: {\r\n        above: null,\r\n        below: null\r\n      },\r\n\r\n      boxes: {\r\n        above: null,\r\n        below: null\r\n      }\r\n    };\r\n\r\n    this.BELOW = Waveform.BELOW;\r\n    this.ABOVE = Waveform.ABOVE;\r\n    this.BOX = Waveform.BOX;\r\n    this.BAR = Waveform.BAR;\r\n\r\n    this.setData(data);\r\n  }\r\n\r\n  /** [ [ x1, y1 ], [ x2, y2 ] ] */\r\n\r\n  /*\r\n  setDataXY( data ) {\r\n\r\n    let newData = [ this._makeArray( data.length ), this._makeArray( data.length ) ],\r\n      warnNaN = false;\r\n    const nanable = this.isNaNAllowed();\r\n\r\n    data.map( ( el, index ) => {\r\n\r\n      if ( !nanable && ( el[ 0 ] !== el[ 0 ] || el[ 1 ] !== el[ 1 ] ) ) {\r\n        warnNaN = true;\r\n      }\r\n\r\n      newData[ 0 ][ index ] = el[ 0 ];\r\n      newData[ 1 ][ index ] = el[ 1 ];\r\n    } );\r\n\r\n    if ( warnNaN ) {\r\n      this.warn( \"Trying to assign NaN values to a typed array that does not support NaNs. 0's will be used instead\" );\r\n    }\r\n\r\n    this._setData( ...newData );\r\n    return this;\r\n  }\r\n*/\r\n  setData(data, dataX = null) {\r\n    this._originalData = data;\r\n    this._originalDataX = dataX;\r\n\r\n    this.xdata = null;\r\n\r\n    this.mutated();\r\n    return this;\r\n  }\r\n\r\n  mutated() {\r\n\r\n    /* First, we must treat the case of the array of array for backward compatibility */\r\n    let data;\r\n    if (Array.isArray(this._originalData[0])) {\r\n      let x = [];\r\n      let y = [];\r\n      this._originalData.forEach((el) => {\r\n        x.push(el[0]);\r\n        y.push(el[1]);\r\n      });\r\n      // This case has no mutation for the x variable, it's a brand new object\r\n      this.setXWaveform(x);\r\n      data = y;\r\n    } else {\r\n      data = this._originalData;\r\n    }\r\n    // Using typed array, we need to make a copy of the data\r\n    const nanable = this.isNaNAllowed();\r\n    let warnNaN = false;\r\n    let newData;\r\n\r\n    // Using typed arrays ?\r\n    if (this.getTypedArrayClass()) {\r\n      // Create the typed array\r\n      newData = this._makeArray(data.length);\r\n\r\n      data.forEach((el, index) => {\r\n        if (!nanable && (el[0] !== el[0] || el[1] !== el[1])) {\r\n          warnNaN = true;\r\n        }\r\n        // Copy all the data in it\r\n        newData[index] = el;\r\n      });\r\n\r\n      if (warnNaN) {\r\n        this.warn(\r\n          \"Trying to assign NaN values to a typed array that does not support NaNs. 0's will be used instead\"\r\n        );\r\n      }\r\n    } else {\r\n\r\n      if (!nanable) {\r\n        data.forEach((el, index) => {\r\n          if (!nanable && (el[0] !== el[0] || el[1] !== el[1])) {\r\n            warnNaN = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      newData = data;\r\n    }\r\n\r\n    if (this._originalDataX) {\r\n      if (this.xdata) {\r\n        this.xdata.mutated();\r\n      } else {\r\n        this.setXWaveform(this._originalDataX);\r\n      }\r\n    }\r\n\r\n    this._setData(newData);\r\n    return this;\r\n  }\r\n\r\n  getY(index, optimized) {\r\n    if (optimized && this.dataInUse) {\r\n      return this.dataInUse.y[index] * this.getScale() + this.getShift();\r\n    }\r\n\r\n    return this.data[index] * this.getScale() + this.getShift();\r\n  }\r\n\r\n  /*\r\n    flipXY() {\r\n      let temp;\r\n      temp = this.data.x;\r\n      this.data.x = this.data.y;\r\n      this.data.y = temp;\r\n\r\n      this._setData( this.data.x, this.data.y );\r\n    }*/\r\n\r\n  setXWaveform(waveform) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      if (Array.isArray(waveform)) {\r\n        waveform = new Waveform(waveform);\r\n      } else {\r\n        throw 'Cannot set X waveform. Data is not a valid array.';\r\n      }\r\n    }\r\n\r\n    this.xdata = waveform;\r\n\r\n    this.computeXMinMax();\r\n    return this;\r\n  }\r\n\r\n  hasXWaveform() {\r\n    return !!this.xdata;\r\n  }\r\n\r\n  getXWaveform() {\r\n    if (this.xdata) {\r\n      return this.xdata;\r\n    }\r\n\r\n    var wave = new Waveform();\r\n    for (var i = 0; i < this.getLength(); i += 1) {\r\n      wave.append(this.getX(i));\r\n    }\r\n    return wave;\r\n  }\r\n\r\n  rescaleX(offset, scale) {\r\n    this.xScale = scale;\r\n    this.xOffset = offset;\r\n    this.computeXMinMax();\r\n    return this;\r\n  }\r\n\r\n  getTypedArrayClass() {\r\n    return this._typedArrayClass || false;\r\n  }\r\n\r\n  setTypedArrayClass(constructor) {\r\n    if (\r\n      this.getTypedArrayClass() &&\r\n      this.isNaNAllowed() &&\r\n      !this.isNaNAllowed(constructor)\r\n    ) {\r\n      this.warn(\r\n        `NaN values are not allowed by the new constructor (${constructor.name\r\n        }) while it was allowed by the previous one (${this._typedArrayClass.name\r\n        })`\r\n      );\r\n    }\r\n\r\n    if (\r\n      this.getTypedArrayClass() &&\r\n      this.isUnsigned() &&\r\n      !this.isUnsigned(constructor)\r\n    ) {\r\n      this.warn(\r\n        'You are switching from signed values to unsigned values. You may experience data corruption if there were some negative values.'\r\n      );\r\n    }\r\n\r\n    this._typedArrayClass = constructor;\r\n\r\n    if (this.data) {\r\n      this._setData(constructor.from(this.data));\r\n    }\r\n\r\n    if (this.hasXWaveform()) {\r\n      this.getXWaveform().setTypedArrayClass(constructor);\r\n    }\r\n  }\r\n\r\n  isNaNAllowed(constructor = this._typedArrayClass) {\r\n    // The following types accept NaNs\r\n    return (\r\n      constructor == Array ||\r\n      constructor == Float32Array ||\r\n      constructor == Float64Array\r\n    );\r\n  }\r\n\r\n  isUnsigned(constructor = this._typedArrayClass) {\r\n    // The following types accept NaNs\r\n    return (\r\n      constructor == Uint8Array ||\r\n      constructor == Uint8ClampedArray ||\r\n      constructor == Uint16Array ||\r\n      constructor == Uint32Array\r\n    );\r\n  }\r\n\r\n  recalculateMinMaxNewPoint(x, y) {\r\n    if (x < this.minX || this.minX === undefined) {\r\n      this.minX = x;\r\n    }\r\n\r\n    if (x > this.maxX || this.maxX === undefined) {\r\n      this.maxX = x;\r\n    }\r\n\r\n    if (y < this.minY || this.minY === undefined) {\r\n      this.minY = y;\r\n    }\r\n\r\n    if (y > this.maxY || this.maxY === undefined) {\r\n      this.maxY = y;\r\n    }\r\n  }\r\n\r\n  prepend(x, y) {\r\n    if (typeof x == 'function') {\r\n      x = x(this);\r\n    }\r\n\r\n    if (typeof y == 'function') {\r\n      y = y(this);\r\n    }\r\n\r\n    if (this.xdata) {\r\n      this.xdata.prepend(null, x);\r\n    } else if (x !== null) {\r\n      this.xdata = this.getXWaveform();\r\n      this.xdata.prepend(null, x);\r\n    } else {\r\n      this.xOffset -= this.xScale;\r\n    }\r\n\r\n    this.data.unshift(y);\r\n    this.recalculateMinMaxNewPoint(x, y);\r\n    return this;\r\n  }\r\n\r\n  append(x, y) {\r\n    if (typeof x == 'function') {\r\n      x = x(this);\r\n    }\r\n\r\n    if (typeof y == 'function') {\r\n      y = y(this);\r\n    }\r\n\r\n    if (this.xdata) {\r\n      this.xdata.append(null, x);\r\n    } else if (x !== null) {\r\n      this.xdata = this.getXWaveform();\r\n      this.xdata.append(null, x);\r\n    }\r\n\r\n    if (this.monotoneous) {\r\n      if (\r\n        y > this.data[this.data.y] &&\r\n        this.getMonotoneousAscending() === false\r\n      ) {\r\n        this.monotoneous = false;\r\n      } else if (\r\n        y < this.data[this.data.y] &&\r\n        this.getMonotoneousAscending() === true\r\n      ) {\r\n        this.monotoneous = false;\r\n      }\r\n    }\r\n\r\n    if (this.data.length == 1 || this._monotoneousAscending === undefined) {\r\n      this.monotoneous = true;\r\n\r\n      if (y == this.data[0]) {\r\n        this._monotoneousAscending = undefined;\r\n      } else {\r\n        this._monotoneousAscending = y > this.data[0];\r\n      }\r\n    }\r\n\r\n    this.data.push(y);\r\n    this.recalculateMinMaxNewPoint(x, y);\r\n\r\n    return this;\r\n  }\r\n\r\n  concat(wave2) {\r\n    if (!this.xdata) {\r\n      this.xdata = this.getXWaveform();\r\n    }\r\n\r\n    if (!wave2.xdata) {\r\n      wave2.xdata = wave2.getXWaveform();\r\n    }\r\n\r\n    this.data = this.data.concat(wave2.data);\r\n    this.xdata.data = this.xdata.data.concat(wave2.xdata.data);\r\n\r\n    this.checkMonotonicity();\r\n    this.xdata.checkMonotonicity();\r\n\r\n    this.computeXMinMax();\r\n\r\n    return this;\r\n  }\r\n\r\n  _makeArray(length) {\r\n    const constructor = this.getTypedArrayClass();\r\n    if (constructor) {\r\n      return new constructor(length);\r\n    }\r\n    return new Array(length);\r\n  }\r\n\r\n  _setData(dataY) {\r\n    const l = dataY.length;\r\n    let i = 1,\r\n      monoDir = dataY[1] > dataY[0],\r\n      minY = dataY[0],\r\n      maxY = dataY[0];\r\n\r\n    if (isNaN(minY)) {\r\n      minY = Number.MAX_VALUE;\r\n    }\r\n\r\n    if (isNaN(maxY)) {\r\n      maxY = -Number.MAX_VALUE;\r\n    }\r\n\r\n    this._monotoneous = true;\r\n\r\n    for (; i < l; i++) {\r\n      if (dataY[i] !== dataY[i - 1] && monoDir !== dataY[i] > dataY[i - 1]) {\r\n        this._monotoneous = false;\r\n      }\r\n\r\n      if (dataY[i] === dataY[i]) {\r\n        // NaN support\r\n        minY = Math.min(dataY[i], minY);\r\n        maxY = Math.max(dataY[i], maxY);\r\n      }\r\n    }\r\n    if (this._monotoneous) {\r\n      this._monotoneousAscending = dataY[1] > dataY[0];\r\n    }\r\n\r\n    this.data = dataY;\r\n\r\n    this.minY = minY;\r\n    this.maxY = maxY;\r\n    this.checkMinMaxErrorBars();\r\n    this.computeXMinMax();\r\n  }\r\n\r\n  checkMinMaxErrorBars() {\r\n    let minY = this.minY,\r\n      maxY = this.maxY,\r\n      i = 0,\r\n      l = this.getLength();\r\n\r\n    if (this.hasErrorBars()) {\r\n      // If prefer to loop again here\r\n\r\n      for (i = 0; i < l; i++) {\r\n        if (this.data[i] === this.data[i]) {\r\n          // NaN support\r\n\r\n          minY = Math.min(minY, this.data[i] - this.getMaxError(i, 'below'));\r\n          maxY = Math.max(maxY, this.data[i] + this.getMaxError(i, 'above'));\r\n        }\r\n      }\r\n\r\n      this.minY = minY;\r\n      this.maxY = maxY;\r\n    } else {\r\n      this.minY = minY;\r\n      this.maxY = maxY;\r\n    }\r\n  }\r\n\r\n  computeXMinMax() {\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    if (this.xdata) {\r\n      this.minX = this.xdata.getMin();\r\n      this.maxX = this.xdata.getMax();\r\n    } else {\r\n      const b1 = this.xOffset + this.xScale * this.getLength(),\r\n        b2 = this.xOffset;\r\n\r\n      this.minX = Math.min(b1, b2);\r\n      this.maxX = Math.max(b1, b2);\r\n    }\r\n  }\r\n\r\n  getDataInUse() {\r\n    return this.dataInUse || this.data;\r\n  }\r\n\r\n  getIndexFromVal(val, useDataToUse = false, roundingMethod = Math.round) {\r\n    let data;\r\n\r\n    if (useDataToUse && this.dataInUse) {\r\n      data = this.dataInUse.y;\r\n    } else {\r\n      data = this.data;\r\n    }\r\n\r\n    let position;\r\n\r\n    position = this.getIndexFromMonotoneousData(\r\n      val,\r\n      data,\r\n      this.data.getMonotoneousAscending(),\r\n      roundingMethod\r\n    );\r\n\r\n    if (useDataToUse && this.dataInUse && this.dataInUseType == 'aggregateY') {\r\n      // In case of aggregation, round to the closest element of 4.\r\n      return position - (position % 4);\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  getIndexFromX(xval, useDataToUse = false, roundingMethod = Math.round) {\r\n    let xdata;\r\n\r\n    let data, position;\r\n\r\n    xval -= this.getXShift();\r\n    xval /= this.getXScale();\r\n\r\n    if (xval < this.getDataMinX()) {\r\n      return false;\r\n    }\r\n\r\n    if (xval > this.getDataMaxX()) {\r\n      return false;\r\n    }\r\n\r\n    if (useDataToUse && this.dataInUse) {\r\n      xdata = this.dataInUse.x;\r\n    } else if (this.xdata) {\r\n      xdata = this.xdata.getData();\r\n    }\r\n\r\n    if (this.hasXWaveform()) {\r\n\r\n      if (this.isXMonotoneous()) {\r\n        position = this.xdata.getIndexFromMonotoneousData(\r\n          xval,\r\n          xdata,\r\n          this.xdata.getMonotoneousAscending(),\r\n          roundingMethod\r\n        );\r\n      } else {\r\n        position = euclidianSearch(xval, undefined, xdata, undefined, 1, undefined);\r\n\r\n      }\r\n    } else {\r\n      position = Math.max(\r\n        0,\r\n        Math.min(\r\n          this.getLength() - 1,\r\n          roundingMethod((xval - this.xOffset) / this.xScale)\r\n        )\r\n      );\r\n    }\r\n\r\n    if (useDataToUse && this.dataInUse && this.dataInUseType == 'aggregateX') {\r\n      // In case of aggregation, round to the closest element of 4.\r\n      return position - (position % 4);\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  getIndexFromY(yval, useDataToUse = false, roundingMethod = Math.round) {\r\n    let ydata;\r\n\r\n    let data, position;\r\n\r\n    yval -= this.getShift();\r\n    yval /= this.getScale();\r\n\r\n    if (yval < this.getDataMinY()) {\r\n      return false;\r\n    }\r\n\r\n    if (yval > this.getDataMaxY()) {\r\n      return false;\r\n    }\r\n\r\n    if (useDataToUse && this.dataInUse) {\r\n      ydata = this.dataInUse.y;\r\n    } else {\r\n      ydata = this.getData();\r\n    }\r\n\r\n    position = euclidianSearch(undefined, yval, undefined, ydata, 1, undefined);\r\n\r\n    if (useDataToUse && this.dataInUse && this.dataInUseType == 'aggregateX') {\r\n      // In case of aggregation, round to the closest element of 4.\r\n      return position - (position % 4);\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /*\r\n    getIndexFromX( xval, useDataToUse = false, roundingMethod = Math.round ) {\r\n      if ( this.getXMin() > xval || this.getXMax() < xval ) {\r\n        return false;\r\n      }\r\n\r\n      if ( this.hasXWaveform() ) {\r\n        // The x value HAS to be rescaled\r\n\r\n        position = this.xdata.getIndexFromMonotoneousData(\r\n          xval,\r\n          xdata,\r\n          this.xdata.getMonotoneousAscending(),\r\n          roundingMethod\r\n        );\r\n      } else {\r\n        position = Math.max(\r\n          0,\r\n          Math.min(\r\n            this.getLength() - 1,\r\n            roundingMethod( ( xval - this.xOffset ) / this.xScale )\r\n          )\r\n        );\r\n      }\r\n\r\n      return position;\r\n    }\r\n  */\r\n\r\n  setAtIndex(index, value) {\r\n    this.data[index] = value;\r\n  }\r\n  /**\r\n   * Finds the point in the data stack with the smalled distance based on an x and y value.\r\n   * @param {number} xval\r\n   * @param {number} yval\r\n   * @param {boolean} useDataToUse\r\n   * @param {function} roundingMethod\r\n   * @param {number} scaleX\r\n   * @param {number} scaleY\r\n   * @returns {number} The index of the closest position\r\n   */\r\n  getIndexFromXY(\r\n    xval,\r\n    yval,\r\n    useDataToUse = false,\r\n    roundingMethod = Math.round,\r\n    scaleX = 1,\r\n    scaleY = 1\r\n  ) {\r\n    let xdata, ydata;\r\n\r\n    if (useDataToUse && this.dataInUse) {\r\n      xdata = this.dataInUse.x;\r\n      ydata = this.dataInUse.y;\r\n    } else if (this.xdata) {\r\n      xdata = this.xdata.data;\r\n      ydata = this.data;\r\n    }\r\n\r\n    let position;\r\n\r\n    //  if ( this.isXMonotoneous() ) {\r\n    // X lookup only\r\n    //     position = this.getIndexFromX( xval, useDataToUse, roundingMethod );\r\n\r\n    //   } else if ( !isNaN( yval ) ) {\r\n    position = this.getIndexFromDataXY(\r\n      xval,\r\n      xdata,\r\n      yval,\r\n      ydata,\r\n      scaleX,\r\n      scaleY\r\n    );\r\n    //   } else {\r\n    //     return;\r\n    //   }\r\n\r\n    if (useDataToUse && this.dataInUse && this.dataInUseType == 'aggregateX') {\r\n      // In case of aggregation, round to the closest element of 4.\r\n      return position - (position % 4);\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Finds the closest point in x and y direction.\r\n   * @see euclidianSearch\r\n   * @private\r\n   * @param {number} valX\r\n   * @param {array<number>} dataX\r\n   * @param {number} valY\r\n   * @param {array<number>} dataY\r\n   * @param {number} [ scaleX = 1 ]\r\n   * @param {number} [ scaleY = 1 ]\r\n   *\r\n   * @returns {number} The index of the closest point\r\n   */\r\n  getIndexFromDataXY(valX, dataX, valY, dataY, scaleX = 1, scaleY = 1) {\r\n    let data, position;\r\n\r\n    valX -= this.getXShift();\r\n    valX /= this.getXScale();\r\n\r\n    valY -= this.getShift();\r\n    valY /= this.getScale();\r\n\r\n    return euclidianSearch(valX, valY, dataX, dataY, scaleX, scaleY);\r\n  }\r\n\r\n  /**\r\n   * Uses binary search to find the index the closest to ```val``` in ```valCollection```.\r\n   * @param {number} val\r\n   * @param {array<number>} valCollection\r\n   * @param {boolean} isAscending\r\n   */\r\n  getIndexFromMonotoneousData(val, valCollection, isAscending) {\r\n    if (!this.isMonotoneous()) {\r\n      console.trace();\r\n      throw 'Impossible to get the index from a non-monotoneous wave !';\r\n    }\r\n\r\n    val -= this.getShift();\r\n    val /= this.getScale();\r\n\r\n    return binarySearch(val, valCollection, !isAscending);\r\n  }\r\n\r\n  findWithShortestDistance(options) {\r\n\r\n    if (!options.axisRef) {\r\n      const index = this.getIndexFromXY(\r\n        options.x,\r\n        options.y,\r\n        true,\r\n        undefined,\r\n        options.scaleX,\r\n        options.scaleY\r\n      );\r\n\r\n      if (options.xMaxDistance && Math.abs(options.x - this.getX(index)) > Math.abs(options.xMaxDistance)) {\r\n        return -1;\r\n      }\r\n\r\n      if (options.yMaxDistance && Math.abs(options.y - this.getY(index)) > Math.abs(options.yMaxDistance)) {\r\n        return -1;\r\n      }\r\n\r\n      return index;\r\n    } else {\r\n\r\n      if (options.axisRef == 'x') {\r\n        const index = this.getIndexFromX(options.x, true, undefined);\r\n\r\n        if (options.xMaxDistance && Math.abs(options.x - this.getX(index)) > Math.abs(options.xMaxDistance)) {\r\n          return -1;\r\n        }\r\n\r\n        return index;\r\n      }\r\n\r\n      if (options.axisRef == 'y') {\r\n        const index = this.getIndexFromY(options.y, true, undefined);\r\n\r\n        if (options.yMaxDistance && Math.abs(options.y - this.getY(index)) > Math.abs(options.yMaxDistance)) {\r\n          return -1;\r\n        }\r\n\r\n        return index;\r\n      }\r\n    }\r\n  }\r\n\r\n  getShortestDistanceToPoint(valX, valY, maxDistanceX, maxDistanceY) {\r\n    valX -= this.getXShift();\r\n    valX /= this.getXScale();\r\n\r\n    valY -= this.getShift();\r\n    valY /= this.getScale();\r\n\r\n    let x, y, y2, x2, i, distance, shortestDistance, shortestDistanceIndex;\r\n\r\n    const point = {\r\n      x: valX,\r\n      y: valY\r\n    };\r\n\r\n    for (i = 0; i < this.length() - 1; i++) {\r\n      shortestDistance = Math.POSITIVE_INFINITY;\r\n      shortestDistanceIndex = 0;\r\n\r\n      x = this.getX(i);\r\n      y = this.getY(i);\r\n\r\n      x2 = this.getX(i + 1);\r\n      y2 = this.getY(i + 1);\r\n\r\n      if (\r\n        (maxDistanceX &&\r\n          ((x - valX > maxDistanceX && x2 - valX > maxDistanceX) ||\r\n            (valX - x > maxDistanceX && valX - x2 > maxDistanceX))) ||\r\n        (maxDistanceY &&\r\n          ((y - valY > maxDistanceY && y2 - valY > maxDistanceY) ||\r\n            (valY - y > maxDistanceY && valY - y2 > maxDistanceY)))\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      distance = distToSegment(point, {\r\n        x: x,\r\n        y: y\r\n      }, {\r\n        x: x2,\r\n        y: y2\r\n      });\r\n      if (distance < shortestDistance) {\r\n        shortestDistance = distance;\r\n        shortestDistanceIndex = i;\r\n      }\r\n    }\r\n\r\n    return {\r\n      shortestDistance: distance,\r\n      index: shortestDistanceIndex\r\n    };\r\n  }\r\n  getReductionType() {\r\n    return this.dataInUseType;\r\n  }\r\n\r\n  getXMin() {\r\n    return this.minX * this.getXScale() + this.getXShift();\r\n  }\r\n\r\n  getXMax() {\r\n    return this.maxX * this.getXScale() + this.getXShift();\r\n  }\r\n\r\n  getYMin() {\r\n    return this.minY * this.getScale() + this.getShift();\r\n  }\r\n\r\n  getYMax() {\r\n    return this.maxY * this.getScale() + this.getShift();\r\n  }\r\n\r\n  getMin() {\r\n    return this.minY * this.getScale() + this.getShift();\r\n  }\r\n\r\n  getMax() {\r\n    return this.maxY * this.getScale() + this.getShift();\r\n  }\r\n\r\n  getMinX() {\r\n    return this.minX * this.getXScale() + this.getXShift();\r\n  }\r\n\r\n  getMaxX() {\r\n    return this.maxX * this.getXScale() + this.getXShift();\r\n  }\r\n\r\n  getMinY() {\r\n    return this.minY * this.getScale() + this.getShift();\r\n  }\r\n\r\n  getMaxY() {\r\n    return this.maxY * this.getScale() + this.getShift();\r\n  }\r\n\r\n  getDataMaxX() {\r\n    return this.maxX;\r\n  }\r\n\r\n  getDataMinX() {\r\n    return this.minX;\r\n  }\r\n\r\n  getDataMaxY() {\r\n    return this.maxY;\r\n  }\r\n\r\n  getDataMinY() {\r\n    return this.minY;\r\n  }\r\n\r\n  getDataY() {\r\n    return this.data;\r\n  }\r\n\r\n  getData(optimized) {\r\n    if (!optimized || !this.dataInUse) {\r\n      return this.data;\r\n    }\r\n    return this.dataInUse.y;\r\n  }\r\n\r\n  setShift(shift = 0) {\r\n    // We must update the min and the max of the y data\r\n    //this.minY += ( shift - this.getShift() );\r\n    //this.maxY += ( shift - this.getShift() );\r\n    this.shift = shift;\r\n    return this;\r\n  }\r\n\r\n  getShift() {\r\n    return this.shift || 0;\r\n  }\r\n\r\n  getScale() {\r\n    return this.scale || 1;\r\n  }\r\n\r\n  setScale(scale = 1) {\r\n    // this.minY = ( this.minY - this.getShift() ) * scale;\r\n    // this.maxY = ( this.maxY - this.getShift() ) * scale;\r\n    this.scale = scale;\r\n    return this;\r\n  }\r\n\r\n  setXShift(shift = 0) {\r\n    if (!this.hasXWaveform) {\r\n      return this;\r\n    }\r\n\r\n    // We must update the min and the max of the x data\r\n    // That's important for when the data has already been set\r\n    //  this.minX += ( shift - this.getXShift() );\r\n    //    this.maxX += ( shift - this.getXShift() );\r\n    this.getXWaveform().setShift(shift);\r\n    return this;\r\n  }\r\n\r\n  getXShift(shift = 0) {\r\n    if (!this.hasXWaveform) {\r\n      return 0;\r\n    }\r\n\r\n    return this.getXWaveform().getShift();\r\n  }\r\n\r\n  setXScale(scale = 1) {\r\n    if (!this.hasXWaveform) {\r\n      return this;\r\n    }\r\n\r\n    this.getXWaveform().setScale(scale);\r\n    return this;\r\n  }\r\n\r\n  getXScale() {\r\n    if (!this.hasXWaveform) {\r\n      return 1;\r\n    }\r\n\r\n    return this.getXWaveform().getScale();\r\n  }\r\n\r\n  getLength() {\r\n    return this.data.length;\r\n  }\r\n\r\n  getDataToUseFlat() {\r\n    let l;\r\n    let j = 0;\r\n    let arr;\r\n\r\n    if (this.dataInUse) {\r\n      l = this.dataInUse.x.length;\r\n      arr = new Array(l * 2).fill(0);\r\n\r\n      for (var i = 0; i < l; i += 1) {\r\n        arr[j] = this.dataInUse.x[i];\r\n        arr[j + 1] = this.dataInUse.y[i];\r\n        j += 2;\r\n      }\r\n    } else {\r\n      l = this.getLength();\r\n      arr = new Array(l * 2).fill(0);\r\n      for (var i = 0; i < l; i += 1) {\r\n        arr[j + 1] = this.data[i];\r\n        arr[j] = this.getX(i);\r\n        j += 2;\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  fit(options) {\r\n    var self = this;\r\n\r\n    return new Promise(function (resolver, rejector) {\r\n      var fit = new FitLM(\r\n        util.extend({}, {\r\n          dataY: self,\r\n          dataX: self.getXWaveform(),\r\n          done: function (results) {\r\n            resolver(results);\r\n          },\r\n          waveform: new Waveform()\r\n        },\r\n          options\r\n        )\r\n      );\r\n\r\n      fit.init();\r\n      fit.fit();\r\n    });\r\n  }\r\n\r\n  getX(index, optimized) {\r\n    if (optimized && this.dataInUse) {\r\n      return this.dataInUse.x[index] * this.getXScale() + this.getXShift();\r\n    }\r\n\r\n    if (this.xdata) {\r\n      return this.xdata.data[index] * this.getXScale() + this.getXShift();\r\n    } else {\r\n      return this.xOffset + index * this.xScale;\r\n    }\r\n  }\r\n\r\n  getXRaw(index, optimized) {\r\n    if (optimized && this.dataInUse) {\r\n      return this.dataInUse.x[index];\r\n    }\r\n\r\n    if (this.xdata) {\r\n      return this.xdata.data[index];\r\n    } else {\r\n      return index;\r\n    }\r\n  }\r\n\r\n  _integrateP(from = 0, to = this.getLength() - 1) {\r\n    from = Math.round(from);\r\n    to = Math.round(to);\r\n\r\n    if (from > to) {\r\n      let temp = from;\r\n      from = to;\r\n      to = temp;\r\n    }\r\n\r\n    var l = to - from + 1;\r\n    var sum = 0,\r\n      delta;\r\n\r\n    let deltaTot = 0;\r\n    let diff;\r\n    var arrY = this.getData();\r\n\r\n    for (; from <= to; from++) {\r\n      if (arrY.length - 1 > from) {\r\n        diff = this.getX(from + 1) - this.getX(from);\r\n        deltaTot += diff;\r\n        sum += arrY[from] * diff;\r\n      }\r\n    }\r\n\r\n    return [sum, l, deltaTot];\r\n  }\r\n\r\n  integrateP(from, to) {\r\n    var val = this._integrateP(from, to);\r\n    return val[0];\r\n  }\r\n\r\n  integrate(fromX, toX) {\r\n    return this.integrateP(this.getIndexFromX(fromX), this.getIndexFromX(toX));\r\n  }\r\n\r\n  average(p0 = 0, p1 = this.getLength() - 1) {\r\n    return this.getAverageP(p0, p1);\r\n  }\r\n\r\n  mean() {\r\n    return this.average();\r\n  }\r\n\r\n  stddev() {\r\n    let num = 0,\r\n      denom = 0;\r\n    const mean = this.mean();\r\n    for (var i = 0; i < this.getLength(); i++) {\r\n      num += (this.getY(i) - mean) ** 2;\r\n      denom++;\r\n    }\r\n\r\n    return (num / denom) ** 0.5;\r\n  }\r\n\r\n  getAverageP(from, to) {\r\n    var sum = this._integrateP(from, to);\r\n    return sum[0] / sum[2];\r\n  }\r\n\r\n  getAverageX(from, to) {\r\n    var sum = this._integrateX(from, to);\r\n    return sum[0] / sum[2];\r\n  }\r\n\r\n  checkMonotonicity() {\r\n    let i = 1,\r\n      data = this.getData();\r\n    const l = this.data.length;\r\n    let dir = data[1] > data[0];\r\n\r\n    for (; i < l; i++) {\r\n      if (data[i] !== data[i - 1] && dir !== data[i] > data[i - 1]) {\r\n        return (this._monotoneous = false);\r\n      }\r\n    }\r\n\r\n    this._monotoneousAscending = data[1] > data[0];\r\n    return (this._monotoneous = true);\r\n  }\r\n\r\n  requireXMonotonicity() {\r\n    if (this.xdata) {\r\n      this.xdata.requireMonotonicity();\r\n    }\r\n  }\r\n\r\n  requireMonotonicity() {\r\n    if (!this.isMonotoneous()) {\r\n      throw 'The wave must be monotonic';\r\n    }\r\n  }\r\n\r\n  isMonotoneous() {\r\n    return !!this._monotoneous;\r\n  }\r\n\r\n  isXMonotoneous() {\r\n    if (this.xdata) {\r\n      return this.xdata.isMonotoneous();\r\n    }\r\n    // Offset and scale is always monotoneous\r\n    return true;\r\n  }\r\n\r\n  invert(data) {\r\n    let d = data || this.data;\r\n    d.reverse();\r\n\r\n    if (this.xdata) {\r\n      this.xdata.invert();\r\n    }\r\n\r\n    if (this.isMonotoneous()) {\r\n      this._monotoneousAscending = !this._monotoneousAscending;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  resampleForDisplay(options) {\r\n    // Serie redrawing\r\n\r\n    let i = 0;\r\n\r\n    this.requireXMonotonicity();\r\n\r\n    let inverting = false,\r\n      dataY = this.getDataY(),\r\n      data = {\r\n        x: [],\r\n        y: []\r\n      },\r\n      dataMinMax = [],\r\n      resampleSum,\r\n      resampleMin,\r\n      resampleMax,\r\n      resampleNum,\r\n      resample_x_start,\r\n      resample_x_px_start,\r\n      x_px,\r\n      doing_mean = false,\r\n      firstPointIndex = 0,\r\n      xval;\r\n\r\n    const l = this.getLength();\r\n\r\n    if (!options.xPosition) {\r\n      throw 'No position calculation method provided';\r\n    }\r\n\r\n    if (!options.resampleToPx) {\r\n      throw 'No \"resampleToPx\" method was provided. Unit: px per point';\r\n    }\r\n\r\n    if (options.minX > options.maxX) {\r\n      let temp = options.minX;\r\n      options.minX = options.maxX;\r\n      options.maxX = temp;\r\n    }\r\n\r\n    if (\r\n      (this.xdata && !this.xdata.getMonotoneousAscending()) ||\r\n      (!this.xdata && this.xScale < -0)\r\n    ) {\r\n      inverting = true;\r\n      i = l;\r\n    }\r\n\r\n    for (; inverting ? i > 0 : i < l; inverting ? i-- : i++) {\r\n      xval = this.getX(i);\r\n\r\n      if (options.minX > xval) {\r\n        firstPointIndex = i;\r\n        continue;\r\n      }\r\n\r\n      x_px = options.xPosition(xval);\r\n\r\n      if (!doing_mean) {\r\n        if (!firstPointIndex) {\r\n          firstPointIndex = i;\r\n        } else {\r\n          data.x.push(xval);\r\n          data.y.push(dataY[firstPointIndex]);\r\n        }\r\n\r\n        while (isNaN(dataY[i])) {\r\n          if (inverting) {\r\n            i--;\r\n          } else {\r\n            i++;\r\n          }\r\n        }\r\n\r\n        resampleSum = resampleMin = resampleMax = dataY[firstPointIndex];\r\n        resampleNum = 1;\r\n        resample_x_px_start = x_px;\r\n        resample_x_start = xval;\r\n        firstPointIndex = 0;\r\n\r\n        doing_mean = true;\r\n\r\n        continue;\r\n      }\r\n\r\n      if (\r\n        Math.abs(x_px - resample_x_px_start) > options.resampleToPx ||\r\n        i == l ||\r\n        i == 0 ||\r\n        isNaN(dataY[i])\r\n      ) {\r\n        let xpos = (resample_x_start + xval) / 2;\r\n\r\n        data.x.push(xpos);\r\n        data.y.push(resampleSum / resampleNum);\r\n\r\n        dataMinMax.push(xpos, resampleMin, resampleMax);\r\n\r\n        if (options.maxX !== undefined && xval > options.maxX) {\r\n          break;\r\n        }\r\n\r\n        doing_mean = false;\r\n\r\n        continue;\r\n      }\r\n\r\n      resampleSum += dataY[i];\r\n      resampleNum++;\r\n\r\n      resampleMin = Math.min(resampleMin, dataY[i]);\r\n      resampleMax = Math.max(resampleMax, dataY[i]);\r\n    }\r\n\r\n    this.dataInUseType = 'resampled';\r\n    this.dataInUse = data;\r\n    return dataMinMax;\r\n  }\r\n\r\n  interpolate(x) {\r\n    let yData = this.getDataY();\r\n    let xIndex;\r\n\r\n    if (this.xdata) {\r\n      let xData = this.xdata.getData();\r\n\r\n      try {\r\n        xIndex = binarySearch(x, xData, !this.xdata.getMonotoneousAscending());\r\n      } catch (e) {\r\n        return NaN;\r\n      }\r\n\r\n      if (xData[xIndex] == x) {\r\n        return yData[xIndex];\r\n      }\r\n      return (\r\n        ((x - xData[xIndex]) / (xData[xIndex + 1] - xData[xIndex])) *\r\n        (yData[xIndex + 1] - yData[xIndex]) +\r\n        yData[xIndex]\r\n      );\r\n    } else {\r\n      xIndex = (x - this.xOffset) / this.xScale;\r\n      let xIndexF = Math.floor(xIndex);\r\n      return (\r\n        (xIndex - xIndexF) * (yData[xIndexF + 1] - yData[xIndexF]) +\r\n        yData[xIndexF]\r\n      );\r\n    }\r\n  }\r\n\r\n  interpolateIndex_X(index) {\r\n    let yData = this.getDataY();\r\n    if (this.xdata) {\r\n      let xData = this.xdata.getData();\r\n      let indexStart = Math.floor(index);\r\n\r\n      return (\r\n        (index - indexStart) * (xData[indexStart + 1] - xData[indexStart]) +\r\n        xData[indexStart]\r\n      );\r\n    }\r\n  }\r\n\r\n  getMonotoneousAscending() {\r\n    if (!this.isMonotoneous()) {\r\n      return 'The waveform is not monotoneous';\r\n    }\r\n\r\n    return this._monotoneousAscending;\r\n  }\r\n\r\n  getXMonotoneousAscending() {\r\n    if (this.xdata) {\r\n      return this.xdata.getMonotoneousAscending();\r\n    }\r\n\r\n    return this.xScale > 0;\r\n  }\r\n\r\n  isXMonotoneousAscending() {\r\n    return this.getXMonotoneousAscending(...arguments);\r\n  }\r\n\r\n  divide(numberOrWave) {\r\n    return this._arithmetic(numberOrWave, DIVIDE);\r\n  }\r\n\r\n  divideBy() {\r\n    return this.divide(...arguments);\r\n  }\r\n\r\n  multiply(numberOrWave) {\r\n    return this._arithmetic(numberOrWave, MULTIPLY);\r\n  }\r\n\r\n  multiplyBy() {\r\n    return this.multiply(...arguments);\r\n  }\r\n\r\n  log() {\r\n    return this.logBase(10);\r\n  }\r\n\r\n  ln() {\r\n    return this.logBase(Math.E);\r\n  }\r\n\r\n  logBase(base) {\r\n    let logBase = Math.log(base);\r\n    this.data.map((valY) => {\r\n      return Math.log(valY) / logBase;\r\n    });\r\n  }\r\n\r\n  add(numberOrWave) {\r\n    return this._arithmetic(numberOrWave, ADD);\r\n  }\r\n\r\n  addBy() {\r\n    return this.add(...arguments);\r\n  }\r\n\r\n  subtract(numberOrWave) {\r\n    return this._arithmetic(numberOrWave, SUBTRACT);\r\n  }\r\n\r\n  subtractBy() {\r\n    return this.subtract(...arguments);\r\n  }\r\n\r\n  math(method) {\r\n    for (var i = 0; i < this.getLength(); i++) {\r\n      this.data[i] = method(this.getY(i), this.getX(i));\r\n    }\r\n\r\n    this._setData(this.data);\r\n    return this;\r\n  }\r\n\r\n  _arithmetic(numberOrWave, operator) {\r\n    if (numberOrWave instanceof Waveform) {\r\n      return this._waveArithmetic(numberOrWave, operator);\r\n    } else if (typeof numberOrWave == 'number') {\r\n      return this._numberArithmetic(numberOrWave, operator);\r\n    }\r\n  }\r\n\r\n  _numberArithmetic(num, operation) {\r\n    let i = 0,\r\n      l = this.getLength();\r\n\r\n    if (operation == MULTIPLY) {\r\n      for (; i < l; i++) {\r\n        this.data[i] *= num;\r\n      }\r\n\r\n      this.minY *= num;\r\n      this.maxY *= num;\r\n    } else if (operation == DIVIDE) {\r\n      for (; i < l; i++) {\r\n        this.data[i] /= num;\r\n      }\r\n\r\n      this.minY /= num;\r\n      this.maxY /= num;\r\n    } else if (operation == ADD) {\r\n      for (; i < l; i++) {\r\n        this.data[i] += num;\r\n      }\r\n\r\n      this.minY += num;\r\n      this.maxY += num;\r\n    } else if (operation == SUBTRACT) {\r\n      for (; i < l; i++) {\r\n        this.data[i] -= num;\r\n      }\r\n\r\n      this.minY -= num;\r\n      this.maxY -= num;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  _waveArithmetic(wave, operation) {\r\n    let yDataThis = this.getDataY(),\r\n      i = 0;\r\n    const l = this.getLength();\r\n    this.requireXMonotonicity();\r\n    wave.requireXMonotonicity();\r\n\r\n    if (this.xdata && wave.xdata) {\r\n      const xSet = new Set();\r\n      const xData = this.xdata.data;\r\n      const xData2 = wave.xdata.data;\r\n\r\n      for (i = 0; i < xData.length; i++) {\r\n        xSet.add(xData[i]);\r\n      }\r\n\r\n      for (i = 0; i < xData2.length; i++) {\r\n        xSet.add(xData2[i]);\r\n      }\r\n\r\n      const xs = Array.from(xSet.values());\r\n      xs.sort((a, b) => a - b);\r\n\r\n      const ys = xs.map((x) => {\r\n        if (operation == MULTIPLY) {\r\n          return this.interpolate(x) * wave.interpolate(x);\r\n        } else if (operation == DIVIDE) {\r\n          return this.interpolate(x) / wave.interpolate(x);\r\n        } else if (operation == ADD) {\r\n          return this.interpolate(x) + wave.interpolate(x);\r\n        } else if (operation == SUBTRACT) {\r\n          return this.interpolate(x) - wave.interpolate(x);\r\n        }\r\n      });\r\n\r\n      this._setData(ys);\r\n\r\n      this.xdata._setData(xs);\r\n    } else {\r\n      if (operation == MULTIPLY) {\r\n        for (; i < l; i++) {\r\n          yDataThis[i] *= wave.interpolate(this.getX(i));\r\n        }\r\n      } else if (operation == DIVIDE) {\r\n        for (; i < l; i++) {\r\n          yDataThis[i] /= wave.interpolate(this.getX(i));\r\n        }\r\n      } else if (operation == ADD) {\r\n        for (; i < l; i++) {\r\n          yDataThis[i] += wave.interpolate(this.getX(i));\r\n        }\r\n      } else if (operation == SUBTRACT) {\r\n        for (; i < l; i++) {\r\n          yDataThis[i] -= wave.interpolate(this.getX(i));\r\n        }\r\n      }\r\n\r\n      this._setData(yDataThis);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  aggregate(direction = 'x') {\r\n    this._dataAggregating = {};\r\n    this._dataAggregated = {};\r\n    this._dataAggregationDirection = direction.toUpperCase();\r\n\r\n    var pow2 = pow2floor(this.getLength());\r\n\r\n    this._dataAggregating = aggregator({\r\n      minX: this.minX,\r\n      maxX: this.maxX,\r\n      minY: this.minY,\r\n      maxY: this.maxY,\r\n      data: this.data,\r\n      xdata: this.xdata ? this.xdata.getData() : undefined,\r\n      xScale: this.xScale,\r\n      xOffset: this.xOffset,\r\n      numPoints: pow2,\r\n      direction: direction\r\n    }).then((event) => {\r\n      this._dataAggregated = event.aggregates;\r\n      this._dataAggregating = false;\r\n    });\r\n  }\r\n\r\n  hasAggregation() {\r\n    return !!this._dataAggregated;\r\n  }\r\n\r\n  selectAggregatedData(pxWidth) {\r\n    if (pxWidth < 2) {\r\n      return false;\r\n    }\r\n    /*\r\n        if( direction !== this._dataAggregationDirection ) {\r\n          throw \"The data is not aggregated in that direction\";\r\n        }\r\n    */\r\n\r\n    var level = pow2ceil(pxWidth);\r\n\r\n    if (this._dataAggregated[level]) {\r\n      this.dataInUseType = `aggregate${this._dataAggregationDirection}`;\r\n      this.dataInUse = this._dataAggregated[level];\r\n      return;\r\n    } else if (this._dataAggregating) {\r\n      return this._dataAggregating;\r\n    }\r\n\r\n    this.dataInUseType = 'none';\r\n    this.dataInUse = {\r\n      y: this.data,\r\n      x: this.getXWaveform().data\r\n    };\r\n  }\r\n\r\n  duplicate(alsoDuplicateXWave = true) {\r\n    var newWaveform = new Waveform();\r\n    newWaveform._setData(this.getDataY().slice());\r\n    newWaveform.rescaleX(this.xOffset, this.xShift);\r\n    newWaveform.setShift(this.getShift());\r\n    newWaveform.setScale(this.getScale());\r\n\r\n    if (this.xdata) {\r\n      if (alsoDuplicateXWave) {\r\n        newWaveform.setXWaveform(this.xdata.duplicate());\r\n      } else {\r\n        newWaveform.setXWaveform(this.xdata);\r\n      }\r\n\r\n      newWaveform.setXShift(this.getXShift());\r\n      newWaveform.setXScale(this.getXScale());\r\n    } else {\r\n      newWaveform.xOffset = this.xOffset;\r\n      newWaveform.xScale = this.xScale;\r\n    }\r\n\r\n    return newWaveform;\r\n  }\r\n\r\n  subrangeX(fromX, toX) {\r\n    if (!this.xdata) {\r\n      // We can select the new range from there\r\n\r\n      let fromP = this.getIndexFromX(fromX),\r\n        toP = this.getIndexFromX(toP);\r\n\r\n      return new Waveform()\r\n        .setData(this.data.slice(fromP, toP))\r\n        .rescaleX(this.xOffset, this.xScale);\r\n    } else {\r\n      var waveform = new Waveform();\r\n\r\n      for (var i = 0, l = this.data.length; i < l; i++) {\r\n        if (this.data[i] >= fromX && this.data[i] < toX) {\r\n          waveform.append(this.dataX[i], this.data[i]);\r\n        }\r\n      }\r\n\r\n      return waveform;\r\n    }\r\n  }\r\n\r\n  findLocalMinMax(xRef, xWithin, type) {\r\n    let index = this.getIndexFromX(xRef),\r\n      indexPlus = this.getIndexFromX(xRef + xWithin),\r\n      indexMinus = this.getIndexFromX(xRef - xWithin);\r\n\r\n    return this.findLocalMinMaxIndex(indexMinus, indexPlus, type);\r\n  }\r\n\r\n  findLocalMinMaxIndex(indexMinus, indexPlus, type) {\r\n    let tmp;\r\n\r\n    if (indexPlus < indexMinus) {\r\n      tmp = indexPlus;\r\n      indexPlus = indexMinus;\r\n      indexMinus = tmp;\r\n    }\r\n\r\n    let curr, currI;\r\n\r\n    if (type == 'max') {\r\n      curr = Number.NEGATIVE_INFINITY;\r\n\r\n      for (var i = indexMinus; i <= indexPlus; i++) {\r\n        if (this.getY(i) > curr) {\r\n          curr = this.getY(i);\r\n          currI = i;\r\n        }\r\n      }\r\n    } else {\r\n      curr = Number.POSITIVE_INFINITY;\r\n\r\n      for (var i = indexMinus; i <= indexPlus; i++) {\r\n        if (this.getY(i) < curr) {\r\n          curr = this.getY(i);\r\n          currI = i;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (currI == indexMinus || currI == indexPlus) {\r\n      return false;\r\n    }\r\n\r\n    return this.getX(currI);\r\n  }\r\n\r\n  warn(text) {\r\n    if (console) {\r\n      console.warn(text);\r\n    }\r\n  }\r\n\r\n  setUnit(unit) {\r\n    this.unit = unit;\r\n    return this;\r\n  }\r\n\r\n  setXUnit(unit) {\r\n    if (this.hasXWaveform()) {\r\n      this.xdata.setUnit(unit);\r\n    }\r\n\r\n    this.xunit = unit;\r\n    return this;\r\n  }\r\n\r\n  getUnit() {\r\n    return this.unit || '';\r\n  }\r\n\r\n  getXUnit() {\r\n    if (this.hasXWaveform()) {\r\n      return this.xdata.getUnit();\r\n    }\r\n\r\n    return this.xunit | '';\r\n  }\r\n\r\n  hasXUnit() {\r\n    return this.getXUnit().length > 0;\r\n  }\r\n\r\n  hasUnit() {\r\n    return this.getUnit().length > 0;\r\n  }\r\n\r\n  findLevels(level, options) {\r\n    options = util.extend({\r\n      box: 1,\r\n      edge: 'both',\r\n      rounding: 'before',\r\n      rangeP: [0, this.getLength()]\r\n    },\r\n      options\r\n    );\r\n\r\n    var lastLvlIndex = options.rangeP[0];\r\n    var lvlIndex;\r\n    var indices = [];\r\n    var i = 0;\r\n\r\n    while (\r\n      (lvlIndex = this.findLevel(\r\n        level,\r\n        util.extend(true, {}, options, {\r\n          rangeP: [lastLvlIndex, options.rangeP[1]]\r\n        })\r\n      ))\r\n    ) {\r\n      indices.push(lvlIndex);\r\n      lastLvlIndex = Math.ceil(lvlIndex);\r\n\r\n      i++;\r\n      if (i > 1000) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    return indices;\r\n  }\r\n\r\n  // Find the first level in the specified range\r\n  findLevel(level, options) {\r\n    options = util.extend({\r\n      box: 1,\r\n      edge: 'both',\r\n      direction: 'ascending',\r\n      rounding: 'before',\r\n      rangeP: [0, this.getLength()]\r\n    },\r\n      options\r\n    );\r\n\r\n    if (options.rangeX) {\r\n      options.rangeP = options.rangeX.map(this.getIndexFromX);\r\n    }\r\n\r\n    var value, below, i, j, l, increment;\r\n\r\n    var box = options.box;\r\n\r\n    if (box % 2 == 0) {\r\n      box++;\r\n    }\r\n\r\n    if (options.direction == 'descending') {\r\n      (i = options.rangeP[1]), (l = options.rangeP[0]), (increment = -1);\r\n    } else {\r\n      (i = options.rangeP[0]), (l = options.rangeP[1]), (increment = +1);\r\n    }\r\n\r\n    for (; ; i += increment) {\r\n      if (options.direction == 'descending') {\r\n        if (i < l) {\r\n          break;\r\n        }\r\n      } else {\r\n        if (i > l) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (i < options.rangeP[0] + (box - 1) / 2) {\r\n        continue;\r\n      }\r\n\r\n      if (i > options.rangeP[1] - (box - 1) / 2) {\r\n        break;\r\n      }\r\n\r\n      value = this.getAverageP(i - (box - 1) / 2, i + (box - 1) / 2);\r\n\r\n      if (below === undefined) {\r\n        below = value < level;\r\n        continue;\r\n      }\r\n      // Crossing up\r\n      if (value >= level && below) {\r\n        below = false;\r\n\r\n        if (options.edge == 'ascending' || options.edge == 'both') {\r\n          // Found something\r\n\r\n          for (let j = i + (box - 1) / 2; j >= i - (box - 1) / 2; j--) {\r\n            if (this.data[j] >= level && this.data[j - 1] <= level) {\r\n              // Find a crossing\r\n\r\n              switch (options.rounding) {\r\n                case 'before':\r\n                  return j - 1;\r\n                  break;\r\n\r\n                case 'after':\r\n                  return j;\r\n                  break;\r\n\r\n                case 'interpolate':\r\n                  return getIndexInterpolate(\r\n                    level,\r\n                    this.data[j],\r\n                    this.data[j - 1],\r\n                    j,\r\n                    j - 1\r\n                  );\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else if (value <= level && !below) {\r\n        below = true;\r\n\r\n        if (options.edge == 'descending' || options.edge == 'both') {\r\n          for (j = i + (box - 1) / 2; j >= i - (box - 1) / 2; j--) {\r\n            if (this.data[j] <= level && this.data[j - 1] >= level) {\r\n              // Find a crossing\r\n\r\n              switch (options.rounding) {\r\n                case 'before':\r\n                  return j - 1;\r\n                  break;\r\n\r\n                case 'after':\r\n                  return j;\r\n                  break;\r\n\r\n                case 'interpolate':\r\n                  return getIndexInterpolate(\r\n                    level,\r\n                    this.data[j],\r\n                    this.data[j - 1],\r\n                    j,\r\n                    j - 1\r\n                  );\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  normalize(mode) {\r\n    let factor, total, minValue, maxValue, ratio, i;\r\n\r\n    if (mode == 'max1' || mode == 'max100') {\r\n      factor = 1;\r\n\r\n      if (mode == 'max100') {\r\n        factor = 100;\r\n      }\r\n\r\n      maxValue = this.data[0];\r\n\r\n      for (i = 1; i < this.getLength(); i++) {\r\n        if (this.data[i] > maxValue) {\r\n          maxValue = this.data[i];\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < this.getLength(); i++) {\r\n        this.data[i] /= maxValue / factor;\r\n      }\r\n    } else if (mode == 'sum1') {\r\n      total = 0;\r\n\r\n      for (i = 0; i < this.getLength(); i++) {\r\n        total += this.data[i];\r\n      }\r\n\r\n      for (i = 0; i < this.getLength(); i++) {\r\n        this.data[i] /= total;\r\n      }\r\n    } else if (mode == 'max1min0') {\r\n      (maxValue = this.data[0]), (minValue = this.data[0]);\r\n\r\n      for (i = 1; i < this.getLength(); i++) {\r\n        if (this.data[i] > maxValue) {\r\n          maxValue = this.data[i];\r\n        } else if (this.data[i] < minValue) {\r\n          minValue = this.data[i];\r\n        }\r\n      }\r\n\r\n      ratio = 1 / (maxValue - minValue);\r\n\r\n      for (i = 0; i < this.getLength(); i++) {\r\n        this.data[i] = (this.data[i] - minValue) * ratio;\r\n      }\r\n    }\r\n\r\n    this.setData(this.data);\r\n  }\r\n\r\n  filterNaN() {\r\n    const l = this.data.length - 1;\r\n    for (var i = l; i >= 0; i--) {\r\n      if (isNaN(this.data[i])) {\r\n        this.data = this.data.splice(i, 1);\r\n\r\n        if (this.xdata) {\r\n          this.xdata.data.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  filterInfinity() {\r\n    const l = this.data.length - 1;\r\n    for (var i = l; i >= 0; i--) {\r\n      if (!isFinite(this.data[i])) {\r\n        this.data = this.data.splice(i, 1);\r\n\r\n        if (this.xdata) {\r\n          this.xdata.data.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////\r\n  ///// HANDLING ERRORS   ////////////////////////////////////\r\n  ////////////////////////////////////////////////////////////\r\n\r\n  setErrorBarX(waveform) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n\r\n    var xWave = this.getXWaveform();\r\n    xWave.setErrorBar(waveform);\r\n    return this;\r\n  }\r\n\r\n  setErrorBarXBelow(waveform) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n\r\n    var xWave = this.getXWaveform();\r\n    xWave.setErrorBarBelow(waveform);\r\n    return this;\r\n  }\r\n\r\n  setErrorBarXAbove(waveform) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n\r\n    var xWave = this.getXWaveform();\r\n    xWave.setErrorBarAbove(waveform);\r\n    return this;\r\n  }\r\n\r\n  setErrorBoxX(waveform) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n\r\n    var xWave = this.getXWaveform();\r\n    xWave.setErrorBoxAbove(waveform);\r\n    xWave.setErrorBoxBelow(waveform);\r\n    return this;\r\n  }\r\n\r\n  setErrorBoxXBelow(waveform) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n\r\n    var xWave = this.getXWaveform();\r\n\r\n    xWave.setErrorBoxBelow(waveform);\r\n    return this;\r\n  }\r\n\r\n  setErrorBoxXAbove(waveform) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n\r\n    var xWave = this.getXWaveform();\r\n    xWave.setErrorBoxAbove(waveform);\r\n    return this;\r\n  }\r\n\r\n  setErrorBar(waveform, checkMinMax = true) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n    this.errors.nb++;\r\n    this.errors.nb++;\r\n    this.errors.bars.below = waveform;\r\n    this.errors.bars.above = waveform;\r\n\r\n    if (checkMinMax) {\r\n      this._setData(this.data);\r\n    }\r\n  }\r\n\r\n  setErrorBarBelow(waveform, checkMinMax = true) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n    this.errors.nb++;\r\n    this.errors.bars.below = waveform;\r\n\r\n    if (checkMinMax) {\r\n      this._setData(this.data);\r\n    }\r\n  }\r\n\r\n  setErrorBarAbove(waveform, checkMinMax = true) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n\r\n    this.errors.nb++;\r\n    this.errors.bars.above = waveform;\r\n\r\n    if (checkMinMax) {\r\n      this._setData(this.data);\r\n    }\r\n  }\r\n\r\n  setErrorBox(waveform, checkMinMax = true) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n    this.errors.nb++;\r\n    this.errors.nb++;\r\n    this.errors.boxes.above = waveform;\r\n    this.errors.boxes.below = waveform;\r\n\r\n    if (checkMinMax) {\r\n      this._setData(this.data);\r\n    }\r\n  }\r\n\r\n  setErrorBoxBelow(waveform, checkMinMax = true) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new this.constructor(waveform);\r\n    }\r\n    this.errors.nb++;\r\n    this.errors.boxes.below = waveform;\r\n\r\n    if (checkMinMax) {\r\n      this._setData(this.data);\r\n    }\r\n  }\r\n\r\n  setErrorBoxAbove(waveform, checkMinMax = true) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      waveform = new Waveform(waveform);\r\n    }\r\n\r\n    this.errors.boxes.above = waveform;\r\n    if (checkMinMax) {\r\n      this._setData(this.data);\r\n    }\r\n  }\r\n\r\n  getMaxError(i, side = Waveform.ABOVE) {\r\n    return Math.max(\r\n      this.getMaxErrorType(i, side, Waveform.BOX),\r\n      this.getMaxErrorType(i, side, Waveform.BAR)\r\n    );\r\n  }\r\n\r\n  getMaxErrorType(i, side = Waveform.ABOVE, type = Waveform.BOX) {\r\n    let stack;\r\n    if (type == Waveform.BOX) {\r\n      stack = this.errors.boxes;\r\n    } else if (type == Waveform.BAR) {\r\n      stack = this.errors.bars;\r\n    } else {\r\n      throw 'Unknown type of error';\r\n    }\r\n\r\n    let waveform;\r\n    if (!(waveform = stack[side])) {\r\n      if (side == Waveform.ABOVE) {\r\n        if (stack[side] == Waveform.BELOW) {\r\n          waveform = stack.below;\r\n        }\r\n      } else {\r\n        if (stack[side] == Waveform.ABOVE) {\r\n          waveform = stack.above;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!waveform) {\r\n      return 0;\r\n    }\r\n\r\n    return waveform.getY(i);\r\n  }\r\n\r\n  getErrorBarXBelow(index) {\r\n    return this.getErrorX(index, Waveform.BELOW, Waveform.BAR);\r\n  }\r\n  getErrorBarXAbove(index) {\r\n    return this.getErrorX(index, Waveform.ABOVE, Waveform.BAR);\r\n  }\r\n  getErrorBoxXBelow(index) {\r\n    return this.getErrorX(index, Waveform.BELOW, Waveform.BOX);\r\n  }\r\n  getErrorBoxXAbove(index) {\r\n    return this.getErrorX(index, Waveform.ABOVE, Waveform.BOX);\r\n  }\r\n\r\n  getErrorBarYBelow(index) {\r\n    return this.getError(index, Waveform.BELOW, Waveform.BAR);\r\n  }\r\n  getErrorBarYAbove(index) {\r\n    return this.getError(index, Waveform.ABOVE, Waveform.BAR);\r\n  }\r\n  getErrorBoxYBelow(index) {\r\n    return this.getError(index, Waveform.BELOW, Waveform.BOX);\r\n  }\r\n  getErrorBoxYAbove(index) {\r\n    return this.getError(index, Waveform.ABOVE, Waveform.BOX);\r\n  }\r\n\r\n  getErrorX(index, side = Waveform.ABOVE, type = Waveform.BAR) {\r\n    if (!this.hasXWaveform()) {\r\n      return false;\r\n    }\r\n\r\n    return this.xdata.getError(index, side, type);\r\n  }\r\n\r\n  getError(index, side = Waveform.ABOVE, type = Waveform.BAR) {\r\n    let errors = type == Waveform.BAR ? this.errors.bars : this.errors.boxes;\r\n\r\n    if (!errors) {\r\n      return false;\r\n    }\r\n\r\n    let wave;\r\n    if ((wave = side == Waveform.ABOVE ? errors.above : errors.below)) {\r\n      /*console.log( wave );\r\n            if ( wave == Waveform.ABOVE && side == Waveform.BELOW ) {\r\n              wave = errors.above;\r\n            } else if ( wave == Waveform.BELOW && side == Waveform.ABOVE ) {\r\n              wave = errors.below;\r\n            }\r\n      */\r\n      /*\r\n            if ( !wave ) {\r\n              return false;\r\n            }\r\n      */\r\n      return wave.getY(index);\r\n    }\r\n  }\r\n\r\n  hasErrorBars() {\r\n    return (\r\n      this.errors.nb > 0 || (this.hasXWaveform() && this.xdata.errors.nb > 0)\r\n    );\r\n  }\r\n}\r\n\r\nWaveform.BELOW = Symbol();\r\nWaveform.ABOVE = Symbol();\r\n\r\nWaveform.BOX = Symbol();\r\nWaveform.BAR = Symbol();\r\n\r\nconst MULTIPLY = Symbol();\r\nconst ADD = Symbol();\r\nconst SUBTRACT = Symbol();\r\nconst DIVIDE = Symbol();\r\n\r\n// http://stackoverflow.com/questions/26965171/fast-nearest-power-of-2-in-javascript\r\nfunction pow2ceil(v) {\r\n  v--;\r\n  var p = 2;\r\n  while ((v >>= 1)) {\r\n    p <<= 1;\r\n  }\r\n  return p;\r\n}\r\n\r\nfunction pow2floor(v) {\r\n  var p = 1;\r\n  while ((v >>= 1)) {\r\n    p <<= 1;\r\n  }\r\n  return p;\r\n}\r\n\r\nfunction getIndexInterpolate(\r\n  value,\r\n  valueBefore,\r\n  valueAfter,\r\n  indexBefore,\r\n  indexAfter\r\n) {\r\n  return (\r\n    ((value - valueBefore) / (valueAfter - valueBefore)) *\r\n    (indexAfter - indexBefore) +\r\n    indexBefore\r\n  );\r\n}\r\n\r\n/**\r\n * @private\r\n * Performs a euclidian search (as opposed to a binary search where the data must be monotoneously increasing and where the search is only in x). This is useful to find the closest point to a position (for example the one of the mouse) for any kind of data.\r\n * The scaleX and scaleY parameters could be used to skew the search. For example, let's say that you want to search the closest point in pixel, and not in value, you would need to reflect the different axes scaling into the scaleX and scaleY parameter\r\n *\r\n * @param {number} targetX The x position we want to get close to\r\n * @param {number} targetY The y position we want to get close to\r\n * @param {array<number>} haystackX The source data (array of x's)\r\n * @param {array<number>} haystackY The source data (array of y's) (paired by index to the x array)\r\n * @param {number} [ scaleX = 1 ] X-scaler (the higher, the more importance given to the x distance)\r\n * @param {number} [ scaleY = 1 ] Y-scaler (the higher, the more importance given to the y distance)\r\n * @returns The index of the closest point\r\n */\r\nfunction euclidianSearch(\r\n  targetX,\r\n  targetY,\r\n  haystackX,\r\n  haystackY,\r\n  scaleX = 1,\r\n  scaleY = 1\r\n) {\r\n  let distance = Number.MAX_VALUE,\r\n    distance_i;\r\n\r\n  let index = -1;\r\n\r\n  if (targetX !== undefined && targetY == undefined) {\r\n\r\n    for (var i = 0, l = haystackX.length; i < l; i++) {\r\n      distance_i = Math.abs((targetX - haystackX[i]) * scaleX);\r\n      if (distance_i < distance) {\r\n        index = i;\r\n        distance = distance_i;\r\n      }\r\n    }\r\n\r\n  } else if (targetX == undefined && targetY !== undefined) {\r\n\r\n    for (var i = 0, l = haystackY.length; i < l; i++) {\r\n      distance_i = Math.abs((targetY - haystackY[i]) * scaleY);\r\n      if (distance_i < distance) {\r\n        index = i;\r\n        distance = distance_i;\r\n      }\r\n    }\r\n\r\n  } else {\r\n\r\n    for (var i = 0, l = haystackX.length; i < l; i++) {\r\n      distance_i =\r\n        ((targetX - haystackX[i]) * scaleX) ** 2 +\r\n        ((targetY - haystackY[i]) * scaleY) ** 2;\r\n\r\n      if (distance_i < distance) {\r\n        index = i;\r\n        distance = distance_i;\r\n      }\r\n    }\r\n  }\r\n\r\n  return index;\r\n}\r\n\r\nfunction binarySearch(\r\n  target,\r\n  haystack,\r\n  reverse = haystack[haystack.length - 1] < haystack[0],\r\n  fineCheck = true\r\n) {\r\n  let seedA = 0,\r\n    length = haystack.length,\r\n    seedB = length - 1,\r\n    seedInt,\r\n    i = 0,\r\n    nanDirection = 1;\r\n\r\n  if (\r\n    (!reverse && (haystack[0] > target || haystack[seedB] < target)) ||\r\n    (reverse && (haystack[0] < target || haystack[seedB] > target))\r\n  ) {\r\n    throw new Error(`Target ${target} is not in the stack`);\r\n  }\r\n\r\n  if (haystack[seedA] == target) {\r\n    return seedA;\r\n  }\r\n\r\n  if (haystack[seedB] == target) {\r\n    return seedB;\r\n  }\r\n\r\n  while (true) {\r\n    i++;\r\n    if (i > 1000) {\r\n      throw new Error('Error loop');\r\n    }\r\n\r\n    seedInt = Math.floor((seedA + seedB) / 2);\r\n\r\n    //  seedInt -= seedInt % 2; // Always looks for an x.\r\n\r\n    while (isNaN(haystack[seedInt])) {\r\n      if (seedInt >= haystack.length - 1) {\r\n        return haystack.length - 1;\r\n      } else if (seedInt <= 0) {\r\n        return 0;\r\n      }\r\n\r\n      seedInt += nanDirection;\r\n    }\r\n\r\n    if (haystack[seedInt] == target) {\r\n      return seedInt;\r\n    }\r\n\r\n    if (seedInt == seedA || seedInt == seedB) {\r\n      if (!fineCheck) {\r\n        return seedInt;\r\n      }\r\n\r\n      if (\r\n        Math.abs(target - haystack[seedA]) < Math.abs(target - haystack[seedB])\r\n      ) {\r\n        return seedA;\r\n      }\r\n\r\n      return seedB;\r\n    }\r\n\r\n    //    console.log(seedA, seedB, seedInt, haystack[seedInt]);\r\n    if (haystack[seedInt] < target) {\r\n      if (reverse) {\r\n        seedB = seedInt;\r\n      } else {\r\n        seedA = seedInt;\r\n      }\r\n    } else if (haystack[seedInt] > target) {\r\n      if (reverse) {\r\n        seedA = seedInt;\r\n      } else {\r\n        seedB = seedInt;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n    nanDirection *= -1;\r\n  }\r\n}\r\n\r\n// Stores key: value\r\nclass WaveformHash extends Waveform {\r\n  hasXWaveform() {\r\n    return false;\r\n  }\r\n\r\n  setXWaveform(data) {\r\n    this.xdata = data;\r\n  }\r\n\r\n  getYFromX(xValue) {\r\n    const index = this.xdata.indexOf(xValue);\r\n    if (index == -1) {\r\n      throw `Cannot find key ${xValue}`;\r\n    }\r\n\r\n    return this.data[index];\r\n  }\r\n\r\n  getY(index) {\r\n    return this.data[index];\r\n  }\r\n\r\n  getX(index) {\r\n    return this.xdata[index];\r\n  }\r\n\r\n  hasXUnit() {\r\n    return false;\r\n  }\r\n\r\n  errorNotImplemented() {\r\n    console.trace();\r\n    throw 'Not available in hash waveform';\r\n  }\r\n\r\n  subrangeX() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  duplicate() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  aggregate() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  _waveArithmetic() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  interpolateIndex_X(index) {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  getXMonotoneousAscending() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  isXMonotoneousAscending() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  interpolate() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  resampleForDisplay() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  isXMonotoneous() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  rescaleX() {\r\n    this.errorNotImplemented();\r\n  }\r\n\r\n  getXMin() {\r\n    return undefined;\r\n  }\r\n\r\n  getXMax() {\r\n    return undefined;\r\n  }\r\n\r\n  computeXMinMax() { }\r\n\r\n  setData(data) {\r\n    this.data = Object.values(data);\r\n    this.xdata = Object.keys(data);\r\n\r\n    this._setData();\r\n  }\r\n\r\n  _setData() {\r\n    this.minY = Math.min(...this.data);\r\n    this.maxY = Math.max(...this.data);\r\n\r\n    this.checkMinMaxErrorBars();\r\n  }\r\n}\r\n\r\nfunction dist2(v, w) {\r\n  return (v.x - w.x) ** 2 + (v.y - w.y) ** 2;\r\n}\r\n\r\nfunction distToSegmentSquared(p, v, w) {\r\n  var l2 = dist2(v, w);\r\n  if (l2 == 0) return dist2(p, v);\r\n  var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;\r\n  t = Math.max(0, Math.min(1, t));\r\n  return dist2(p, {\r\n    x: v.x + t * (w.x - v.x),\r\n    y: v.y + t * (w.y - v.y)\r\n  });\r\n}\r\n\r\nfunction distToSegment(p, v, w) {\r\n  return distToSegmentSquared(p, v, w) ** 0.5;\r\n}\r\n\r\nexport {\r\n  Waveform,\r\n  WaveformHash\r\n};","import GraphPosition from './graph.position.js';\r\nimport * as util from './graph.util.js';\r\nimport GraphJSON from './renderer/mixin.js';\r\nimport EventMixin from './mixins/graph.mixin.event.js';\r\nimport {\r\n  Waveform,\r\n  WaveformHash\r\n} from './util/waveform.js';\r\n\r\n/**\r\n * Default graph parameters\r\n * @name Graph~GraphOptionsDefault\r\n * @name GraphOptions\r\n * @object\r\n * @static\r\n * @memberof Graph\r\n * @prop {String} title - Title of the graph\r\n * @prop {Number} paddingTop - The top padding\r\n * @prop {Number} paddingLeft - The left padding\r\n * @prop {Number} paddingRight - The right padding\r\n * @prop {Number} paddingBottom - The bottom padding\r\n * @prop {(Number|Boolean)} padding - A common padding value for top, bottom, left and right\r\n * @prop {Number} fontSize - The basic text size of the graphs\r\n * @prop {Number} fontFamily - The basic font family. Should be installed on the computer of the user\r\n * @prop {Object.<String,Object>} plugins - A list of plugins to import with their options\r\n * @prop {Object.<String,Object>} pluginAction - The default key combination to access those actions\r\n * @prop {Object.<String,Object>} mouseActions - Alias of pluginActions\r\n * @prop {Object.<String,Object>} keyActions - Defines what happens when keys are pressed\r\n * @prop {Object} wheel - Define the mouse wheel action\r\n * @prop {Object} dblclick - Define the double click action\r\n * @prop {Boolean} shapesUniqueSelection - true to allow only one shape to be selected at the time\r\n * @prop {Boolean} shapesUnselectOnClick - true to unselect all shapes on click\r\n */\r\nconst GraphOptionsDefault = {\r\n  title: '',\r\n\r\n  paddingTop: 30,\r\n  paddingBottom: 5,\r\n  paddingLeft: 20,\r\n  paddingRight: 20,\r\n\r\n  close: {\r\n    left: true,\r\n    right: true,\r\n    top: true,\r\n    bottom: true\r\n  },\r\n\r\n  closeColor: 'black',\r\n\r\n  fontSize: 12,\r\n  fontFamily: 'Myriad Pro, Helvetica, Arial',\r\n\r\n  plugins: {},\r\n  pluginAction: {},\r\n  mouseActions: [],\r\n  keyActions: [],\r\n  wheel: {},\r\n  dblclick: {},\r\n\r\n  shapesUnselectOnClick: true,\r\n  shapesUniqueSelection: true\r\n};\r\n\r\nvar _constructors = new Map();\r\n\r\n/**\r\n * Entry class of jsGraph that creates a new graph.\r\n * @tutorial basic\r\n */\r\nclass Graph {\r\n  /**\r\n   * Graph constructor\r\n   * @param {(HTMLElement|String)} [wrapper ] - The DOM Wrapper element its ```id``` property. If you do not use the wrapper during the graph creation, use it with the @link{Graph.setWrapper} method\r\n   * @param {GraphOptions} [ options ] - The options of the graph\r\n   * @param {Object} [ axis ] - The list of axes\r\n   * @param {Array} axis.left - The list of left axes\r\n   * @param {Array} axis.bottom - The list of bottom axes\r\n   * @param {Array} axis.top - The list of top axes\r\n   * @param {Array} axis.right - The list of right axes\r\n   * @example var graph = new Graph(\"someDomID\");\r\n   * @example var graph = new Graph(\"someOtherDomID\", { title: 'Graph title', paddingRight: 100 } );\r\n   */\r\n  constructor(wrapper, options, axes = undefined) {\r\n\r\n    if (wrapper === Object(wrapper) && !(wrapper instanceof HTMLElement)) {\r\n      // Wrapper is options\r\n      options = wrapper;\r\n      wrapper = undefined;\r\n    }\r\n\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    if (!options.axes) {\r\n      options.axes = axes;\r\n    }\r\n\r\n    /*\r\n      The unique ID of the graph\r\n      @name Graph#uniqueid\r\n      @type String\r\n    */\r\n    this._creation = util.guid();\r\n    this._drawn = false;\r\n\r\n    /**\r\n     * @object\r\n     * @memberof Graph\r\n     * @name Graph#options\r\n     * @type GraphOptions\r\n     * @default {@link GraphOptionsDefault}\r\n     * Access directly the options of the graph using this public object.\r\n     * @example graph.options.mouseActions.push( {  } );\r\n     */\r\n    this.options = util.extend({}, GraphOptionsDefault, options);\r\n    // Options declaration must be placed before the doDom operation\r\n\r\n    // doDom is a private method. We bind it to this thanks to ES6 features\r\n    __createDOM.bind(this)();\r\n\r\n    if (wrapper) {\r\n      this.setWrapper(wrapper);\r\n    }\r\n\r\n    this.prevented = false;\r\n\r\n    this.axis = {\r\n      left: [],\r\n      top: [],\r\n      bottom: [],\r\n      right: []\r\n    };\r\n\r\n    this.shapes = [];\r\n    this.shapesLocked = false;\r\n    this.plugins = {};\r\n\r\n    for (var i in this.options.pluginAction) {\r\n      this.options.pluginAction.plugin = i;\r\n      this.options.mouseActions.push(this.options.pluginAction);\r\n    }\r\n\r\n    this.selectedShapes = [];\r\n\r\n    this.series = [];\r\n    //this._dom = wrapper;\r\n    this._axesHaveChanged = true;\r\n\r\n    if (\r\n      this.options.hasOwnProperty('padding') &&\r\n      util.isNumeric(this.options.padding)\r\n    ) {\r\n      this.options.paddingTop = this.options.paddingBottom = this.options.paddingLeft = this.options.paddingRight = this.options.padding;\r\n    }\r\n\r\n    this.currentAction = false;\r\n\r\n    this.ns = Graph.ns;\r\n    this.nsxlink = Graph.nsxlink;\r\n\r\n    // Load all axes\r\n    if (options.axes) {\r\n      for (var i in options.axes) {\r\n        for (var j = 0, l = options.axes[i].length; j < l; j++) {\r\n          switch (i) {\r\n            case 'top':\r\n              this.getTopAxis(j, options.axes[i][j]);\r\n              break;\r\n            case 'left':\r\n              this.getLeftAxis(j, options.axes[i][j]);\r\n              break;\r\n            case 'right':\r\n              this.getRightAxis(j, options.axes[i][j]);\r\n              break;\r\n            case 'bottom':\r\n              this.getBottomAxis(j, options.axes[i][j]);\r\n              break;\r\n\r\n            default:\r\n              // Do not do anything\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this._pluginsInit();\r\n  }\r\n\r\n  setWrapper(wrapper) {\r\n\r\n    if (typeof wrapper == 'string') {\r\n      wrapper = document.getElementById(wrapper);\r\n    } else if (typeof wrapper.length == 'number') {\r\n      wrapper = wrapper[0];\r\n    }\r\n\r\n    if (!wrapper) {\r\n      throw new Error('The wrapper DOM element was not found.');\r\n    }\r\n\r\n    if (!wrapper.appendChild) {\r\n      throw new Error('The wrapper appears to be an invalid HTMLElement');\r\n    }\r\n\r\n    wrapper.style['-webkit-user-select'] = 'none';\r\n    wrapper.style['-moz-user-select'] = 'none';\r\n    wrapper.style['-o-user-select'] = 'none';\r\n    wrapper.style['-ms-user-select'] = 'none';\r\n    wrapper.style['user-select'] = 'none';\r\n\r\n    wrapper.style.position = 'relative';\r\n    wrapper.style.outline = 'none';\r\n\r\n    // Why would that be necessary ?\r\n    // wrapper.setAttribute( 'tabindex', 1 );\r\n\r\n    this.wrapper = wrapper;\r\n\r\n    // DOM\r\n\r\n    if (!this.height || !this.width) {\r\n      var wrapperStyle = getComputedStyle(wrapper);\r\n      var w = parseInt(wrapperStyle.width, 10);\r\n      var h = parseInt(wrapperStyle.height, 10);\r\n      this.setSize(w, h);\r\n      this._resize();\r\n    }\r\n\r\n    wrapper.appendChild(this.dom);\r\n\r\n    _registerEvents(this);\r\n  }\r\n  /**\r\n   * Returns the graph SVG wrapper element\r\n   * @public\r\n   * @return {SVGElement} The DOM element wrapping the graph\r\n   */\r\n  getDom() {\r\n    return this.dom;\r\n  }\r\n\r\n  /**\r\n   * Returns the unique id representing the graph\r\n   * @public\r\n   * @return {String} The unique ID of the graph\r\n   */\r\n  getId() {\r\n    return this._creation;\r\n  }\r\n\r\n  /**\r\n   * Returns the graph wrapper element passed during the graph creation\r\n   * @public\r\n   * @return {HTMLElement} The DOM element wrapping the graph\r\n   */\r\n  getWrapper() {\r\n    return this.wrapper;\r\n  }\r\n\r\n  /**\r\n   * Sets an option of the graph\r\n   * @param {String} name - Option name\r\n   * @param value - New option value\r\n   * @returns {Graph} - Graph instance\r\n   */\r\n  setOption(name, val) {\r\n    this.options[name] = val;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Sets the title of the graph\r\n   */\r\n  setTitle(title) {\r\n    this.options.title = title;\r\n    this.domTitle.textContent = title;\r\n  }\r\n\r\n  setTitleFontSize(fontSize) {\r\n    this.domTitle.setAttribute('font-size', fontSize);\r\n  }\r\n\r\n  setTitleFontColor(fontColor) {\r\n    this.domTitle.setAttribute('fill', fontColor);\r\n  }\r\n\r\n  setTitleFontFamily(fontColor) {\r\n    this.domTitle.setAttribute('font-family', fontColor);\r\n  }\r\n\r\n  /**\r\n   *  Shows the title of the graph\r\n   */\r\n  displayTitle() {\r\n    this.domTitle.setAttribute('display', 'inline');\r\n  }\r\n\r\n  /**\r\n   *  Hides the title of the graph\r\n   */\r\n  hideTitle() {\r\n    this.domTitle.setAttribute('display', 'none');\r\n  }\r\n\r\n  hide() {\r\n    if (this.dom.style.display !== 'none') {\r\n      this.dom.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  show() {\r\n    if (this.dom.style.display == 'none') {\r\n      this.dom.style.display = 'initial';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls a repaint of the container. Used internally when zooming on the graph, or when <code>.autoscaleAxes()</code> is called (see {@link Graph#autoscaleAxes}).<br />\r\n   * To be called after axes min/max are expected to have changed (e.g. after an <code>axis.zoom( from, to )</code>) has been called\r\n   * @param {Boolean} onlyIfAxesHaveChanged - Triggers a redraw only if min/max values of the axes have changed.\r\n   * @return {Boolean} if the redraw has been successful\r\n   */\r\n  redraw(onlyIfAxesHaveChanged, force) {\r\n    if (!this.width || !this.height) {\r\n      return;\r\n    }\r\n\r\n\r\n    if (!this.sizeSet) {\r\n      this._resize();\r\n      this.executeRedrawSlaves();\r\n      return true;\r\n    } else {\r\n      if (\r\n        !onlyIfAxesHaveChanged ||\r\n        force ||\r\n        haveAxesChanged(this) ||\r\n        hasSizeChanged(this)\r\n      ) {\r\n        this.executeRedrawSlaves();\r\n        refreshDrawingZone(this);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    this.executeRedrawSlaves(true);\r\n    return false;\r\n  }\r\n\r\n  executeRedrawSlaves() {\r\n    this._pluginsExecute('preDraw');\r\n  }\r\n\r\n  /**\r\n   * Draw the graph and the series. This method will only redraw what is necessary. You may trust its use when you have set new data to series, changed serie styles or called for a zoom on an axis.\r\n   */\r\n  draw(force) {\r\n    this.drawn = true;\r\n    this.updateLegend(true);\r\n    this.drawSeries(this.redraw(true, force));\r\n\r\n    this._pluginsExecute('postDraw');\r\n  }\r\n\r\n  /**\r\n   *  Prevents the graph, the series and the legend from redrawing automatically. Valid until {@link Graph#resumeUpdate} is called\r\n   *  @memberof Graph\r\n   *  @return {Graph} The current graph instance\r\n   *  @see {@link Graph#resumeUpdate}\r\n   *  @see {@link Graph#doUpdate}\r\n   *  @since 1.16.19\r\n   */\r\n  delayUpdate() {\r\n    this._lockUpdate = true;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Forces legend and graph update, even is {@link Graph#delayUpdate} has been called before.\r\n   *  @memberof Graph\r\n   *  @return {Graph} The current graph instance\r\n   *  @see {@link Graph#delayUpdate}\r\n   *  @see {@link Graph#resumeUpdate}\r\n   *  @since 1.16.19\r\n   */\r\n  doUpdate() {\r\n    if (this.legend) {\r\n      this.legend.update();\r\n    }\r\n    this.draw();\r\n    if (this.legend) {\r\n      this.legend.update();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Cancels the effect of {@link Graph#delayUpdate}, but does not redraw the graph automatically\r\n   *  @memberof Graph\r\n   *  @return {Graph} The current graph instance\r\n   *  @see {@link Graph#delayUpdate}\r\n   *  @see {@link Graph#doUpdate}\r\n   *  @since 1.16.19\r\n   */\r\n  resumeUpdate() {\r\n    this._lockUpdate = false;\r\n    return this;\r\n  }\r\n\r\n  isDelayedUpdate() {\r\n    return this._lockUpdate;\r\n  }\r\n\r\n  /**\r\n   * Sets the total width of the graph\r\n   * @param {Number} width - The new width of the graph\r\n   * @param {Boolean} skipResize - <code>true</code> to defer graph repaint. Use {@link Graph#resize} to force repain later on. (Useful if many graph sizing operations are done successively)\r\n   * @see Graph#setHeight\r\n   * @see Graph#resize\r\n   */\r\n  setWidth(width, skipResize) {\r\n    this.width = width;\r\n    if (!skipResize) {\r\n      this._resize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the total height of the graph\r\n   * @param {Number} height - The new height of the graph\r\n   * @param {Boolean} skipResize - <code>true</code> to defer graph repaint. Use {@link Graph#resize} to force repain later on. (Useful if many graph sizing operations are done successively)\r\n   * @see Graph#setWidth\r\n   * @see Graph#resize\r\n   */\r\n  setHeight(height, skipResize) {\r\n    this.height = height;\r\n    if (!skipResize) {\r\n      this._resize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the new dimension of the graph and repaints it. If width and height are omitted, a simple refresh is done.\r\n   * @param {Number} [ width ] - The new width of the graph\r\n   * @param {Number} [ height ] - The new height of the graph\r\n   * @see Graph#setWidth\r\n   * @see Graph#setHeight\r\n   * @return {Graph} The current graph\r\n   */\r\n  resize(w, h) {\r\n    if (w && h) {\r\n      this.setSize(w, h);\r\n    }\r\n\r\n    this._resize();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the new dimension of the graph without repainting it. Use {@link Graph#resize} to perform the actual resizing of the graph.\r\n   * @param {Number} [ width ] - The new width of the graph\r\n   * @param {Number} [ height ] - The new height of the graph\r\n   * @see Graph#setWidth\r\n   * @see Graph#setHeight\r\n   * @see Graph#resize\r\n   */\r\n  setSize(w, h) {\r\n    this.setWidth(w, true);\r\n    this.setHeight(h, true);\r\n    this.getDrawingHeight();\r\n    this.getDrawingWidth();\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the graph (set by setSize, setWidth or resize methods)\r\n   * @return {Number} Width of the graph\r\n   */\r\n  getWidth() {\r\n    return this.width;\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the graph (set by setSize, setHeight or resize methods)\r\n   * @return {Number} Height of the graph\r\n   */\r\n  getHeight() {\r\n    return this.height;\r\n  }\r\n\r\n  /**\r\n   * Returns the top padding of the graph (space between the top of the svg container and the topmost axis)\r\n   * @return {Number} paddingTop\r\n   */\r\n  getPaddingTop() {\r\n    return this.options.paddingTop;\r\n  }\r\n\r\n  /**\r\n   * Returns the left padding of the graph (space between the left of the svg container and the leftmost axis)\r\n   * @return {Number} paddingTop\r\n   */\r\n  getPaddingLeft() {\r\n    return this.options.paddingLeft;\r\n  }\r\n\r\n  /**\r\n   * Returns the bottom padding of the graph (space between the bottom of the svg container and the bottommost axis)\r\n   * @return {Number} paddingTop\r\n   */\r\n  getPaddingBottom() {\r\n    return this.options.paddingBottom;\r\n  }\r\n\r\n  /**\r\n   * Returns the right padding of the graph (space between the right of the svg container and the rightmost axis)\r\n   * @return {Number} paddingRight\r\n   */\r\n  getPaddingRight() {\r\n    return this.options.paddingRight;\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the drawable zone, including the space used by the axes\r\n   * @param {Boolean} useCache - Use cached value. Useful if one is sure the graph hasn't changed dimension. Automatically called after a Graph.resize();\r\n   * @returns {Number} Height of the graph\r\n   */\r\n  getDrawingHeight(useCache) {\r\n    if (useCache && this.innerHeight) {\r\n      return this.innerHeight;\r\n    }\r\n    return (this.innerHeight =\r\n      this.height - this.options.paddingTop - this.options.paddingBottom);\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the drawable zone, including the space used by the axes\r\n   * @param {Boolean} useCache - Use cached value. Useful if one is sure the graph hasn't changed dimension. Automatically called after a Graph.resize();\r\n   * @returns {Number} Width of the graph\r\n   */\r\n  getDrawingWidth(useCache) {\r\n    if (useCache && this.innerWidth) {\r\n      return this.innerWidth;\r\n    }\r\n    return (this.innerWidth =\r\n      this.width - this.options.paddingLeft - this.options.paddingRight);\r\n  }\r\n\r\n  /**\r\n   * Caches the wrapper offset in the page.<br />\r\n   * The position of the wrapper is used when processing most of mouse events and it is fetched via the jQuery function .offset().\r\n   * If performance becomes a critical issue in your application, <code>cacheOffset()</code> should be used to store the offset position. It should be ensured that the graph doesn't move in the page. If one can know when the graph has moved, <code>cacheOffset()</code> should be called again to update the offset position.\r\n   * @see Graph#uncacheOffset\r\n   */\r\n  cacheOffset() {\r\n    this.offsetCached = util.getOffset(this.wrapper);\r\n  }\r\n\r\n  /**\r\n   * Un-caches the wrapper offset value\r\n   * @see Graph#cacheOffset\r\n   */\r\n  uncacheOffset() {\r\n    this.offsetCached = false;\r\n  }\r\n\r\n  getNumAxes(position) {\r\n    return this.axis[position].length;\r\n  }\r\n\r\n  /**\r\n   * Returns the x axis at a certain index. If any top axis exists and no bottom axis exists, returns or creates a top axis. Otherwise, creates or returns a bottom axis\r\n   * Caution ! The <code>options</code> parameter will only be effective if an axis is created\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @param {Object} [ options={} ] - The options to pass to the axis constructor\r\n   */\r\n  getXAxis(index, options) {\r\n    if (this.axis.top.length > 0 && this.axis.bottom.length == 0) {\r\n      return this.getTopAxis(index, options);\r\n    }\r\n\r\n    return this.getBottomAxis(index, options);\r\n  }\r\n\r\n  /**\r\n   * Returns the y axis at a certain index. If any right axis exists and no left axis exists, returns or creates a right axis. Otherwise, creates or returns a left axis\r\n   * Caution ! The <code>options</code> parameter will only be effective if an axis is created\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @param {Object} [ options={} ] - The options to pass to the axis constructor\r\n   */\r\n  getYAxis(index, options) {\r\n    if (this.axis.right.length > 0 && this.axis.left.length == 0) {\r\n      return this.getRightAxis(index, options);\r\n    }\r\n\r\n    return this.getLeftAxis(index, options);\r\n  }\r\n\r\n  /**\r\n   * Returns the top axis at a certain index. Creates it if non-existant\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @param {Object} [ options={} ] - The options to pass to the axis constructor\r\n   */\r\n  getTopAxis(index, options) {\r\n    return _getAxis(this, index, options, 'top');\r\n  }\r\n\r\n  /**\r\n   * Returns the bottom axis at a certain index. Creates it if non-existant\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @param {Object} [ options={} ] - The options to pass to the axis constructor\r\n   */\r\n  getBottomAxis(index, options) {\r\n    return _getAxis(this, index, options, 'bottom');\r\n  }\r\n\r\n  /**\r\n   * Returns the left axis at a certain index. Creates it if non-existant\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @param {Object} [ options={} ] - The options to pass to the axis constructor\r\n   */\r\n  getLeftAxis(index, options) {\r\n    return _getAxis(this, index, options, 'left');\r\n  }\r\n\r\n  /**\r\n   * Returns the right axis at a certain index. Creates it if non-existant\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @param {Object} [ options={} ] - The options to pass to the axis constructor\r\n   */\r\n  getRightAxis(index, options) {\r\n    return _getAxis(this, index, options, 'right');\r\n  }\r\n\r\n  /**\r\n   * Sets a bottom axis\r\n   * @param {Axis} axis - The axis instance to set\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   */\r\n  setXAxis(axis, index) {\r\n    this.setBottomAxis(axis, index);\r\n  }\r\n\r\n  /**\r\n   * Sets a left axis\r\n   * @param {Axis} axis - The axis instance to set\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   */\r\n  setYAxis(axis, index) {\r\n    this.setLeftAxis(axis, index);\r\n  }\r\n\r\n  /**\r\n   * Sets a left axis\r\n   * @param {Axis} axis - The axis instance to set\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @see Graph#setBottomAxis\r\n   * @see Graph#setTopAxis\r\n   * @see Graph#setRightAxis\r\n   * @see Graph#getLeftAxis\r\n   * @see Graph#getYAxis\r\n   */\r\n  setLeftAxis(axis, index) {\r\n    index = index || 0;\r\n\r\n    if (this.axis.left[index]) {\r\n      this.axis.left[index].kill();\r\n    }\r\n    this.axis.left[index] = axis;\r\n  }\r\n\r\n  /**\r\n   * Sets a right axis\r\n   * @param {Axis} axis - The axis instance to set\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @see Graph#setBottomAxis\r\n   * @see Graph#setLeftAxis\r\n   * @see Graph#setTopAxis\r\n   * @see Graph#getRightAxis\r\n   * @see Graph#getYAxis\r\n   */\r\n  setRightAxis(axis, index) {\r\n    index = index || 0;\r\n\r\n    if (this.axis.right[index]) {\r\n      this.axis.right[index].kill();\r\n    }\r\n    this.axis.right[index] = axis;\r\n  }\r\n\r\n  /**\r\n   * Sets a top axis\r\n   * @param {Axis} axis - The axis instance to set\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @see Graph#setBottomAxis\r\n   * @see Graph#setLeftAxis\r\n   * @see Graph#setRightAxis\r\n   * @see Graph#getBottomAxis\r\n   * @see Graph#getXAxis\r\n   */\r\n  setTopAxis(axis, index) {\r\n    index = index || 0;\r\n\r\n    if (this.axis.top[index]) {\r\n      this.axis.top[index].kill();\r\n    }\r\n    this.axis.top[index] = axis;\r\n  }\r\n\r\n  /**\r\n   * Sets a bottom axis\r\n   * @param {Axis} axis - The axis instance to set\r\n   * @param {Number} [ index=0 ] - The index of the axis\r\n   * @see Graph#setTopAxis\r\n   * @see Graph#setLeftAxis\r\n   * @see Graph#setRightAxis\r\n   * @see Graph#getTopAxis\r\n   * @see Graph#getXAxis\r\n   */\r\n  setBottomAxis(axis, index) {\r\n    index = index || 0;\r\n\r\n    if (this.axis.bottom[index]) {\r\n      this.axis.bottom[index].kill();\r\n    }\r\n    this.axis.bottom[index] = axis;\r\n  }\r\n\r\n  killAxis(axis, noRedraw = false, noSerieKill = false) {\r\n    var index;\r\n\r\n    if (axis.isX()) {\r\n      if ((index = this.axis.bottom.indexOf(axis)) > -1) {\r\n        this.axis.bottom.splice(index, 1);\r\n      }\r\n\r\n      if ((index = this.axis.top.indexOf(axis)) > -1) {\r\n        this.axis.top.splice(index, 1);\r\n      }\r\n\r\n      if (!noSerieKill) {\r\n        this.series.forEach((serie) => {\r\n          if (serie.getXAxis() == axis) {\r\n            serie.kill();\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    if (axis.isY()) {\r\n      if ((index = this.axis.left.indexOf(axis)) > -1) {\r\n        this.axis.left.splice(index, 1);\r\n      }\r\n\r\n      if ((index = this.axis.right.indexOf(axis)) > -1) {\r\n        this.axis.right.splice(index, 1);\r\n      }\r\n\r\n      if (!noSerieKill) {\r\n        this.series.forEach((serie) => {\r\n          if (serie.getYAxis() == axis) {\r\n            serie.kill();\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    this.axisGroup.removeChild(axis.group); // Removes all DOM\r\n    this.groupPrimaryGrids.removeChild(axis.gridPrimary);\r\n    this.groupSecondaryGrids.removeChild(axis.gridSecondary);\r\n\r\n    if (!noRedraw) {\r\n      this.draw(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines if an x axis belongs to the graph\r\n   * @param {Axis} axis - The axis instance to check\r\n   */\r\n  hasXAxis(axis) {\r\n    return this.hasTopAxis(axis) || this.hasBottomAxis(axis);\r\n  }\r\n\r\n  /**\r\n   * Determines if an x axis belongs to the graph\r\n   * @param {Axis} axis - The axis instance to check\r\n   */\r\n  hasYAxis(axis) {\r\n    return this.hasLeftAxis(axis) || this.hasRightAxis(axis);\r\n  }\r\n\r\n  /**\r\n   * Determines if an x axis belongs to top axes list of the graph\r\n   * @param {Axis} axis - The axis instance to check\r\n   */\r\n  hasTopAxis(axis) {\r\n    return this.hasAxis(axis, this.axis.top);\r\n  }\r\n\r\n  /**\r\n   * Determines if an x axis belongs to bottom axes list of the graph\r\n   * @param {Axis} axis - The axis instance to check\r\n   */\r\n  hasBottomAxis(axis) {\r\n    return this.hasAxis(axis, this.axis.bottom);\r\n  }\r\n\r\n  /**\r\n   * Determines if a y axis belongs to left axes list of the graph\r\n   * @param {Axis} axis - The axis instance to check\r\n   */\r\n  hasLeftAxis(axis) {\r\n    return this.hasAxis(axis, this.axis.left);\r\n  }\r\n\r\n  /**\r\n   * Determines if a y axis belongs to right axes list of the graph\r\n   * @param {Axis} axis - The axis instance to check\r\n   */\r\n  hasRightAxis(axis) {\r\n    return this.hasAxis(axis, this.axis.right);\r\n  }\r\n\r\n  /**\r\n   * Determines if an axis belongs to a list of axes\r\n   * @param {Axis} axis - The axis instance to check\r\n   * @param {Array} axisList - The list of axes to check\r\n   * @private\r\n   */\r\n  hasAxis(axis, axisList) {\r\n    for (var i = 0, l = axisList.length; i < l; i++) {\r\n      if (axisList[i] == axis) {\r\n        return true;\r\n      }\r\n\r\n      if (axisList[i].hasAxis(axis)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Autoscales the x and y axes of the graph.\r\n   * Does not repaint the canvas\r\n   * @return {Graph} The current graph instance\r\n   */\r\n  autoscaleAxes() {\r\n    this._applyToAxes('setMinMaxToFitSeries', null, true, true);\r\n\r\n    //this._applyToAxes( \"scaleToFitAxis\", [ this.getYAxis() ], false, true )\r\n    // X is not always ascending...\r\n    return this;\r\n  }\r\n\r\n  // See #138\r\n  /**\r\n   *  @alias Graph#autoscaleAxes\r\n   */\r\n  autoscale() {\r\n    return this.autoscaleAxes(...arguments);\r\n  }\r\n\r\n  // See #138\r\n  /**\r\n   *  @alias Graph#autoscaleAxes\r\n   */\r\n  autoScale() {\r\n    return this.autoscaleAxes(...arguments);\r\n  }\r\n\r\n  // See #138\r\n  /**\r\n   *  @alias Graph#autoscaleAxes\r\n   */\r\n  autoScaleAxes() {\r\n    return this.autoscaleAxes(...arguments);\r\n  }\r\n\r\n  // See #138\r\n  /**\r\n   *  Autoscales a particular axis\r\n   *  @param {Axis} The axis to rescale\r\n   *  @return {Graph} The current graph instance\r\n   */\r\n  autoScaleAxis(axis) {\r\n    if (!axis) {\r\n      return this;\r\n    }\r\n\r\n    axis.setMinMaxToFitSeries();\r\n    return this;\r\n  }\r\n\r\n  gridsOff() {\r\n    this._applyToAxes(\r\n      (axis) => {\r\n        axis.gridsOff();\r\n      },\r\n      undefined,\r\n      true,\r\n      true\r\n    );\r\n  }\r\n  gridsOn() {\r\n    this._applyToAxes(\r\n      (axis) => {\r\n        axis.gridsOn();\r\n      },\r\n      undefined,\r\n      true,\r\n      true\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the background color\r\n   * @param {String} color - An SVG accepted color for the background\r\n   * @return {Graph} The current graph instance\r\n   */\r\n  setBackgroundColor(color) {\r\n    this.rectEvent.setAttribute('fill', color);\r\n    return this;\r\n  }\r\n\r\n  getAxisState() {\r\n    var state = {};\r\n    for (var i in this.axis) {\r\n      state[i] = this.axis[i].map(function (axis) {\r\n        return [axis.getCurrentMin(), axis.getCurrentMax()];\r\n      });\r\n    }\r\n    return state;\r\n  }\r\n\r\n  setAxisState(state) {\r\n    var j, l;\r\n    for (var i in state) {\r\n      if (!this.axis[i]) {\r\n        continue;\r\n      }\r\n\r\n      for (j = 0, l = state[i].length; j < l; j++) {\r\n        if (!this.axis[i][j]) {\r\n          continue;\r\n        }\r\n\r\n        this.axis[i][j].setCurrentMin(state[i][j][0]);\r\n        this.axis[i][j].setCurrentMax(state[i][j][1]);\r\n      }\r\n    }\r\n\r\n    this.draw();\r\n  }\r\n\r\n  saveAxisState(savedName) {\r\n    this.savedAxisState = this.savedAxisState || {};\r\n    this.savedAxisState[savedName] = this.getAxisState();\r\n    return this;\r\n  }\r\n\r\n  recallAxisState(savedName) {\r\n    if (this.savedAxisState[savedName]) {\r\n      this.recallAxisState(this.savedAxisState[savedName]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  _applyToAxis(type) {\r\n    switch (type) {\r\n      case 'string':\r\n        return function (type, func, params) {\r\n          //    params.splice(1, 0, type);\r\n\r\n          for (var i = 0; i < this.axis[type].length; i++) {\r\n            this.axis[type][i][func].apply(this.axis[type][i], params);\r\n          }\r\n        };\r\n\r\n      case 'function':\r\n        return function (type, func, params) {\r\n          for (var i = 0; i < this.axis[type].length; i++) {\r\n            func.call(this, this.axis[type][i], type, params);\r\n          }\r\n        };\r\n\r\n      default:\r\n        throw new Error(\r\n          'You must either execute a function or provide a string that registers a function'\r\n        );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the minimal or maximal value of the axis. Currently, alias of getBoudaryAxisFromSeries\r\n   */\r\n  getBoundaryAxis(axis, minmax, usingZValues) {\r\n    var valSeries = this.getBoundaryAxisFromSeries(axis, minmax, usingZValues);\r\n    //  var valShapes = this.getBoundaryAxisFromShapes( axis, xy, minmax );\r\n\r\n    return valSeries;\r\n    //return Math[ minmax ]( valSeries, valShapes );\r\n  }\r\n\r\n  /**\r\n   * Calculates the minimal or maximal value of the axis, based on the series that belong to it. The value is computed so that all series just fit in the value.\r\n   * @memberof Graph.prototype\r\n   * @param {Axis} axis - The axis for which the value should be computed\r\n   * @param {minmax} minmax - The minimum or maximum to look for. \"min\" for the minimum, anything else for the maximum\r\n   * @returns {Number} The minimimum or maximum of the axis based on its series\r\n   */\r\n  getBoundaryAxisFromSeries(axis, minmax, usingZValues) {\r\n    var min = minmax == 'min',\r\n      val,\r\n      func = axis.isX() ? ['getMinX', 'getMaxX'] : ['getMinY', 'getMaxY'],\r\n      func2use = func[min ? 0 : 1],\r\n      infinity2use = min ? +Infinity : -Infinity,\r\n      serie,\r\n      series,\r\n      serieValue,\r\n      i,\r\n      l;\r\n\r\n    val = infinity2use;\r\n    series = this.getSeriesFromAxis(axis);\r\n\r\n    for (i = 0, l = series.length; i < l; i++) {\r\n      serie = series[i];\r\n\r\n      if (!serie.isShown()) {\r\n        continue;\r\n      }\r\n\r\n      serieValue = serie[func2use](usingZValues);\r\n      val = Math[minmax](\r\n        isNaN(val) ? infinity2use : val,\r\n        isNaN(serieValue) ? infinity2use : serieValue\r\n      );\r\n    }\r\n\r\n    return val;\r\n  }\r\n\r\n  /**\r\n   *  Returns all the series associated to an axis\r\n   *  @param {Axis} axis - The axis to which the series belong\r\n   *  @returns {Serie[]} An array containing the list of series that belong to the axis\r\n   */\r\n  getSeriesFromAxis(axis) {\r\n    var series = [],\r\n      i = this.series.length - 1;\r\n\r\n    for (; i >= 0; i--) {\r\n      if (\r\n        this.series[i].getXAxis() == axis ||\r\n        this.series[i].getYAxis() == axis\r\n      ) {\r\n        series.push(this.series[i]);\r\n      }\r\n    }\r\n\r\n    return series;\r\n  }\r\n\r\n  /**\r\n   * Determines the maximum and minimum of each axes, based on {@link Graph#getBoundaryAxis}. It is usually called internally, but if the data of series has changed, called this function to make sure that minimum / maximum of the axes are properly updated.\r\n   * @see Graph#getBoundaryAxis\r\n   */\r\n  updateDataMinMaxAxes(usingZValues) {\r\n    var axisvars = ['bottom', 'top', 'left', 'right'],\r\n      axis,\r\n      j,\r\n      l,\r\n      i;\r\n\r\n    for (j = 0, l = axisvars.length; j < l; j++) {\r\n      for (i = this.axis[axisvars[j]].length - 1; i >= 0; i--) {\r\n        axis = this.axis[axisvars[j]][i];\r\n\r\n        // 25.10.2017. Wait a second, this cannot be real. Even hidden axes must have min max values.\r\n        // The data can be displayed while the axis is hidden\r\n        // I assume this was added to cover another bug, but another approach must be chosen\r\n        if (!axis.isShown()) {\r\n          //          continue;\r\n        }\r\n\r\n        let min = this.getBoundaryAxis(\r\n          this.axis[axisvars[j]][i],\r\n          'min',\r\n          usingZValues\r\n        );\r\n        let max = this.getBoundaryAxis(\r\n          this.axis[axisvars[j]][i],\r\n          'max',\r\n          usingZValues\r\n        );\r\n\r\n        if (isFinite(max)) {\r\n          axis.setMaxValueData(max);\r\n        }\r\n        if (isFinite(min)) {\r\n          axis.setMinValueData(min);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function that is called from {@link Graph#_applyToAxes}\r\n   * @function\r\n   * @name AxisCallbackFunction\r\n   * @param {Axis} axis - The axis of the function\r\n   * @param {String} type - The type of the axis (left,right,top,bottom)\r\n   * @param params - The params passed in the _applyToAxis function.\r\n   * @see Graph#_applyToAxes\r\n   */\r\n\r\n  /**\r\n   * Applies a function to axes. The function will be executed once for every axis.\r\n   * If func is a string, the internal function belonging to <strong>the axis</strong> will be called, with the params array flattened out (in this case, params must be an array).\r\n   * If func is a function, the function will be called with the axis, its type and params as parameters. See {@link AxisCallbackFunction} for more details.\r\n   * @param {(AxisCallbackFunction|String)} func - The function or function name to execute\r\n   * @param params - Extra parameters to pass to the function\r\n   * @param {Boolean} topbottom=false - True to apply to function to top and bottom axes\r\n   * @param {Boolean} leftright=false - True to apply to function to left and right axes\r\n   */\r\n  _applyToAxes(func, params, tb = false, lr = false) {\r\n    var ax = [],\r\n      i = 0,\r\n      l;\r\n\r\n    if (tb || tb == undefined) {\r\n      ax.push('top');\r\n      ax.push('bottom');\r\n    }\r\n    if (lr || lr == undefined) {\r\n      ax.push('left');\r\n      ax.push('right');\r\n    }\r\n\r\n    for (l = ax.length; i < l; i++) {\r\n      this._applyToAxis(typeof func).call(this, ax[i], func, params);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Axes can be dependant of one another (for instance for unit conversions)\r\n   * Finds and returns all the axes that are linked to a specific axis. Mostly used internally.\r\n   * @param {Axis} axis - The axis that links one or multiple other dependant axes\r\n   * @returns {Axis[]} The list of axes linked to the axis passed as parameter\r\n   */\r\n  findAxesLinkedTo(axis) {\r\n    var axes = [];\r\n    this._applyToAxes(\r\n      function (a) {\r\n        if (a.linkedToAxis && a.linkedToAxis.axis == axis) {\r\n          axes.push(a);\r\n        }\r\n      }, {},\r\n      axis instanceof this.getConstructor('graph.axis.x'),\r\n      axis instanceof this.getConstructor('graph.axis.y')\r\n    );\r\n\r\n    return axes;\r\n  }\r\n\r\n  _axisHasChanged() {\r\n    this._axesHaveChanged = true;\r\n  }\r\n\r\n  /**\r\n   * Creates a new serie.\r\n   * If the a serie with the same name exists, returns this serie with update options.\r\n   * The type of the serie is used to fetch the corresponding registered constructor registered with the name \"graph.serie.<type>\", e.g \"line\" will fetch the \"graph.serie.line\" prototype (built-in)<br />\r\n   * Built-in series types are \"line\", \"contour\", \"zone\" and \"scatter\".\r\n   * @param {String} name - The name of the serie (unique)\r\n   * @param {Object} options - The serie options\r\n   * @param {Type} type - The type of the serie.\r\n   * @returns {Serie} The newly created serie\r\n   */\r\n  newSerie(name, options, type) {\r\n    let serie;\r\n\r\n    if (typeof options !== 'object' && !type) {\r\n      type = options;\r\n      options = {};\r\n    }\r\n\r\n    if (!type) {\r\n      type = Graph.SERIE_LINE;\r\n    }\r\n\r\n    if ((serie = this.getSerie(name))) {\r\n      return serie;\r\n    }\r\n\r\n    if (!(serie = makeSerie(this, name, options, type))) {\r\n      return;\r\n    }\r\n\r\n    this.series.push(serie);\r\n\r\n    serie.postInit();\r\n    this.emit('newSerie', serie);\r\n    return serie;\r\n  }\r\n\r\n  /**\r\n   * Looks for an existing serie by name or by index and returns it.\r\n   * The index of the serie follows the creation sequence (0 for the first one, 1 for the second one, ...)\r\n   * @param {(String|Number)} name - The name or the index of the serie\r\n   * @returns {Serie}\r\n   */\r\n  getSerie(name) {\r\n    if (typeof name == 'number') {\r\n      return this.series[name] || false;\r\n    }\r\n\r\n    if (typeof name == 'function') {\r\n      name = name();\r\n    }\r\n\r\n    var i = 0,\r\n      l = this.series.length;\r\n\r\n    for (; i < l; i++) {\r\n      if (this.series[i].getName() == name || this.series[i] == name) {\r\n        return this.series[i];\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns all the series\r\n   * @returns {Serie[]} An array of all the series\r\n   */\r\n  getSeries() {\r\n    return this.series;\r\n  }\r\n\r\n  /**\r\n   * Returns all the series that correspond to one or multiple types\r\n   * @param {...Symbol} type - The serie types to select\r\n   * @returns {Serie[]} An array of all the series\r\n   * @example graph.allSeries( Graph.SERIE_LINE, Graph.SERIE_ZONE );\r\n   */\r\n  allSeries(...types) {\r\n    return this.series.filter((serie) => {\r\n      return types.include(serie.getType());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sorts the series\r\n   * @param {function} method - Sorting method (arguments: serieA, serieB)\r\n   * @example graph.sortSeries( ( sA, sB ) => sA.label > sB.label ? 1 : -1 );\r\n   */\r\n  sortSeries(method) {\r\n    if (typeof method !== 'function') {\r\n      return this;\r\n    }\r\n\r\n    this.series.sort(method);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Draws a specific serie\r\n   * @param {Serie} serie - The serie to redraw\r\n   * @param {Boolean} force - Forces redraw even if no data has changed\r\n   */\r\n  drawSerie(serie, force) {\r\n    if (!serie.draw) {\r\n      throw new Error('Serie has no method draw');\r\n    }\r\n\r\n    serie.draw(force);\r\n  }\r\n\r\n  /**\r\n   * Redraws all visible series\r\n   * @param {Boolean} force - Forces redraw even if no data has changed\r\n   */\r\n  drawSeries(force) {\r\n    if (!this.width || !this.height) {\r\n      return;\r\n    }\r\n\r\n    var i = this.series.length - 1;\r\n    for (; i >= 0; i--) {\r\n      if (this.series[i].isShown()) {\r\n        this.drawSerie(this.series[i], force);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @alias Graph#removeSeries\r\n   */\r\n  resetSeries() {\r\n    this.removeSeries();\r\n  }\r\n\r\n  /**\r\n   * @alias Graph#removeSeries\r\n   */\r\n\r\n  killSeries() {\r\n    this.resetSeries();\r\n  }\r\n\r\n  killLegend() {\r\n    if (this.legend) {\r\n      this.legend.kill();\r\n    }\r\n    this.legend = undefined;\r\n  }\r\n\r\n  killShapes() {\r\n    this.shapes.forEach((shape) => {\r\n      shape.kill(false);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes all series from the graph\r\n   */\r\n  removeSeries() {\r\n    while (this.series[0]) {\r\n      this.series[0].kill(true);\r\n    }\r\n    this.series = [];\r\n\r\n    if (this.legend) {\r\n      this.legend.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects a serie. Only one serie per graph can be selected.\r\n   * @param {Serie} serie - The serie to select\r\n   * @param {String} selectName=\"selected\" - The name of the selection\r\n   */\r\n  selectSerie(serie, selectName) {\r\n    if (!(typeof serie == 'object')) {\r\n      serie = this.getSerie(serie);\r\n    }\r\n\r\n    if (\r\n      this.selectedSerie == serie &&\r\n      this.selectedSerie.selectionType == selectName\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (this.selectedSerie !== serie && this.selectedSerie) {\r\n      this.unselectSerie(this.selectedSerie);\r\n    }\r\n\r\n    this.selectedSerie = serie;\r\n    this.triggerEvent('onSelectSerie', serie);\r\n\r\n    serie.select(selectName || 'selected');\r\n  }\r\n\r\n  /**\r\n   * Returns the selected serie\r\n   * @returns {(Serie|undefined)} The selected serie\r\n   */\r\n  getSelectedSerie() {\r\n    return this.selectedSerie;\r\n  }\r\n\r\n  /**\r\n   * Unselects a serie\r\n   * @param {Serie} serie - The serie to unselect\r\n   */\r\n  unselectSerie(serie) {\r\n    if (!serie.unselect) {\r\n      return;\r\n    }\r\n\r\n    serie.unselect();\r\n    this.selectedSerie = false;\r\n    this.triggerEvent('onUnselectSerie', serie);\r\n  }\r\n\r\n  /**\r\n   * Returns all the shapes associated to a serie. Shapes can (but don't have to) be associated to a serie. The position of the shape can then be relative to the same axes as the serie.\r\n   * @param {Serie} serie - The serie containing the shapes\r\n   * @returns {Shape[]} An array containing a list of shapes associated to the serie\r\n   */\r\n  getShapesOfSerie(serie) {\r\n    var shapes = [];\r\n    var i = this.shapes.length - 1;\r\n\r\n    for (; i >= 0; i--) {\r\n      if (this.shapes[i].getSerie() == serie) {\r\n        shapes.push(this.shapes[i]);\r\n      }\r\n    }\r\n\r\n    return shapes;\r\n  }\r\n  makeToolbar(toolbarData) {\r\n    var constructor = this.getConstructor('graph.toolbar');\r\n    if (constructor) {\r\n      return (this.toolbar = new constructor(this, toolbarData));\r\n    } else {\r\n      return util.throwError('No constructor exists for toolbar');\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Returns all shapes from the graph\r\n   */\r\n  getShapes() {\r\n    return this.shapes || [];\r\n  }\r\n\r\n  /**\r\n   * Creates a new shape. jsGraph will look for the registered constructor \"graph.shape.<shapeType>\".\r\n   * @param {String} shapeType - The type of the shape\r\n   * @param {Object} [shapeData] - The options passed to the shape creator\r\n   * @param {Boolean} [mute=false] - <code>true</code> to create the shape quietly\r\n   * @param {Object} [shapeProperties] - The native object containing the shape properties in the jsGraph format (caution when using it)\r\n   * @returns {Shape} The created shape\r\n   * @see Graph#getConstructor\r\n   */\r\n  newShape(shapeType, shapeData, mute = false, shapeProperties) {\r\n    this.prevent(false);\r\n\r\n    if (!mute) {\r\n      this.emit('beforeNewShape', shapeData);\r\n\r\n      if (this.prevent(false)) {\r\n        return false;\r\n      }\r\n    }\r\n    // Backward compatibility\r\n    if (typeof shapeType == 'object') {\r\n      mute = shapeData;\r\n      shapeData = shapeType;\r\n      shapeType = shapeData.type;\r\n    }\r\n\r\n    shapeData = shapeData || {};\r\n    shapeData._id = util.guid();\r\n\r\n    var constructor;\r\n    if (typeof shapeType == 'function') {\r\n      constructor = shapeType;\r\n    } else {\r\n      constructor = this.getConstructor(`graph.shape.${shapeType}`);\r\n    }\r\n\r\n    if (!constructor) {\r\n      return util.throwError('No constructor for this shape');\r\n    }\r\n\r\n    var shape = new constructor(this, shapeData);\r\n\r\n    if (!shape) {\r\n      return util.throwError('Failed to construct shape.');\r\n    }\r\n\r\n    shape.type = shapeType;\r\n    shape.graph = this;\r\n    shape._data = shapeData;\r\n    if (shapeData.properties !== undefined) {\r\n      shape.setProperties(shapeData.properties);\r\n    }\r\n\r\n    shape.init(\r\n      this,\r\n      shapeProperties,\r\n      shapeProperties ? shapeProperties.simplified : false\r\n    );\r\n\r\n    if (shapeData.props !== undefined) {\r\n      for (var i in shapeData.props) {\r\n        shape.setProp(i, shapeData.props[i]);\r\n      }\r\n    }\r\n    if (shapeData.position) {\r\n      for (var i = 0, l = shapeData.position.length; i < l; i++) {\r\n        shape.setPosition(new GraphPosition(shapeData.position[i]), i);\r\n      }\r\n    }\r\n    /* Setting shape properties */\r\n    if (shapeData.fillColor !== undefined) {\r\n      shape.setFillColor(shapeData.fillColor);\r\n    }\r\n\r\n    if (shapeData.fillOpacity !== undefined) {\r\n      shape.setFillOpacity(shapeData.fillOpacity);\r\n    }\r\n\r\n    if (shapeData.strokeColor !== undefined) {\r\n      shape.setStrokeColor(shapeData.strokeColor);\r\n    }\r\n\r\n    if (shapeData.strokeWidth !== undefined) {\r\n      shape.setStrokeWidth(shapeData.strokeWidth);\r\n    }\r\n\r\n    if (shapeData.layer !== undefined) {\r\n      shape.setLayer(shapeData.layer);\r\n    }\r\n\r\n    if (shapeData.locked == true) {\r\n      shape.lock();\r\n    }\r\n\r\n    if (shapeData.movable == true) {\r\n      shape.movable();\r\n    }\r\n\r\n    if (shapeData.selectable == true) {\r\n      shape.selectable();\r\n    }\r\n\r\n    if (shapeData.resizable == true) {\r\n      shape.resizable();\r\n    }\r\n\r\n    if (shapeData.attributes !== undefined) {\r\n      shape.setProp('attributes', shapeData.attributes);\r\n    }\r\n\r\n    if (shapeData.handles !== undefined) {\r\n      shape.setProp('handles', shapeData.handles);\r\n    }\r\n\r\n    if (shapeData.selectOnMouseDown !== undefined) {\r\n      shape.setProp('selectOnMouseDown', true);\r\n    }\r\n\r\n    if (shapeData.selectOnClick !== undefined) {\r\n      shape.setProp('selectOnClick', true);\r\n    }\r\n\r\n    if (\r\n      shapeData.transforms !== undefined &&\r\n      Array.isArray(shapeData.transforms)\r\n    ) {\r\n      shapeData.transforms.forEach(({\r\n        type,\r\n        value\r\n      }) => {\r\n        shape.addTransform(type, value);\r\n      });\r\n    }\r\n\r\n    if (shapeData.highlightOnMouseOver !== undefined) {\r\n      shape.setProp('highlightOnMouseOver', true);\r\n    }\r\n\r\n    if (shapeData.labelEditable) {\r\n      shape.setProp('labelEditable', shapeData.labelEditable);\r\n    }\r\n\r\n    if (shapeData.labels && !shapeData.label) {\r\n      shapeData.label = shapeData.labels;\r\n    }\r\n\r\n    if (shapeData.label !== undefined) {\r\n      if (!Array.isArray(shapeData.label)) {\r\n        shapeData.label = [shapeData.label];\r\n      }\r\n\r\n      for (var i = 0, l = shapeData.label.length; i < l; i++) {\r\n        shape.showLabel(i);\r\n        shape.setLabelText(shapeData.label[i].text, i);\r\n        shape.setLabelPosition(shapeData.label[i].position, i);\r\n        shape.setLabelColor(shapeData.label[i].color || 'black', i);\r\n        shape.setLabelSize(shapeData.label[i].size, i);\r\n        shape.setLabelAngle(shapeData.label[i].angle || 0, i);\r\n        shape.setLabelBaseline(shapeData.label[i].baseline || 'no-change', i);\r\n        shape.setLabelAnchor(shapeData.label[i].anchor || 'start', i);\r\n        shape.setLabelBackgroundColor(\r\n          shapeData.label[i].backgroundColor || 'transparent',\r\n          i\r\n        );\r\n        shape.setLabelBackgroundOpacity(\r\n          shapeData.label[i].backgroundOpacity || 1,\r\n          i\r\n        );\r\n      }\r\n    }\r\n\r\n    if (shapeData.serie) {\r\n      shape.setSerie(this.getSerie(shapeData.serie));\r\n    }\r\n    shape.createHandles();\r\n    shape.applyStyle();\r\n\r\n    this.shapes.push(shape);\r\n\r\n    if (!mute) {\r\n      this.emit('newShape', shape, shapeData);\r\n    }\r\n\r\n    return shape;\r\n  }\r\n\r\n  /**\r\n   * Creates a new position. Arguments are passed to the position constructor\r\n   * @param {...*} varArgs\r\n   * @see Position\r\n   */\r\n  newPosition(varArgs) {\r\n    return new GraphPosition(...arguments);\r\n\r\n    // 18 September 2016 Norman: What is that ?\r\n    //Array.prototype.unshift.call( arguments, null );\r\n    //return new( Function.prototype.bind.apply( GraphPosition, arguments ) )();\r\n  }\r\n\r\n  /**\r\n   *  Redraws all shapes. To be called if their definitions have changed\r\n   */\r\n  redrawShapes() {\r\n    //this.graphingZone.removeChild(this.shapeZone);\r\n    for (var i = 0, l = this.shapes.length; i < l; i++) {\r\n      this.shapes[i].redraw();\r\n    }\r\n    //this.graphingZone.insertBefore(this.shapeZone, this.axisGroup);\r\n  }\r\n\r\n  /**\r\n   *  Removes all shapes from the graph\r\n   */\r\n  removeShapes() {\r\n    for (var i = 0, l = this.shapes.length; i < l; i++) {\r\n      if (this.shapes[i] && this.shapes[i].kill) {\r\n        this.shapes[i].kill(true);\r\n      }\r\n    }\r\n    this.shapes = [];\r\n  }\r\n\r\n  /**\r\n   * Selects a shape\r\n   * @param {Shape} shape - The shape to select\r\n   * @param {Boolean} mute - Select the shape quietly\r\n   */\r\n  selectShape(shape, mute) {\r\n    // Already selected. Returns false\r\n\r\n    if (!shape) {\r\n      return;\r\n    }\r\n\r\n    if (this.selectedShapes.indexOf(shape) > -1) {\r\n      return false;\r\n    }\r\n\r\n    if (!shape.isSelectable()) {\r\n      return false;\r\n    }\r\n\r\n    if (!mute) {\r\n      this.emit('beforeShapeSelect', shape);\r\n    }\r\n\r\n    if (this.prevent(false)) {\r\n      return;\r\n    }\r\n\r\n    if (this.selectedShapes.length > 0 && this.options.shapesUniqueSelection) {\r\n      // Only one selected shape at the time\r\n\r\n      this.unselectShapes(mute);\r\n    }\r\n\r\n    shape._select(mute);\r\n    this.selectedShapes.push(shape);\r\n\r\n    if (!mute) {\r\n      this.emit('shapeSelect', shape);\r\n    }\r\n  }\r\n\r\n  getSelectedShapes() {\r\n    return this.selectedShapes;\r\n  }\r\n\r\n  /**\r\n   * Unselects a shape\r\n   * @param {Shape} shape - The shape to unselect\r\n   * @param {Boolean} mute - Unselect the shape quietly\r\n   */\r\n  unselectShape(shape, mute) {\r\n    if (this.selectedShapes.indexOf(shape) == -1) {\r\n      return;\r\n    }\r\n\r\n    if (!mute) {\r\n      this.emit('beforeShapeUnselect', shape);\r\n    }\r\n\r\n    if (this.cancelUnselectShape) {\r\n      this.cancelUnselectShape = false;\r\n      return;\r\n    }\r\n\r\n    shape._unselect();\r\n\r\n    this.selectedShapes.splice(this.selectedShapes.indexOf(shape), 1);\r\n\r\n    if (!mute) {\r\n      this.emit('shapeUnselect', shape);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselects all shapes\r\n   * @param {Boolean} [ mute = false ] - Mutes all unselection events\r\n   * @return {Graph} The current graph instance\r\n   */\r\n  unselectShapes(mute) {\r\n    while (this.selectedShapes[0]) {\r\n      this.unselectShape(this.selectedShapes[0], mute);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  _removeShape(shape) {\r\n    this.shapes.splice(this.shapes.indexOf(shape), 1);\r\n  }\r\n\r\n  appendShapeToDom(shape) {\r\n    if (shape.isHTML()) {\r\n      this.wrapper.insertBefore(shape._dom, this.dom);\r\n    }\r\n\r\n    this.getLayer(shape.getLayer(), 'shape').appendChild(\r\n      shape.simplified ? shape._dom : shape.group\r\n    );\r\n  }\r\n\r\n  removeShapeFromDom(shape) {\r\n    if (shape.isHTML()) {\r\n      this.wrapper.removeChild(shape._dom);\r\n    }\r\n\r\n    this.getLayer(shape.getLayer(), 'shape').removeChild(shape.group);\r\n  }\r\n\r\n  appendSerieToDom(serie) {\r\n    this.getLayer(serie.getLayer(), 'serie').appendChild(serie.groupMain);\r\n  }\r\n\r\n  removeSerieFromDom(serie) {\r\n    this.getLayer(serie.getLayer(), 'serie').removeChild(serie.groupMain);\r\n  }\r\n\r\n  getLayer(layer, mode) {\r\n    if (!this.layers[layer]) {\r\n      this.layers[layer] = [];\r\n\r\n      this.layers[layer][0] = document.createElementNS(Graph.ns, 'g');\r\n      this.layers[layer][0].setAttribute('data-layer', layer);\r\n      this.layers[layer][1] = document.createElementNS(Graph.ns, 'g');\r\n      this.layers[layer][2] = document.createElementNS(Graph.ns, 'g');\r\n\r\n      this.layers[layer][0].appendChild(this.layers[layer][1]);\r\n      this.layers[layer][0].appendChild(this.layers[layer][2]);\r\n\r\n      var i = 1,\r\n        prevLayer;\r\n\r\n      while (!(prevLayer = this.layers[layer - i]) && layer - i >= 0) {\r\n        i++;\r\n      }\r\n\r\n      if (!prevLayer) {\r\n        this.plotGroup.insertBefore(\r\n          this.layers[layer][0],\r\n          this.plotGroup.firstChild\r\n        );\r\n      } else if (prevLayer.nextSibling) {\r\n        this.plotGroup.insertBefore(\r\n          this.layers[layer][0],\r\n          prevLayer.nextSibling\r\n        );\r\n      } else {\r\n        this.plotGroup.appendChild(this.layers[layer][0]);\r\n      }\r\n    }\r\n\r\n    return this.layers[layer][mode == 'shape' ? 2 : 1];\r\n  }\r\n\r\n  focus() {\r\n    this.wrapper.focus();\r\n  }\r\n\r\n  elementMoving(movingElement) {\r\n    this.bypassHandleMouse = movingElement;\r\n  }\r\n\r\n  stopElementMoving(element) {\r\n    if (element && element == this.bypassHandleMouse) {\r\n      this.bypassHandleMouse = false;\r\n    } else if (!element) {\r\n      this.bypassHandleMouse = false;\r\n    }\r\n  }\r\n\r\n  _makeClosingLines() {\r\n    this.closingLines = {};\r\n    var els = ['top', 'bottom', 'left', 'right'],\r\n      i = 0,\r\n      l = 4;\r\n    for (; i < l; i++) {\r\n      var line = document.createElementNS(Graph.ns, 'line');\r\n      line.setAttribute('stroke', this.options.closeColor);\r\n      line.setAttribute('shape-rendering', 'crispEdges');\r\n      line.setAttribute('stroke-linecap', 'square');\r\n      line.setAttribute('display', 'none');\r\n      this.closingLines[els[i]] = line;\r\n      this.graphingZone.appendChild(line);\r\n    }\r\n  }\r\n\r\n  isActionAllowed(e, action) {\r\n    if (\r\n      action.type !== e.type &&\r\n      (action.type !== undefined || e.type !== 'mousedown') &&\r\n      !(\r\n        (e.type === 'wheel' || e.type === 'mousewheel') &&\r\n        action.type == 'mousewheel'\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      action.enabled &&\r\n      (typeof action.enabled == 'function' ?\r\n        !action.enabled(this) :\r\n        !action.enabled)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (action.key) {\r\n      if (action.key !== e.keyCode) {\r\n        let keyCheck = {\r\n          backspace: 8,\r\n          enter: 13,\r\n          tab: 9,\r\n          shift: 16,\r\n          ctrl: 17,\r\n          alt: 18,\r\n          pause: 19,\r\n          escape: 27,\r\n          up: 33,\r\n          down: 34,\r\n          left: 37,\r\n          right: 39\r\n        };\r\n\r\n        if (keyCheck[action.key] !== e.keyCode) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (action.shift === undefined) {\r\n      action.shift = false;\r\n    }\r\n\r\n    if (action.ctrl === undefined) {\r\n      action.ctrl = false;\r\n    }\r\n\r\n    if (action.meta === undefined) {\r\n      action.meta = false;\r\n    }\r\n\r\n    if (action.alt === undefined) {\r\n      action.alt = false;\r\n    }\r\n\r\n    return (\r\n      e.shiftKey == action.shift &&\r\n      e.ctrlKey == action.ctrl &&\r\n      e.metaKey == action.meta &&\r\n      e.altKey == action.alt\r\n    );\r\n  }\r\n\r\n  forcePlugin(plugin) {\r\n    this.forcedPlugin = plugin;\r\n  }\r\n\r\n  unforcePlugin() {\r\n    this.forcedPlugin = false;\r\n  }\r\n\r\n  _pluginsExecute(funcName, ...args) {\r\n    //\t\t\tArray.prototype.splice.apply(args, [0, 0, this]);\r\n\r\n    for (var i in this.plugins) {\r\n      if (this.plugins[i] && this.plugins[i][funcName]) {\r\n        this.plugins[i][funcName].apply(this.plugins[i], args);\r\n      }\r\n    }\r\n  }\r\n\r\n  _pluginExecute(which, func, args) {\r\n    //Array.prototype.splice.apply( args, [ 0, 0, this ] );\r\n    if (!which) {\r\n      return;\r\n    }\r\n\r\n    if (this.plugins[which] && this.plugins[which][func]) {\r\n      this.plugins[which][func].apply(this.plugins[which], args);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  pluginYieldActiveState() {\r\n    this.activePlugin = false;\r\n  }\r\n\r\n  _serieExecute(serie, func, args) {\r\n    if (typeof serie !== 'object') {\r\n      serie = this.getSerie(serie);\r\n    }\r\n\r\n    if (typeof serie[func] == 'function') {\r\n      serie.apply(serie, args);\r\n    }\r\n  }\r\n  _pluginsInit() {\r\n    var constructor, pluginName, pluginOptions;\r\n\r\n    for (var i in this.options.plugins) {\r\n      pluginName = i;\r\n      pluginOptions = this.options.plugins[i];\r\n\r\n      constructor = this.getConstructor(`graph.plugin.${pluginName}`);\r\n\r\n      if (constructor) {\r\n        //var options = util.extend( true, {}, constructor.defaults(), pluginOptions );\r\n        this.plugins[pluginName] = new constructor(pluginOptions);\r\n\r\n        util.mapEventEmission(\r\n          this.plugins[pluginName].options,\r\n          this.plugins[pluginName]\r\n        );\r\n        this.plugins[pluginName].init(this, pluginOptions);\r\n      } else {\r\n        util.throwError(`Plugin \"${pluginName}\" has not been registered`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an initialized plugin\r\n   * @param {String} pluginName\r\n   * @returns {Plugin} The plugin which name is <pluginName>\r\n   */\r\n  getPlugin(pluginName) {\r\n    var plugin = this.plugins[pluginName];\r\n\r\n    if (!plugin) {\r\n      return util.throwError(\r\n        `Plugin \"${pluginName}\" has not been loaded or properly registered`\r\n      );\r\n    }\r\n\r\n    return plugin;\r\n  }\r\n\r\n  hasPlugin(pluginName) {\r\n    return !!this.plugins[pluginName];\r\n  }\r\n\r\n  triggerEvent() {\r\n    var func = arguments[0];\r\n    /*,\r\n          args = Array.prototype.splice.apply( arguments, [ 0, 1 ] );\r\n    */\r\n    if (typeof this.options[func] == 'function') {\r\n      return this.options[func].apply(this, arguments);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a legend. Only one legend is allowed per graph\r\n   * @param {Object} options - The legend options\r\n   */\r\n  makeLegend(options) {\r\n    if (this.legend) {\r\n      return this.legend;\r\n    }\r\n\r\n    var constructor = this.getConstructor('graph.legend');\r\n    if (constructor) {\r\n      this.legend = new constructor(this, options);\r\n    } else {\r\n      return util.throwError(\r\n        'Graph legend is not available as it has not been registered'\r\n      );\r\n    }\r\n\r\n    return this.legend;\r\n  }\r\n\r\n  /**\r\n   * Redraws the legend if it exists\r\n   * @param {Boolean} [ onlyIfRequired = false ] ```true``` to redraw the legend only when it actually needs to be updated\r\n   * @return {Graph} The graph instance\r\n   */\r\n  updateLegend(onlyIfRequired = false) {\r\n    if (!this.legend) {\r\n      return;\r\n    }\r\n\r\n    this.legend.update(onlyIfRequired);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {Legend} The legend item\r\n   */\r\n  getLegend() {\r\n    if (!this.legend) {\r\n      return;\r\n    }\r\n\r\n    return this.legend;\r\n  }\r\n\r\n  requireLegendUpdate() {\r\n    if (!this.legend) {\r\n      return;\r\n    }\r\n\r\n    this.legend.requireDelayedUpdate();\r\n  }\r\n\r\n  orthogonalProjectionSetup() {\r\n    this.options.zAxis = util.extend(true, {\r\n      maxZ: 10,\r\n      minZ: 0,\r\n      shiftX: -25,\r\n      shiftY: -15,\r\n      xAxis: this.getXAxis(),\r\n      yAxis: this.getYAxis()\r\n    });\r\n  }\r\n\r\n  orthogonalProjectionUpdate() {\r\n    if (!this.zAxis) {\r\n      this.zAxis = {\r\n        g: document.createElementNS(Graph.ns, 'g'),\r\n        l: document.createElementNS(Graph.ns, 'line')\r\n      };\r\n\r\n      this.zAxis.g.appendChild(this.zAxis.l);\r\n      this.groupGrids.appendChild(this.zAxis.g);\r\n    }\r\n\r\n    let refAxisX = this.options.zAxis.xAxis;\r\n    let refAxisY = this.options.zAxis.yAxis;\r\n\r\n    var x0 = refAxisX.getMinPx();\r\n    var y0 = refAxisY.getMinPx();\r\n\r\n    var dx = refAxisX.getZProj(this.options.zAxis.maxZ);\r\n    var dy = refAxisY.getZProj(this.options.zAxis.maxZ);\r\n\r\n    this.zAxis.l.setAttribute('stroke', 'black');\r\n    this.zAxis.l.setAttribute('x1', x0);\r\n    this.zAxis.l.setAttribute('x2', x0 + dx);\r\n    this.zAxis.l.setAttribute('y1', y0);\r\n    this.zAxis.l.setAttribute('y2', y0 + dy);\r\n\r\n    this.updateDataMinMaxAxes(true);\r\n\r\n    var sort = this.series.map((serie) => {\r\n      return [serie.getZPos(), serie];\r\n    });\r\n\r\n    sort.sort((sa, sb) => {\r\n      return sb[0] - sa[0];\r\n    });\r\n\r\n    let i = 0;\r\n    sort.forEach((s) => {\r\n      s[1].setLayer(i);\r\n      this.appendSerieToDom(s[1]);\r\n      i++;\r\n    });\r\n\r\n    this.drawSeries(true);\r\n  }\r\n\r\n  /**\r\n   * Kills the graph\r\n   **/\r\n  kill() {\r\n    this.wrapper.removeChild(this.dom);\r\n  }\r\n  _removeSerie(serie) {\r\n    this.series.splice(this.series.indexOf(serie), 1);\r\n    this._pluginsExecute('serieRemoved', serie);\r\n  }\r\n  contextListen(target, menuElements, callback) {\r\n    if (this.options.onContextMenuListen) {\r\n      return this.options.onContextMenuListen(target, menuElements, callback);\r\n    }\r\n  }\r\n  lockShapes() {\r\n    this.shapesLocked = true;\r\n\r\n    // Removes the current actions of the shapes\r\n    for (var i = 0, l = this.shapes.length; i < l; i++) {\r\n      this.shapes[i].moving = false;\r\n      this.shapes[i].resizing = false;\r\n    }\r\n  }\r\n  unlockShapes() {\r\n    this.shapesLocked = false;\r\n  }\r\n  prevent(arg) {\r\n    var curr = this.prevented;\r\n    if (arg != -1) {\r\n      this.prevented = arg == undefined || arg;\r\n    }\r\n    return curr;\r\n  }\r\n  _getXY(e) {\r\n    var x = e.clientX,\r\n      y = e.clientY;\r\n\r\n    var pos = this.offsetCached || util.getOffset(this.wrapper);\r\n\r\n    x -= pos.left;\r\n    y -= pos.top;\r\n\r\n    return {\r\n      x: x,\r\n      y: y\r\n    };\r\n  }\r\n  _resize() {\r\n    if (!this.width || !this.height) {\r\n      return;\r\n    }\r\n\r\n    this.getDrawingWidth();\r\n    this.getDrawingHeight();\r\n\r\n    this.sizeSet = true;\r\n    this.dom.setAttribute('width', this.width);\r\n    this.dom.setAttribute('height', this.height);\r\n    this.domTitle.setAttribute('x', this.width / 2);\r\n\r\n    this._sizeChanged = true;\r\n\r\n    if (this.drawn) {\r\n      this.requireLegendUpdate();\r\n      this.draw(true);\r\n    }\r\n  }\r\n\r\n  updateGraphingZone() {\r\n    util.setAttributeTo(this.graphingZone, {\r\n      transform: `translate(${this.options.paddingLeft}, ${this.options.paddingTop\r\n        })`\r\n    });\r\n\r\n    this._sizeChanged = true;\r\n  }\r\n\r\n  // We have to proxy the methods in case they are called anonymously\r\n  getDrawingSpaceWidth() {\r\n    return () => this.drawingSpaceWidth;\r\n  }\r\n\r\n  getDrawingSpaceHeight() {\r\n    return () => this.drawingSpaceHeight;\r\n  }\r\n\r\n  getDrawingSpaceMinX() {\r\n    return () => this.drawingSpaceMinX;\r\n  }\r\n\r\n  getDrawingSpaceMinY() {\r\n    return () => this.drawingSpaceMinY;\r\n  }\r\n\r\n  getDrawingSpaceMaxX() {\r\n    return () => this.drawingSpaceMaxX;\r\n  }\r\n\r\n  getDrawingSpaceMaxY() {\r\n    return () => this.drawingSpaceMaxY;\r\n  }\r\n\r\n  tracking(options) {\r\n    // This is the new alias\r\n    return this.trackingLine(options);\r\n  }\r\n\r\n  /**\r\n   *  Enables the line tracking\r\n   *  @param {Object|Boolean} options - Defines the tracking behavior. If a boolean, simply enables or disables the existing tracking.\r\n   */\r\n  trackingLine(options) {\r\n    var self = this;\r\n\r\n    if (typeof options === 'boolean') {\r\n      if (this.options.trackingLine) {\r\n        this.options.trackingLine.enable = options;\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (options) {\r\n      this.options.trackingLine = options;\r\n    }\r\n\r\n    // One can enable / disable the tracking\r\n    options.enable = options.enable === undefined ? true : !!options.enable;\r\n\r\n    // Treat the series\r\n    const seriesSet = new Set();\r\n    let backupSeries = [];\r\n    // If we defined an array, let's save it\r\n    if (Array.isArray(options.series)) {\r\n      options.series.forEach((serie) => {\r\n        seriesSet.add(this.getSerie(serie));\r\n      });\r\n    } else if (options.series == 'all') {\r\n      this.allSeries().forEach((serie) => seriesSet.add(serie));\r\n    }\r\n\r\n    options.series = seriesSet;\r\n\r\n    // Individual tracking\r\n    if (options.mode == 'individual') {\r\n      seriesSet.forEach((serie) => {\r\n        self.addSerieToTrackingLine(serie, options.serieOptions);\r\n      });\r\n    } else {\r\n      /*\r\n      options.series.forEach( ( serie ) => {\r\n        serie.serie.disableTracking();\r\n      } );\r\n*/\r\n      if (options.noLine) {\r\n        return;\r\n      }\r\n\r\n      if (!this.trackingLineShape) {\r\n        // Avoid multiple creation of tracking lines\r\n\r\n        // Creates a new shape called trackingLine, in the first layer (below everything)\r\n        this.trackingLineShape = this.newShape(\r\n          'line',\r\n          util.extend(\r\n            true, {\r\n            position: [{\r\n              y: 'min'\r\n            },\r\n            {\r\n              y: 'max'\r\n            }\r\n            ],\r\n            stroke: 'black',\r\n            layer: -1\r\n          },\r\n            options.trackingLineShapeOptions\r\n          )\r\n        );\r\n      }\r\n\r\n      this.trackingLineShape.draw();\r\n\r\n      // return this.trackingLineShape;\r\n    }\r\n    //return this.trackingObject;\r\n  }\r\n\r\n  addSerieToTrackingLine(serie, options = {}) {\r\n    // Safeguard when claled externally\r\n    if (!this.options.trackingLine) {\r\n      this.trackingLine({\r\n        mode: 'individual'\r\n      });\r\n    }\r\n\r\n    this.options.trackingLine.series.add(serie);\r\n\r\n    let serieShape;\r\n    if (this.options.trackingLine.serieShape) {\r\n      serieShape = this.options.trackingLine.serieShape;\r\n    } else {\r\n      serieShape = {\r\n        shape: 'ellipse',\r\n        properties: {\r\n          rx: [`${serie.getLineWidth() * 3}px`],\r\n          ry: [`${serie.getLineWidth() * 3}px`]\r\n        }\r\n      };\r\n    }\r\n\r\n    serie.options.tracking = Object.assign({}, options);\r\n\r\n    if (!serie.trackingShape) {\r\n      serie.trackingShape = this.newShape(\r\n        serieShape.shape, {\r\n        fillColor: serie.getLineColor(),\r\n        strokeColor: 'White',\r\n        strokeWidth: serie.getLineWidth()\r\n      },\r\n        true,\r\n        serieShape.properties\r\n      )\r\n        .setSerie(serie)\r\n        .forceParentDom(serie.groupMain)\r\n        .draw();\r\n    }\r\n    /*\r\n      serie.serie.trackingShape.show();\r\n      serie.serie.trackingShape.getPosition( 0 ).x = index.xClosest;\r\n\r\n      if ( serieShape.magnet ) {\r\n\r\n        let magnetOptions = serieShape.magnet,\r\n          val = magnetOptions.within,\r\n          minmaxpos;\r\n\r\n        if ( magnetOptions.withinPx ) {\r\n          val = serie.serie.getXAxis().getRelVal( magnetOptions.withinPx );\r\n        }\r\n\r\n        if ( ( minmaxpos = serie.serie.findLocalMinMax( index.xClosest, val, magnetOptions.mode ) ) ) {\r\n\r\n          serie.serie.trackingShape.getPosition( 0 ).x = minmaxpos;\r\n        }\r\n      }\r\n\r\n      serie.serie.trackingShape.redraw();\r\n\r\n*/\r\n\r\n    /*  serie.enableTracking( ( serie, index, x, y ) => {\r\n\r\n      if ( this.options.trackingLine.enable ) {\r\n\r\n        if ( index ) {\r\n\r\n          if ( this.trackingObject ) {\r\n\r\n            this.trackingObject.show();\r\n            this.trackingObject.getPosition( 0 ).x = index.trueX; //serie.getData()[ 0 ][ index.closestIndex * 2 ];\r\n            this.trackingObject.getPosition( 1 ).x = index.trueX; //serie.getData()[ 0 ][ index.closestIndex * 2 ];\r\n            this.trackingObject.redraw();\r\n          }\r\n\r\n          serie._trackingLegend = _trackingLegendSerie( this, {\r\n            serie: serie\r\n          }, x, y, serie._trackingLegend, options.textMethod ? options.textMethod : trackingLineDefaultTextMethod, index.trueX );\r\n\r\n          if ( serie._trackingLegend ) {\r\n            serie._trackingLegend.style.display = 'block';\r\n          }\r\n        }\r\n      }\r\n    }, ( serie ) => {\r\n\r\n      if ( this.trackingObject ) {\r\n        this.trackingObject.hide();\r\n      }\r\n\r\n      if ( serie.trackingShape ) {\r\n        serie.trackingShape.hide();\r\n      }\r\n\r\n      if ( serie._trackingLegend ) {\r\n        serie._trackingLegend.style.display = 'none';\r\n      }\r\n\r\n      serie._trackingLegend = _trackingLegendSerie( this, {\r\n        serie: serie\r\n      }, false, false, serie._trackingLegend, false, false );\r\n\r\n    } );\r\n*/\r\n  }\r\n\r\n  /**\r\n   *  Pass here the katex.render method to be used later\r\n   *   @param {Function} renderer -  katexRendered - renderer\r\n   *   @return {Graph} The current graph instance\r\n   */\r\n  setKatexRenderer(renderer) {\r\n    this._katexRenderer = renderer;\r\n  }\r\n\r\n  hasKatexRenderer() {\r\n    return !!this._katexRenderer;\r\n  }\r\n\r\n  renderWithKatex(katexValue, katexElement) {\r\n    if (this._katexRenderer) {\r\n      if (katexElement) {\r\n        katexElement.removeChild(katexElement.firstChild);\r\n      } else {\r\n        katexElement = document.createElementNS(Graph.ns, 'foreignObject');\r\n      }\r\n\r\n      let div = document.createElement('div');\r\n\r\n      katexElement.appendChild(div);\r\n      this._katexRenderer(katexValue, div);\r\n\r\n      return katexElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  exportToSchema() {\r\n    let schema = {};\r\n\r\n    schema.title = this.options.title;\r\n\r\n    schema.width = this.getWidth();\r\n    schema.height = this.getHeight();\r\n\r\n    let axesPositions = ['top', 'bottom', 'left', 'right'];\r\n    let axesExport = [];\r\n    let allaxes = {\r\n      x: [],\r\n      y: []\r\n    };\r\n\r\n    axesPositions.map((axisPosition) => {\r\n      if (!this.axis[axisPosition]) {\r\n        return {};\r\n      }\r\n\r\n      axesExport = axesExport.concat(\r\n        this.axis[axisPosition].map((axis) => {\r\n          return {\r\n            type: axisPosition,\r\n            label: axis.options.label,\r\n            unit: axis.options.unit,\r\n            min: axis.options.forcedMin,\r\n            max: axis.options.forcedMax,\r\n            flip: axis.options.flipped\r\n          };\r\n        })\r\n      );\r\n\r\n      if (axisPosition == 'top' || axisPosition == 'bottom') {\r\n        allaxes.x = allaxes.x.concat(this.axis[axisPosition]);\r\n      } else {\r\n        allaxes.y = allaxes.y.concat(this.axis[axisPosition]);\r\n      }\r\n    });\r\n\r\n    schema.axis = axesExport;\r\n\r\n    let seriesExport = [];\r\n\r\n    let toType = (type) => {\r\n      switch (type) {\r\n        case Graph.SERIE_BAR:\r\n          return 'bar';\r\n\r\n        case Graph.SERIE_LINE_COLORED:\r\n          return 'color';\r\n\r\n        case Graph.SERIE_SCATTER:\r\n          return 'scatter';\r\n\r\n        default:\r\n        case Graph.SERIE_LINE:\r\n          return 'line';\r\n      }\r\n    };\r\n\r\n    let exportData = (serie, x) => {\r\n      let data = [];\r\n\r\n      switch (serie.getType()) {\r\n        case Graph.SERIE_LINE:\r\n          for (var i = 0; i < serie.data.length; i++) {\r\n            for (var j = 0; j < serie.data[i].length - 1; j += 2) {\r\n              data.push(\r\n                serie.data[i][\r\n                j +\r\n                ((x && serie.isFlipped()) || (!x && !serie.isFlipped()) ?\r\n                  1 :\r\n                  0)\r\n                ]\r\n              );\r\n            }\r\n          }\r\n          break;\r\n\r\n        case Graph.SERIE_SCATTER:\r\n          for (var j = 0; j < serie.data.length - 1; j += 2) {\r\n            data.push(\r\n              serie.data[\r\n              i +\r\n              ((x && serie.isFlipped()) || (!x && !serie.isFlipped()) ?\r\n                1 :\r\n                0)\r\n              ]\r\n            );\r\n          }\r\n\r\n          break;\r\n      }\r\n\r\n      return data;\r\n    };\r\n\r\n    schema.data = seriesExport.concat(\r\n      this.series.map((serie) => {\r\n        let style = [];\r\n        let linestyle = [];\r\n\r\n        if (serie.getType() == Graph.SERIE_LINE) {\r\n          for (var stylename in serie.styles) {\r\n            linestyle.push({\r\n              styleName: stylename,\r\n              color: serie.styles[stylename].lineColor,\r\n              lineWidth: serie.styles[stylename].lineWidth,\r\n              lineStyle: serie.styles[stylename].lineStyle\r\n            });\r\n\r\n            let styleObj = {\r\n              styleName: stylename,\r\n              styles: []\r\n            };\r\n            style.push(styleObj);\r\n\r\n            styleObj.styles = styleObj.styles.concat(\r\n              (serie.styles[stylename].markers || []).map((markers) => {\r\n                return {\r\n                  shape: markers.type,\r\n                  zoom: markers.zoom,\r\n                  lineWidth: markers.strokeWidth,\r\n                  lineColor: markers.strokeColor,\r\n                  color: markers.fillColor,\r\n                  points: markers.points\r\n                };\r\n              })\r\n            );\r\n          }\r\n        }\r\n\r\n        return {\r\n          label: serie.getLabel(),\r\n          id: serie.getName(),\r\n          type: toType(serie.getType()),\r\n          x: exportData(serie, true),\r\n          y: exportData(serie, false),\r\n          xAxis: allaxes.x.indexOf(serie.getXAxis()),\r\n          yAxis: allaxes.y.indexOf(serie.getYAxis()),\r\n          style: style,\r\n          lineStyle: linestyle\r\n        };\r\n      })\r\n    );\r\n\r\n    return schema;\r\n  }\r\n\r\n  /**\r\n   * Registers a constructor to jsGraph. Constructors are used on a later basis by jsGraph to create series, shapes or plugins\r\n   * @param {String} constructorName - The name of the constructor\r\n   * @param {Function} constructor - The constructor method\r\n   * @see Graph.getConstructor\r\n   * @static\r\n   */\r\n  static registerConstructor(constructorName, constructor) {\r\n    if (_constructors.has(constructorName)) {\r\n      return util.throwError(`Constructor ${constructor} already exists.`);\r\n    }\r\n\r\n    _constructors.set(constructorName, constructor);\r\n  }\r\n\r\n  /**\r\n   * Returns a registered constructor\r\n   * @param {String} constructorName - The constructor name to look for\r\n   * @param {Boolean} [softFail = false ] - Fails silently if the constructor doesn't exist, and returns false\r\n   * @returns {Function} The registered constructor\r\n   * @throws Error\r\n   * @see Graph.registerConstructor\r\n   * @static\r\n   */\r\n  static getConstructor(constructorName, softFail = false) {\r\n    if (!_constructors.has(constructorName)) {\r\n      if (softFail) {\r\n        return false;\r\n      }\r\n\r\n      return util.throwError(`Constructor \"${constructorName}\" doesn't exist`);\r\n    }\r\n\r\n    return _constructors.get(constructorName);\r\n  }\r\n\r\n  static newWaveform() {\r\n    return new Waveform(...arguments);\r\n  }\r\n\r\n  static waveform() {\r\n    return new Waveform(...arguments);\r\n  }\r\n\r\n  static newWaveformHash() {\r\n    return new WaveformHash(...arguments);\r\n  }\r\n\r\n  static waveformHash() {\r\n    return new WaveformHash(...arguments);\r\n  }\r\n}\r\n\r\n  // Adds getConstructor to the prototype. Cannot do that in ES6 classes\r\n  Graph.prototype.getConstructor = Graph.getConstructor;\r\n\r\nfunction makeSerie(graph, name, options, type) {\r\n  var constructor = graph.getConstructor(type, true);\r\n  if (!constructor && typeof type == 'string') {\r\n    constructor = graph.getConstructor(`graph.serie.${type}`, true);\r\n  }\r\n\r\n  if (constructor) {\r\n    var serie = new constructor(graph, name, options);\r\n    //serie.init( graph, name, options );\r\n    graph.appendSerieToDom(serie);\r\n  } else {\r\n    return util.throwError(\r\n      'No constructor exists for the serie type provided. Use Graph.registerConstructor( name, constructor ) first is you use your own series'\r\n    );\r\n  }\r\n\r\n  return serie;\r\n}\r\n\r\nfunction getAxisLevelFromSpan(span, level) {\r\n  for (var i = 0, l = level.length; i < l; i++) {\r\n    var possible = true;\r\n    for (var k = 0, m = level[i].length; k < m; k++) {\r\n      if (\r\n        !(\r\n          (span[0] < level[i][k][0] && span[1] < level[i][k][0]) ||\r\n          (span[0] > level[i][k][1] && span[1] > level[i][k][1])\r\n        )\r\n      ) {\r\n        possible = false;\r\n      }\r\n    }\r\n\r\n    if (possible) {\r\n      level[i].push(span);\r\n      return i;\r\n    }\r\n  }\r\n\r\n  level.push([span]);\r\n  return level.length - 1;\r\n}\r\n\r\nfunction refreshDrawingZone(graph) {\r\n  var shift = {\r\n    top: [],\r\n    bottom: [],\r\n    left: [],\r\n    right: []\r\n  };\r\n\r\n  var levels = {\r\n    top: [],\r\n    bottom: [],\r\n    left: [],\r\n    right: []\r\n  };\r\n\r\n  graph._painted = true;\r\n  // Apply to top and bottom\r\n  graph._applyToAxes(\r\n    function (axis, position) {\r\n      if (!axis.isShown()) {\r\n        axis.hideGroup();\r\n        return;\r\n      } else {\r\n        axis.showGroup();\r\n      }\r\n\r\n      if (axis.floating) {\r\n        return;\r\n      }\r\n\r\n      var level = getAxisLevelFromSpan(axis.getSpan(), levels[position]);\r\n      axis.setLevel(level);\r\n\r\n      shift[position][level] = Math.max(\r\n        axis.getAxisPosition(),\r\n        shift[position][level] || 0\r\n      );\r\n    },\r\n    false,\r\n    true,\r\n    false\r\n  );\r\n\r\n  var shiftTop = shift.top.reduce(function (prev, curr) {\r\n    return prev + curr;\r\n  }, 0);\r\n\r\n  var shiftBottom = shift.bottom.reduce(function (prev, curr) {\r\n    return prev + curr;\r\n  }, 0);\r\n\r\n  graph.drawingSpaceHeight = graph.getDrawingHeight() - shiftTop - shiftBottom;\r\n\r\n  [shift.top, shift.bottom].map(function (arr) {\r\n    arr.reduce(function (prev, current, index) {\r\n      arr[index] = prev + current;\r\n      return prev + current;\r\n    }, 0);\r\n  });\r\n  // Apply to top and bottom\r\n  graph._applyToAxes(\r\n    function (axis, position) {\r\n      if (!axis.isShown() || axis.floating) {\r\n        return;\r\n      }\r\n\r\n      axis.setShift(shift[position][axis.getLevel()]);\r\n    },\r\n    false,\r\n    true,\r\n    false\r\n  );\r\n\r\n  // Applied to left and right\r\n  graph._applyToAxes(\r\n    function (axis, position) {\r\n      if (!axis.isShown()) {\r\n        axis.hideGroup();\r\n        // Don't return here. We need to go through the draw method as the axis must be assigned minPx and maxPx values.\r\n        // This is because some series can still be visible although the axis isn't.\r\n      } else {\r\n        axis.showGroup();\r\n      }\r\n      axis.setMinPx(shiftTop);\r\n      axis.setMaxPx(graph.getDrawingHeight(true) - shiftBottom);\r\n\r\n      if (axis.floating) {\r\n        return;\r\n      }\r\n\r\n      // First we need to draw it in order to determine the width to allocate\r\n      // graph is done to accomodate 0 and 100000 without overlapping any element in the DOM (label, ...)\r\n\r\n      // Let's not draw dependant axes yet\r\n      let drawn = !axis.linkedToAxis ? axis.draw() : 0;\r\n\r\n      if (!axis.isShown()) {\r\n        return;\r\n      }\r\n      // Get axis position gives the extra shift that is common\r\n      var level = getAxisLevelFromSpan(axis.getSpan(), levels[position]);\r\n      axis.setLevel(level);\r\n\r\n      if (axis.options.forcedWidth) {\r\n        shift[position][level] = axis.options.forcedWidth;\r\n      } else {\r\n        shift[position][level] = Math.max(drawn, shift[position][level] || 0);\r\n\r\n        if (level < shift[position].length - 1) {\r\n          shift[position][level] += 10;\r\n        }\r\n      }\r\n    },\r\n    false,\r\n    false,\r\n    true\r\n  );\r\n\r\n  var shift2 = util.extend(true, {}, shift);\r\n\r\n  // Applied to left and right\r\n  graph._applyToAxes(\r\n    function (axis, position) {\r\n      if (!axis.isShown() || axis.floating) {\r\n        return;\r\n      }\r\n\r\n      shift2[position][axis.getLevel()] = Math.max(\r\n        shift[position][axis.getLevel()],\r\n        axis.equalizePosition(shift[position][axis.getLevel()])\r\n      );\r\n    },\r\n    false,\r\n    false,\r\n    true\r\n  );\r\n\r\n  shift = shift2;\r\n\r\n  var shiftLeft = shift.left.reduce(function (prev, curr) {\r\n    return prev + curr;\r\n  }, 0);\r\n\r\n  var shiftRight = shift.right.reduce(function (prev, curr) {\r\n    return prev + curr;\r\n  }, 0);\r\n\r\n  graph.drawingSpaceWidth = graph.getDrawingWidth() - shiftLeft - shiftRight;\r\n\r\n  [shift.left, shift.right].forEach(function (arr) {\r\n    arr.reduce(function (prev, current, index) {\r\n      arr[index] = prev + current;\r\n      return prev + current;\r\n    }, 0);\r\n  });\r\n\r\n  // Apply to left and right\r\n  graph._applyToAxes(\r\n    (axis, position) => {\r\n      if (!axis.isShown() || axis.floating) {\r\n        return;\r\n      }\r\n      axis.setShift(shift[position][axis.getLevel()]);\r\n    },\r\n    false,\r\n    false,\r\n    true\r\n  );\r\n\r\n  // Apply to top and bottom\r\n  graph._applyToAxes(\r\n    function (axis, position) {\r\n      if (!axis.isShown()) {\r\n        //      return;\r\n      }\r\n\r\n      axis.setMinPx(shiftLeft);\r\n      axis.setMaxPx(graph.getDrawingWidth(true) - shiftRight);\r\n\r\n      if (axis.floating) {\r\n        return;\r\n      }\r\n\r\n      if (!axis.linkedToAxis) {\r\n        axis.draw();\r\n      }\r\n    },\r\n    false,\r\n    true,\r\n    false\r\n  );\r\n\r\n  // Floating axes\r\n  graph._applyToAxes(\r\n    function (axis) {\r\n      if (!axis.floating) {\r\n        return;\r\n      }\r\n\r\n      var floatingAxis = axis.getFloatingAxis();\r\n      var floatingValue = axis.getFloatingValue();\r\n      var floatingPx = floatingAxis.getPx(floatingValue);\r\n\r\n      axis.setShift(floatingPx);\r\n\r\n      if (!axis.linkedToAxis) {\r\n        axis.draw();\r\n      }\r\n    },\r\n    false,\r\n    true,\r\n    true\r\n  );\r\n\r\n  _closeLine(\r\n    graph,\r\n    'right',\r\n    graph.getDrawingWidth(true),\r\n    graph.getDrawingWidth(true),\r\n    shiftTop,\r\n    graph.getDrawingHeight(true) - shiftBottom\r\n  );\r\n  _closeLine(\r\n    graph,\r\n    'left',\r\n    0,\r\n    0,\r\n    shiftTop,\r\n    graph.getDrawingHeight(true) - shiftBottom\r\n  );\r\n  _closeLine(\r\n    graph,\r\n    'top',\r\n    shiftLeft,\r\n    graph.getDrawingWidth(true) - shiftRight,\r\n    0,\r\n    0\r\n  );\r\n  _closeLine(\r\n    graph,\r\n    'bottom',\r\n    shiftLeft,\r\n    graph.getDrawingWidth(true) - shiftRight,\r\n    graph.getDrawingHeight(true) - shiftBottom,\r\n    graph.getDrawingHeight(true) - shiftBottom\r\n  );\r\n\r\n  graph.clipRect.setAttribute('y', shiftTop);\r\n  graph.clipRect.setAttribute('x', shiftLeft);\r\n  graph.clipRect.setAttribute(\r\n    'width',\r\n    graph.getDrawingWidth() - shiftLeft - shiftRight\r\n  );\r\n  graph.clipRect.setAttribute(\r\n    'height',\r\n    graph.getDrawingHeight() - shiftTop - shiftBottom\r\n  );\r\n\r\n  graph.rectEvent.setAttribute('y', shiftTop + graph.getPaddingTop());\r\n  graph.rectEvent.setAttribute('x', shiftLeft + graph.getPaddingLeft());\r\n\r\n  graph.rectEvent.setAttribute('width', graph.drawingSpaceWidth);\r\n  graph.rectEvent.setAttribute('height', graph.drawingSpaceHeight);\r\n\r\n  graph.drawingSpaceMinX = shiftLeft + graph.getPaddingLeft(); // + \"px\";\r\n  graph.drawingSpaceMinY = shiftTop + graph.getPaddingTop(); // + \"px\";\r\n  graph.drawingSpaceMaxX =\r\n    graph.getDrawingWidth() - shiftRight + graph.getPaddingLeft(); // + \"px\";\r\n  graph.drawingSpaceMaxY =\r\n    graph.getDrawingHeight() - shiftBottom + graph.getPaddingTop(); //  + \"px\";\r\n\r\n  // Apply to top and bottom\r\n  graph._applyToAxes(\r\n    function (axis, position) {\r\n      if (!axis.isShown()) {\r\n        return;\r\n      }\r\n\r\n      axis.drawLines();\r\n    },\r\n    false,\r\n    true,\r\n    true\r\n  );\r\n\r\n  /**\r\n    graph.shapeZoneRect.setAttribute('x', shift[1]);\r\n    graph.shapeZoneRect.setAttribute('y', shift[2]);\r\n    graph.shapeZoneRect.setAttribute('width', graph.getDrawingWidth() - shift[2] - shift[3]);\r\n    graph.shapeZoneRect.setAttribute('height', graph.getDrawingHeight() - shift[1] - shift[0]);\r\n  */\r\n  graph.shift = shift;\r\n  graph.redrawShapes(); // Not sure this should be automatic here. The user should be clever.\r\n}\r\n\r\nfunction _handleKey(graph, event, type) {\r\n  var self = graph;\r\n  if (graph.forcedPlugin) {\r\n    graph.activePlugin = graph.forcedPlugin;\r\n    graph._pluginExecute(graph.activePlugin, type, [graph, event]);\r\n    return;\r\n  }\r\n\r\n  checkKeyActions(graph, event, [graph, event], type);\r\n}\r\n\r\n// Similar to checkMouseActions\r\nfunction checkKeyActions(graph, e, parameters, methodName) {\r\n  var keyComb = graph.options.keyActions,\r\n    i,\r\n    l;\r\n\r\n  for (i = 0, l = keyComb.length; i < l; i++) {\r\n    if (keyComb[i].plugin) {\r\n      // Is it a plugin ?\r\n\r\n      if (\r\n        graph.forcedPlugin == keyComb[i].plugin ||\r\n        graph.isActionAllowed(e, keyComb[i])\r\n      ) {\r\n        if (keyComb[i].options) {\r\n          parameters.push(keyComb[i].options);\r\n        }\r\n\r\n        graph.activePlugin = keyComb[i].plugin; // Lease the mouse action to the current action\r\n        graph._pluginExecute(keyComb[i].plugin, methodName, parameters);\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        return true;\r\n      }\r\n    } else if (keyComb[i].callback && graph.isActionAllowed(e, keyComb[i])) {\r\n      if (keyComb[i].options) {\r\n        parameters.push(keyComb[i].options);\r\n      }\r\n\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      keyComb[i].callback.apply(graph, parameters);\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      keyComb[i].removeSelectedShape &&\r\n      graph.isActionAllowed(e, keyComb[i])\r\n    ) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      graph.selectedShapes.map((shape) => {\r\n        shape.kill(keyComb[i].keepInDom);\r\n      });\r\n    }\r\n\r\n    /* else if ( keyComb[ i ].series ) {\r\n\r\n      var series;\r\n      if ( keyComb[ i ].series === 'all' ) {\r\n        series = graph.series;\r\n      }\r\n\r\n      if ( !Array.isArray( keyComb[ i ].series ) ) {\r\n        series = [ series ];\r\n      }\r\n\r\n      if ( keyComb[ i ].options ) {\r\n        parameters.push( keyComb[ i ].options );\r\n      }\r\n\r\n      for ( var j = 0; j < series.length; i++ ) {\r\n        graph._serieExecute( series[ i ], methodName, parameters );\r\n      }\r\n      return true;\r\n    }*/\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction __createDOM() {\r\n  // Create SVG element, set the NS\r\n  this.dom = document.createElementNS(Graph.ns, 'svg');\r\n  this.dom.setAttributeNS(\r\n    'http://www.w3.org/2000/xmlns/',\r\n    'xmlns:xlink',\r\n    'http://www.w3.org/1999/xlink'\r\n  );\r\n  //this.dom.setAttributeNS(this.ns, 'xmlns:xlink', this.nsxml);\r\n  util.setAttributeTo(this.dom, {\r\n    xmlns: Graph.ns,\r\n    'font-family': this.options.fontFamily,\r\n    'font-size': this.options.fontSize\r\n  });\r\n\r\n  try {\r\n    util.setAttributeTo(this.dom, {\r\n      // eslint-disable-next-line no-undef\r\n      'data-jsgraph-version': __VERSION__\r\n    });\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n\r\n  this.defs = document.createElementNS(Graph.ns, 'defs');\r\n  this.dom.appendChild(this.defs);\r\n\r\n  this.groupEvent = document.createElementNS(Graph.ns, 'g');\r\n\r\n  this.rectEvent = document.createElementNS(Graph.ns, 'rect');\r\n  util.setAttributeTo(this.rectEvent, {\r\n    'pointer-events': 'fill',\r\n    fill: 'transparent'\r\n  });\r\n  this.groupEvent.appendChild(this.rectEvent);\r\n\r\n  this.dom.appendChild(this.groupEvent);\r\n\r\n  // Handling graph title\r\n  this.domTitle = document.createElementNS(Graph.ns, 'text');\r\n  this.setTitle(this.options.title);\r\n  if (this.options.titleFontSize) {\r\n    this.setTitleFontSize(this.options.titleFontSize);\r\n  }\r\n  if (this.options.titleFontColor) {\r\n    this.setTitleFontSize(this.options.titleFontColor);\r\n  }\r\n  if (this.options.titleFontFamily) {\r\n    this.setTitleFontFamily(this.options.titleFontFamily);\r\n  }\r\n\r\n  util.setAttributeTo(this.domTitle, {\r\n    'text-anchor': 'middle',\r\n    y: 20\r\n  });\r\n  this.groupEvent.appendChild(this.domTitle);\r\n  //\r\n\r\n  this.graphingZone = document.createElementNS(Graph.ns, 'g');\r\n  this.updateGraphingZone();\r\n\r\n  this.groupEvent.appendChild(this.graphingZone);\r\n\r\n  /*  this.shapeZoneRect = document.createElementNS(this.ns, 'rect');\r\n  //this.shapeZoneRect.setAttribute('pointer-events', 'fill');\r\n  this.shapeZoneRect.setAttribute('fill', 'transparent');\r\n  this.shapeZone.appendChild(this.shapeZoneRect);\r\n*/\r\n  this.axisGroup = document.createElementNS(Graph.ns, 'g');\r\n  this.graphingZone.appendChild(this.axisGroup);\r\n\r\n  this.groupGrids = document.createElementNS(Graph.ns, 'g');\r\n\r\n  // With the z stacking, this should probably be removed\r\n  //this.groupGrids.setAttribute( 'clip-path', 'url(#_clipplot' + this._creation + ')' );\r\n\r\n  this.groupPrimaryGrids = document.createElementNS(Graph.ns, 'g');\r\n  this.groupSecondaryGrids = document.createElementNS(Graph.ns, 'g');\r\n\r\n  this.axisGroup.appendChild(this.groupGrids);\r\n\r\n  this.groupGrids.appendChild(this.groupSecondaryGrids);\r\n  this.groupGrids.appendChild(this.groupPrimaryGrids);\r\n\r\n  this.plotGroup = document.createElementNS(Graph.ns, 'g');\r\n  this.graphingZone.appendChild(this.plotGroup);\r\n\r\n  // 5 September 2014. I encountered a case here shapeZone must be above plotGroup\r\n  /*this.shapeZone = document.createElementNS( this.ns, 'g' );\r\n  this.graphingZone.appendChild( this.shapeZone );\r\n*/\r\n\r\n  this.layers = [];\r\n\r\n  this._makeClosingLines();\r\n\r\n  this.clip = document.createElementNS(Graph.ns, 'clipPath');\r\n  this.clip.setAttribute('id', `_clipplot${this._creation}`);\r\n  this.defs.appendChild(this.clip);\r\n\r\n  this.clipRect = document.createElementNS(Graph.ns, 'rect');\r\n  this.clip.appendChild(this.clipRect);\r\n  this.clip.setAttribute('clipPathUnits', 'userSpaceOnUse');\r\n\r\n  this.markerArrow = document.createElementNS(this.ns, 'marker');\r\n  this.markerArrow.setAttribute('viewBox', '0 0 10 10');\r\n  this.markerArrow.setAttribute('id', `arrow${this._creation}`);\r\n  this.markerArrow.setAttribute('refX', '6');\r\n  this.markerArrow.setAttribute('refY', '5');\r\n  this.markerArrow.setAttribute('markerUnits', 'strokeWidth');\r\n  this.markerArrow.setAttribute('markerWidth', '8');\r\n  this.markerArrow.setAttribute('markerHeight', '6');\r\n  this.markerArrow.setAttribute('orient', 'auto');\r\n  //this.markerArrow.setAttribute('fill', 'context-stroke');\r\n  //this.markerArrow.setAttribute('stroke', 'context-stroke');\r\n\r\n  var pathArrow = document.createElementNS(Graph.ns, 'path');\r\n  pathArrow.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\r\n  //pathArrow.setAttribute( 'fill', 'context-stroke' );\r\n  this.markerArrow.appendChild(pathArrow);\r\n\r\n  this.defs.appendChild(this.markerArrow);\r\n\r\n  // Horionzal split marker for axis\r\n  this.markerHorizontalSplit = document.createElementNS(Graph.ns, 'marker');\r\n  this.markerHorizontalSplit.setAttribute('viewBox', '0 0 6 8');\r\n  this.markerHorizontalSplit.setAttribute(\r\n    'id',\r\n    `horionzalsplit_${this.getId()}`\r\n  );\r\n  this.markerHorizontalSplit.setAttribute('refX', '3');\r\n  this.markerHorizontalSplit.setAttribute('refY', '4');\r\n  this.markerHorizontalSplit.setAttribute('markerUnits', 'strokeWidth');\r\n  this.markerHorizontalSplit.setAttribute('markerWidth', '6');\r\n  this.markerHorizontalSplit.setAttribute('markerHeight', '8');\r\n\r\n  var path = document.createElementNS(Graph.ns, 'line');\r\n  path.setAttribute('x1', '0');\r\n  path.setAttribute('y1', '8');\r\n\r\n  path.setAttribute('x2', '6');\r\n  path.setAttribute('y2', '0');\r\n\r\n  path.setAttribute('stroke', 'black');\r\n  this.markerHorizontalSplit.appendChild(path);\r\n\r\n  this.defs.appendChild(this.markerHorizontalSplit);\r\n\r\n  // Vertical split marker for axis\r\n  this.markerVerticalSplit = document.createElementNS(Graph.ns, 'marker');\r\n  this.markerVerticalSplit.setAttribute('viewBox', '0 0 8 6');\r\n  this.markerVerticalSplit.setAttribute('id', `verticalsplit_${this.getId()}`);\r\n  this.markerVerticalSplit.setAttribute('refX', '4');\r\n  this.markerVerticalSplit.setAttribute('refY', '3');\r\n  this.markerVerticalSplit.setAttribute('markerUnits', 'strokeWidth');\r\n  this.markerVerticalSplit.setAttribute('markerWidth', '8');\r\n  this.markerVerticalSplit.setAttribute('markerHeight', '6');\r\n\r\n  var path = document.createElementNS(Graph.ns, 'line');\r\n\r\n  path.setAttribute('x1', '0');\r\n  path.setAttribute('y1', '0');\r\n\r\n  path.setAttribute('x2', '8');\r\n  path.setAttribute('y2', '6');\r\n\r\n  path.setAttribute('stroke', 'black');\r\n  this.markerVerticalSplit.appendChild(path);\r\n  this.defs.appendChild(this.markerVerticalSplit);\r\n\r\n  this.vertLineArrow = document.createElementNS(Graph.ns, 'marker');\r\n  this.vertLineArrow.setAttribute('viewBox', '0 0 10 10');\r\n  this.vertLineArrow.setAttribute('id', `verticalline${this._creation}`);\r\n  this.vertLineArrow.setAttribute('refX', '0');\r\n  this.vertLineArrow.setAttribute('refY', '5');\r\n  this.vertLineArrow.setAttribute('markerUnits', 'strokeWidth');\r\n  this.vertLineArrow.setAttribute('markerWidth', '20');\r\n  this.vertLineArrow.setAttribute('markerHeight', '10');\r\n  this.vertLineArrow.setAttribute('orient', 'auto');\r\n  //this.vertLineArrow.setAttribute('fill', 'context-stroke');\r\n  //this.vertLineArrow.setAttribute('stroke', 'context-stroke');\r\n  this.vertLineArrow.setAttribute('stroke-width', '1px');\r\n\r\n  var pathVertLine = document.createElementNS(Graph.ns, 'path');\r\n  pathVertLine.setAttribute('d', 'M 0 -10 L 0 10');\r\n  pathVertLine.setAttribute('stroke', 'black');\r\n\r\n  this.vertLineArrow.appendChild(pathVertLine);\r\n\r\n  this.defs.appendChild(this.vertLineArrow);\r\n\r\n  // Removed with z stacking ?\r\n  //    this.plotGroup.setAttribute( 'clip-path', 'url(#_clipplot' + this._creation + ')' );\r\n\r\n  this.bypassHandleMouse = false;\r\n}\r\n\r\nfunction _registerEvents(graph) {\r\n  var self = graph;\r\n\r\n  if (!graph.wrapper) {\r\n    throw 'No wrapper exists. Cannot register the events.';\r\n  }\r\n\r\n  graph.dom.setAttribute('tabindex', 0);\r\n\r\n  graph.dom.addEventListener('keydown', (e) => {\r\n    _handleKey(graph, e, 'keydown');\r\n  });\r\n\r\n  graph.dom.addEventListener('keypress', (e) => {\r\n    _handleKey(graph, e, 'keypress');\r\n  });\r\n\r\n  graph.dom.addEventListener('keyup', (e) => {\r\n    _handleKey(graph, e, 'keyup');\r\n  });\r\n  // Not sure this has to be prevented\r\n\r\n  // August 17th, 2017: I extended the graph.groupEvent to the more general graph.dom to make the zoom plugin more\r\n  // intuitive. Let us see if it breaks another example...\r\n  graph.dom.addEventListener('mousemove', (e) => {\r\n    //e.preventDefault();\r\n    var coords = graph._getXY(e);\r\n    _handleMouseMove(graph, coords.x, coords.y, e);\r\n  });\r\n\r\n  graph.dom.addEventListener('mouseleave', (e) => {\r\n    _handleMouseLeave(graph);\r\n  });\r\n\r\n  graph.groupEvent.addEventListener('mousedown', (e) => {\r\n    graph.focus();\r\n\r\n    //   e.preventDefault();\r\n    if (e.which == 3 || e.ctrlKey) {\r\n      return;\r\n    }\r\n\r\n    var coords = graph._getXY(e);\r\n    _handleMouseDown(graph, coords.x, coords.y, e);\r\n  });\r\n\r\n  graph.dom.addEventListener('mouseup', (e) => {\r\n    graph.emit('mouseUp', e);\r\n    var coords = graph._getXY(e);\r\n\r\n    _handleMouseUp(graph, coords.x, coords.y, e);\r\n  });\r\n\r\n  graph.wrapper.addEventListener('mouseup', (e) => {\r\n    e.stopPropagation();\r\n  });\r\n\r\n  graph.dom.addEventListener('dblclick', (e) => {\r\n    graph.emit('dblClick', e);\r\n    var coords = graph._getXY(e);\r\n\r\n    _handleDblClick(graph, coords.x, coords.y, e);\r\n  });\r\n\r\n  graph.groupEvent.addEventListener('click', (e) => {\r\n    // Cancel right click or Command+Click\r\n    if (e.which == 3 || e.ctrlKey) {\r\n      return;\r\n    }\r\n\r\n    //   e.preventDefault();\r\n    var coords = graph._getXY(e);\r\n\r\n    if (!graph.prevent(false)) {\r\n      _handleClick(graph, coords.x, coords.y, e);\r\n    }\r\n\r\n    //}, 200 );\r\n  });\r\n\r\n  graph.groupEvent.addEventListener('mousewheel', (e) => {\r\n    var deltaY = e.wheelDeltaY || e.wheelDelta || -e.deltaY;\r\n    var coords = graph._getXY(e);\r\n    _handleMouseWheel(graph, deltaY, coords.x, coords.y, e);\r\n\r\n    return false;\r\n  });\r\n\r\n  graph.groupEvent.addEventListener('wheel', (e) => {\r\n    var coords = graph._getXY(e);\r\n    var deltaY = e.wheelDeltaY || e.wheelDelta || -e.deltaY;\r\n    _handleMouseWheel(graph, deltaY, coords.x, coords.y, e);\r\n\r\n    return false;\r\n  });\r\n}\r\n\r\nfunction _handleMouseDown(graph, x, y, e) {\r\n  var self = graph;\r\n\r\n  if (graph.forcedPlugin) {\r\n    graph.activePlugin = graph.forcedPlugin;\r\n    graph._pluginExecute(graph.activePlugin, 'onMouseDown', [graph, x, y, e]);\r\n    return;\r\n  }\r\n\r\n  if (graph.activePlugin) {\r\n    graph.activePlugin = false;\r\n  }\r\n\r\n  checkMouseActions(graph, e, [graph, x, y, e], 'onMouseDown');\r\n}\r\n\r\nfunction _handleMouseMove(graph, x, y, e) {\r\n  if (graph.bypassHandleMouse) {\r\n    graph.bypassHandleMouse.handleMouseMove(e);\r\n    return;\r\n  }\r\n\r\n  if (\r\n    graph.activePlugin &&\r\n    graph._pluginExecute(graph.activePlugin, 'onMouseMove', [graph, x, y, e])\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  let xRef;\r\n  let xOverwritePx = x;\r\n\r\n  //\t\t\treturn;\r\n\r\n  graph._applyToAxes(\r\n    'handleMouseMove',\r\n    [x - graph.options.paddingLeft, e],\r\n    true,\r\n    false\r\n  );\r\n  graph._applyToAxes(\r\n    'handleMouseMove',\r\n    [y - graph.options.paddingTop, e],\r\n    false,\r\n    true\r\n  );\r\n\r\n  if (!graph.activePlugin) {\r\n    var index;\r\n\r\n    // Takes care of the tracking line\r\n    if (graph.options.trackingLine && graph.options.trackingLine.enable) {\r\n      if (\r\n        graph.options.trackingLine.mode == 'common' &&\r\n        graph.options.trackingLine.snapToSerie\r\n      ) {\r\n        var snapToSerie = graph.options.trackingLine.snapToSerie;\r\n        index = snapToSerie.handleMouseMove(false, true);\r\n\r\n        if (graph.trackingLineShape) {\r\n          if (!index) {\r\n            graph.trackingLineShape.hide();\r\n          } else {\r\n            graph.trackingLineShape.show();\r\n\r\n            graph.trackingLineShape.getPosition(0).x = index.xClosest;\r\n            graph.trackingLineShape.getPosition(1).x = index.xClosest;\r\n            graph.trackingLineShape.redraw();\r\n\r\n            xRef = index.xClosest; //\r\n            xOverwritePx =\r\n              snapToSerie.getXAxis().getPx(index.xClosest) +\r\n              graph.options.paddingLeft;\r\n          }\r\n        }\r\n\r\n        var series = graph.options.trackingLine.series;\r\n\r\n        /*\r\n        // Gets a default value\r\n        if ( !series ) {\r\n          series = graph.getSeries();map( function( serie ) {\r\n            return {\r\n              serie: serie,\r\n              withinPx: 20,\r\n              withinVal: -1\r\n            };\r\n          } );\r\n        }*/\r\n\r\n        if (!series) {\r\n          return;\r\n        }\r\n\r\n        if (!index) {\r\n          return;\r\n        }\r\n        graph._trackingLegend = _trackingLegendSerie(\r\n          graph,\r\n          series,\r\n          xOverwritePx,\r\n          y,\r\n          graph._trackingLegend,\r\n          graph.options.trackingLine.textMethod ?\r\n            graph.options.trackingLine.textMethod :\r\n            trackingLineDefaultTextMethod,\r\n          xRef\r\n        );\r\n      } else if (graph.options.trackingLine.mode == 'individual') {\r\n        // Series looping\r\n\r\n        const output = [];\r\n        graph.options.trackingLine.series.forEach((serie) => {\r\n          //        const index = serie.handleMouseMove( false, true );\r\n          //console.log( index );\r\n\r\n          if (!serie.options.tracking) {\r\n            return;\r\n          }\r\n\r\n          const closestPoint = serie.getClosestPointToXY(\r\n            serie.getXAxis().getMouseVal(),\r\n            serie.getYAxis().getMouseVal(),\r\n            serie.options.tracking.withinPx,\r\n            serie.options.tracking.withinPx,\r\n            serie.options.tracking.useAxis,\r\n            true\r\n          );\r\n\r\n          // When all legends are in common mode, let's make sure we remove the serie-specific legend\r\n          if (graph.options.trackingLine.legendType == 'common') {\r\n            serie._trackingLegend = _trackingLegendSerie(\r\n              graph,\r\n              [],\r\n              false,\r\n              false,\r\n              serie._trackingLegend\r\n            );\r\n          }\r\n\r\n          // What happens if there is no point ?\r\n          if (!closestPoint) {\r\n            if (serie.trackingShape) {\r\n              serie.trackingShape.hide();\r\n\r\n              if (graph.options.trackingLine.legendType == 'independent') {\r\n                serie._trackingLegend = _trackingLegendSerie(\r\n                  graph,\r\n                  [],\r\n                  false,\r\n                  false,\r\n                  serie._trackingLegend\r\n                );\r\n              }\r\n            }\r\n          } else {\r\n            // We found a point: happy !\r\n            if (serie.trackingShape) {\r\n              serie.trackingShape.show();\r\n\r\n              serie.trackingShape.setPosition({\r\n                x: closestPoint.xClosest,\r\n                y: closestPoint.yClosest\r\n              });\r\n\r\n              serie.trackingShape.redraw();\r\n\r\n              // If we want one legend per serie, then we got to show it\r\n              if (graph.options.trackingLine.legendType == 'independent') {\r\n                serie._trackingLegend = _trackingLegendSerie(\r\n                  graph,\r\n                  [{\r\n                    serie: serie,\r\n                    closestPoint: closestPoint\r\n                  }],\r\n                  x,\r\n                  y,\r\n                  serie._trackingLegend\r\n                );\r\n              }\r\n              serie.emit('track', e, closestPoint);\r\n            }\r\n          }\r\n\r\n          if (closestPoint)\r\n            output.push({\r\n              serie: serie,\r\n              closestPoint: closestPoint\r\n            });\r\n        });\r\n\r\n        if (graph.options.trackingLine.legendType == 'common') {\r\n          graph._trackingLegend = _trackingLegendSerie(\r\n            graph,\r\n            output,\r\n            x,\r\n            y,\r\n            graph._trackingLegend\r\n          );\r\n        } else {\r\n          graph._trackingLegend = _trackingLegendSerie(\r\n            graph,\r\n            [],\r\n            false,\r\n            false,\r\n            graph._trackingLegend\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // End takes care of the tracking line\r\n\r\n  if (graph.options.mouseMoveData) {\r\n    const results = {};\r\n\r\n    for (let i = 0; i < graph.series.length; i++) {\r\n      let serie = graph.series[i];\r\n      if (!serie.options.tracking) {\r\n        console.warn('Tracking not enabled for this serie');\r\n        continue;\r\n      }\r\n      results[graph.series[i].getName()] = graph.series[i].getClosestPointToXY(\r\n        undefined,\r\n        undefined,\r\n        serie.options.tracking.withinPxX || 0,\r\n        serie.options.tracking.withinPxY || 0,\r\n        serie.options.tracking.useAxis,\r\n        true\r\n      );\r\n    }\r\n\r\n    if (typeof graph.options.mouseMoveData == 'function') {\r\n      graph.options.mouseMoveData.call(graph, e, results);\r\n    }\r\n\r\n    graph.emit('mouseMoveData', e, results);\r\n  }\r\n\r\n  checkMouseActions(graph, e, [graph, x, y, e], 'onMouseMove');\r\n}\r\n\r\nfunction checkMouseActions(graph, e, parameters, methodName) {\r\n  var keyComb = graph.options.mouseActions,\r\n    i,\r\n    l,\r\n    executed = false;\r\n\r\n  for (i = 0, l = keyComb.length; i < l; i++) {\r\n    if (keyComb[i].plugin) {\r\n      // Is it a plugin ?\r\n\r\n      if (\r\n        graph.forcedPlugin == keyComb[i].plugin ||\r\n        graph.isActionAllowed(e, keyComb[i])\r\n      ) {\r\n        if (keyComb[i].options) {\r\n          parameters.push(keyComb[i].options);\r\n        }\r\n\r\n        // Lease the mouse action to the current action\r\n        // 25.10.2017: Except for mousewheel. See #111\r\n        if (e.type !== 'wheel' && e.type !== 'mousewheel') {\r\n          graph.activePlugin = keyComb[i].plugin;\r\n        }\r\n\r\n        graph._pluginExecute(keyComb[i].plugin, methodName, parameters);\r\n        executed = true;\r\n        continue;\r\n      }\r\n    } else if (keyComb[i].callback && graph.isActionAllowed(e, keyComb[i])) {\r\n      if (keyComb[i].options) {\r\n        parameters.push(keyComb[i].options);\r\n      }\r\n\r\n      keyComb[i].callback.apply(graph, parameters);\r\n      executed = true;\r\n      continue;\r\n    } else if (keyComb[i].series) {\r\n      var series;\r\n      if (keyComb[i].series === 'all') {\r\n        series = graph.series;\r\n      }\r\n\r\n      if (!Array.isArray(keyComb[i].series)) {\r\n        series = [series];\r\n      }\r\n\r\n      if (keyComb[i].options) {\r\n        parameters.push(keyComb[i].options);\r\n      }\r\n\r\n      for (var j = 0; j < series.length; i++) {\r\n        graph._serieExecute(series[i], methodName, parameters);\r\n      }\r\n      executed = true;\r\n      continue;\r\n    }\r\n  }\r\n\r\n  return executed;\r\n}\r\n\r\n/**\r\n *\r\n * @returns {DOMElement} legend - The legend element, or the newly created one if it didn't exist\r\n */\r\nvar _trackingLegendSerie = function (\r\n  graph,\r\n  seriesOutput,\r\n  posXPx,\r\n  posYPx,\r\n  legend\r\n) {\r\n  const textMethod =\r\n    graph.options.trackingLine.textMethod || trackingLineDefaultTextMethod;\r\n\r\n  var justCreated = false;\r\n  if (!legend && graph.options.trackingLine.legend) {\r\n    justCreated = true;\r\n    legend = _makeTrackingLegend(graph);\r\n  }\r\n  if (!graph.options.trackingLine.legend) {\r\n    return;\r\n  }\r\n\r\n  if (seriesOutput.length == 0) {\r\n    legend.style.display = 'none';\r\n    return legend;\r\n  } else {\r\n    if (legend.style.display == 'none' || justCreated) {\r\n      forceTrackingLegendMode(graph, legend, posXPx, posYPx, true);\r\n    } else {\r\n      _trackingLegendMove(graph, legend, posXPx, posYPx);\r\n    }\r\n\r\n    legend.style.display = 'block';\r\n    var txt = textMethod(seriesOutput, undefined, posXPx, posYPx);\r\n\r\n    legend.innerHTML = txt;\r\n\r\n    //legend.innerHTML = textMethod( output, xValue, x, y );\r\n  }\r\n\r\n  return legend;\r\n};\r\n\r\nvar forceTrackingLegendMode = function (graph, legend, toX, toY, skip) {\r\n  var start = Date.now(),\r\n    h = legend.offsetHeight,\r\n    startX = parseInt(legend.style.marginLeft.replace('px', '') || 0, 10),\r\n    startY = parseInt(legend.style.marginTop.replace('px', '') || 0, 10);\r\n\r\n  toX =\r\n    toX > graph.getWidth() / 2 ?\r\n      toX - (toX % 10) - 20 - legend.offsetWidth :\r\n      toX - (toX % 10) + 30;\r\n  toY = toY - (toY % 10) + h / 2;\r\n\r\n  if (skip) {\r\n    legend.style.marginLeft = `${toX}px`;\r\n    legend.style.marginTop = `${toY}px`;\r\n    return;\r\n  }\r\n\r\n  function next() {\r\n    var progress = (Date.now() - start) / 200;\r\n    if (progress > 1) {\r\n      progress = 1;\r\n    }\r\n\r\n    legend.style.marginLeft = `${(toX - startX) * progress + startX}px`;\r\n    legend.style.marginTop = `${(toY - startY) * progress + startY}px`;\r\n\r\n    if (progress < 1) {\r\n      window.requestAnimationFrame(next);\r\n    }\r\n  }\r\n\r\n  window.requestAnimationFrame(next);\r\n};\r\n\r\nvar _trackingLegendMove = (...args) => {\r\n  util.debounce(forceTrackingLegendMode, 50)(...args);\r\n};\r\n\r\nfunction _makeTrackingLegend(graph) {\r\n  var group = document.createElement('div');\r\n  group.setAttribute('class', 'trackingLegend');\r\n  group.style.position = 'absolute';\r\n  group.style.borderRadius = '4px';\r\n  group.style.boxShadow = '1px 1px 3px 0px rgba(100,100,100,0.6)';\r\n  group.style.border = '2px solid #333333';\r\n  group.style.backgroundColor = 'rgba(255, 255, 255, 0.5 )';\r\n  group.style.pointerEvents = 'none';\r\n  group.style.paddingTop = '5px';\r\n  group.style.paddingBottom = '5px';\r\n  group.style.paddingLeft = '10px';\r\n  group.style.paddingRight = '10px';\r\n\r\n  graph.getWrapper().insertBefore(group, graph.getDom());\r\n\r\n  return group;\r\n}\r\n\r\nconst trackingLineDefaultTextMethod = (output) => {\r\n  let txt = '';\r\n  for (var i in output) {\r\n    if (!output[i].closestPoint) {\r\n      continue;\r\n    }\r\n\r\n    txt += `${output[i].serie.getName()}: ${output[i].serie\r\n      .getYAxis()\r\n      .valueToHtml(output[i].closestPoint.yClosest, undefined, undefined, 2)}\r\n      `;\r\n  }\r\n  return txt;\r\n};\r\n\r\nfunction _handleDblClick(graph, x, y, e) {\r\n  // var _x = x - graph.options.paddingLeft;\r\n  // var _y = y - graph.options.paddingTop;\r\n  //var pref = graph.options.dblclick;\r\n  checkMouseActions(graph, e, [x, y, e], 'onDblClick');\r\n  /*\r\n      if ( !pref || !pref.type ) {\r\n        return;\r\n      }\r\n\r\n      switch ( pref.type ) {\r\n\r\n        case 'plugin':\r\n\r\n          var plugin;\r\n\r\n          if ( ( plugin = graph.plugins[ pref.plugin ] ) ) {\r\n\r\n            plugin.onDblClick( graph, x, y, pref.options, e );\r\n          }\r\n\r\n          break;\r\n      }*/\r\n}\r\n\r\nfunction _handleMouseUp(graph, x, y, e) {\r\n  if (graph.bypassHandleMouse) {\r\n    graph.bypassHandleMouse.handleMouseUp(e);\r\n    graph.activePlugin = false;\r\n    return;\r\n  }\r\n\r\n  graph._pluginExecute(graph.activePlugin, 'onMouseUp', [graph, x, y, e]);\r\n  graph.activePlugin = false;\r\n}\r\n\r\nfunction _handleClick(graph, x, y, e) {\r\n  graph.emit('click', [graph, x, y, e]);\r\n  // Not on a shape\r\n  checkMouseActions(graph, e, [x, y, e], 'onClick');\r\n\r\n  if (\r\n    !e.target.jsGraphIsShape &&\r\n    !graph.prevent(false) &&\r\n    graph.options.shapesUnselectOnClick\r\n  ) {\r\n    graph.unselectShapes();\r\n  }\r\n}\r\n\r\nfunction _getAxis(graph, num, options, pos) {\r\n  var options = options || {};\r\n  var inst;\r\n\r\n  var _availableAxes = {\r\n    def: {\r\n      x: graph.getConstructor('graph.axis.x'),\r\n      y: graph.getConstructor('graph.axis.y')\r\n    },\r\n\r\n    time: {\r\n      x: graph.getConstructor('graph.axis.x.time')\r\n    },\r\n\r\n    bar: {\r\n      x: graph.getConstructor('graph.axis.x.bar')\r\n    }\r\n  };\r\n\r\n  switch (options.type) {\r\n    case 'time':\r\n      var axisInstance = _availableAxes.time;\r\n      break;\r\n\r\n    case 'bar':\r\n      var axisInstance = _availableAxes.bar;\r\n      break;\r\n\r\n    case 'broken':\r\n      var axisInstance = _availableAxes.broken;\r\n      break;\r\n\r\n    default:\r\n      var axisInstance = _availableAxes.def;\r\n      break;\r\n  }\r\n\r\n  switch (pos) {\r\n    case 'top':\r\n    case 'bottom':\r\n      inst = axisInstance.x;\r\n      break;\r\n\r\n    case 'left':\r\n    case 'right':\r\n      inst = axisInstance.y;\r\n      break;\r\n\r\n    default:\r\n      return;\r\n  }\r\n\r\n  num = num || 0;\r\n\r\n  if (typeof num == 'object') {\r\n    options = num;\r\n    num = 0;\r\n  }\r\n\r\n  if (!graph.axis[pos][num]) {\r\n    graph.axis[pos][num] = new inst(graph, pos, options);\r\n    graph.axis[pos][num].init(graph, options);\r\n  }\r\n\r\n  return graph.axis[pos][num];\r\n}\r\n\r\nfunction _closeLine(graph, mode, x1, x2, y1, y2) {\r\n  if (graph.options.close === false) {\r\n    return;\r\n  }\r\n\r\n  var l = 0;\r\n\r\n  graph.axis[mode].map(function (g) {\r\n    if (g.isDisplayed() && !g.floating) {\r\n      l++;\r\n    }\r\n  });\r\n\r\n  if ((graph.options.close === true || graph.options.close[mode]) && l == 0) {\r\n    graph.closingLines[mode].setAttribute('display', 'block');\r\n    graph.closingLines[mode].setAttribute('x1', x1);\r\n    graph.closingLines[mode].setAttribute('x2', x2);\r\n    graph.closingLines[mode].setAttribute('y1', y1);\r\n    graph.closingLines[mode].setAttribute('y2', y2);\r\n  } else {\r\n    graph.closingLines[mode].setAttribute('display', 'none');\r\n  }\r\n}\r\n\r\nfunction _handleMouseWheel(graph, delta, coordX, coordY, e) {\r\n  if (checkMouseActions(graph, e, [delta, e, coordX, coordY], 'onMouseWheel')) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }\r\n}\r\n\r\nfunction _handleMouseLeave(graph) {\r\n  if (graph.options.handleMouseLeave) {\r\n    graph.options.handleMouseLeave.call(graph);\r\n  }\r\n}\r\n\r\nfunction haveAxesChanged(graph) {\r\n  var temp = graph._axesHaveChanged;\r\n  graph._axesHaveChanged = false;\r\n  return temp;\r\n}\r\n\r\nfunction hasSizeChanged(graph) {\r\n  var temp = graph._sizeChanged;\r\n  graph._sizeChanged = false;\r\n  return temp;\r\n}\r\n\r\n// Constants\r\nGraph.SERIE_LINE = Symbol();\r\nGraph.SERIE_SCATTER = Symbol();\r\nGraph.SERIE_CONTOUR = Symbol();\r\nGraph.SERIE_BAR = Symbol();\r\nGraph.SERIE_BOX = Symbol();\r\nGraph.SERIE_ZONE = Symbol();\r\nGraph.SERIE_LINE_COLORED = Symbol();\r\nGraph.SERIE_ZONE = Symbol();\r\nGraph.SERIE_DENSITYMAP = Symbol();\r\nGraph.SERIE_LINE_3D = Symbol();\r\nGraph.SERIE_ZONE_3D = Symbol();\r\n\r\nGraph.TICKS_OUTSIDE = Symbol();\r\nGraph.TICKS_INSIDE = Symbol();\r\nGraph.TICKS_CENTERED = Symbol();\r\n\r\nGraph.ns = 'http://www.w3.org/2000/svg';\r\nGraph.nsxlink = 'http://www.w3.org/1999/xlink';\r\n\r\nGraphJSON(Graph);\r\nEventMixin(Graph);\r\n\r\nexport default Graph;","import GraphPosition from './graph.position.js';\r\nimport * as util from './graph.util.js';\r\n\r\n/**\r\n * Default legend configuration\r\n * @name LegendOptionsDefault\r\n * @object\r\n * @static\r\n * @prop {Boolean} frame - <code>true</code> to display a frame around the legend\r\n * @prop {Number} frameWidth - The width of the frame stroke\r\n * @prop {String} frameColor - The stroke color of the frame\r\n * @prop {String} backgroundColor - The background color of the frame\r\n * @prop {Number} paddingLeft - The left padding\r\n * @prop {Number} paddingRight - The right padding\r\n * @prop {Number} paddingTop - The top padding\r\n * @prop {Number} paddingBottom - The bottom padding\r\n * @prop {Boolean} shapesToggleable - <code>true</code> to toggle the shapes linked to serie with its status (shown or hidden)\r\n * @prop {Boolean} isSerieHideable - <code>true</code> to allow series to be hidden through the legend\r\n * @prop {Boolean} isSerieSelectable - <code>true</code> to allow series to be selected through the legend\r\n */\r\nvar legendDefaults = {\r\n  backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n  frame: true,\r\n  frameWidth: 1,\r\n  frameColor: 'black',\r\n  paddingTop: 10,\r\n  paddingLeft: 10,\r\n  paddingBottom: 10,\r\n  paddingRight: 10,\r\n  color: 'black',\r\n  frameRounding: 0,\r\n\r\n  movable: false,\r\n\r\n  shapesToggleable: true,\r\n  isSerieHideable: true,\r\n  isSerieSelectable: true\r\n};\r\n\r\n/**\r\n * Legend constructor. You should not call this method directly, but rather use {@link graph.makeLegend}\r\n * @example var legend = graph.makeLegend( {  backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n * frame: true,\r\n * frameWidth: 1,\r\n * frameColor: 'black',\r\n * paddingTop: 10,\r\n * paddingLeft: 10,\r\n * paddingBottom: 10,\r\n * paddingRight: 10,\r\n * frameRounding: 3,\r\n *\r\n * movable: false,\r\n *\r\n * shapesToggleable: true,\r\n * isSerieHideable: true,\r\n * isSerieSelectable: true\r\n * } );\r\n */\r\nclass Legend {\r\n  constructor( graph, options ) {\r\n    this.options = util.extend( {}, legendDefaults, options );\r\n\r\n    this.graph = graph;\r\n    this.svg = document.createElementNS( this.graph.ns, 'g' );\r\n    this.subG = document.createElementNS( this.graph.ns, 'g' );\r\n\r\n    this.groups = [];\r\n    this.rect = document.createElementNS( this.graph.ns, 'rect' );\r\n    this.rectBottom = document.createElementNS( this.graph.ns, 'rect' );\r\n\r\n    this.rect.setAttribute( 'x', 0 );\r\n    this.rect.setAttribute( 'y', 0 );\r\n\r\n    this.rectBottom.setAttribute( 'x', 0 );\r\n    this.rectBottom.setAttribute( 'y', 0 );\r\n\r\n    this.series = false;\r\n\r\n    this.svg.setAttribute( 'display', 'none' );\r\n    this.pos = {\r\n      x: undefined,\r\n      y: undefined,\r\n      transformX: 0,\r\n      transformY: 0\r\n    };\r\n\r\n    this.setEvents();\r\n\r\n    this.eyeId = util.guid();\r\n    this.eyeCrossedId = util.guid();\r\n\r\n    var eyeClosed = util.SVGParser(\r\n      `<svg xmlns=\"http://www.w3.org/2000/svg\"><symbol id=\"${this.eyeCrossedId\r\n      }\" viewBox=\"0 -256 1850 1850\"><rect pointer-events=\"fill\" fill=\"transparent\" x=\"-256\" y=\"0\" width=\"2106\" height=\"1850\" /><g transform=\"matrix(1,0,0,-1,30.372881,1214.339)\"><path d=\"m 555,201 78,141 q -87,63 -136,159 -49,96 -49,203 0,121 61,225 Q 280,812 128,576 295,318 555,201 z m 389,759 q 0,20 -14,34 -14,14 -34,14 -125,0 -214.5,-89.5 Q 592,829 592,704 q 0,-20 14,-34 14,-14 34,-14 20,0 34,14 14,14 14,34 0,86 61,147 61,61 147,61 20,0 34,14 14,14 14,34 z m 363,191 q 0,-7 -1,-9 Q 1201,954 991,576 781,198 675,9 l -49,-89 q -10,-16 -28,-16 -12,0 -134,70 -16,10 -16,28 0,12 44,87 Q 349,154 228.5,262 108,370 20,507 0,538 0,576 q 0,38 20,69 153,235 380,371 227,136 496,136 89,0 180,-17 l 54,97 q 10,16 28,16 5,0 18,-6 13,-6 31,-15.5 18,-9.5 33,-18.5 15,-9 31.5,-18.5 16.5,-9.5 19.5,-11.5 16,-10 16,-27 z m 37,-447 Q 1344,565 1265,450.5 1186,336 1056,286 l 280,502 q 8,-45 8,-84 z m 448,-128 q 0,-35 -20,-69 Q 1733,443 1663,362 1513,190 1315.5,95 1118,0 896,0 l 74,132 q 212,18 392.5,137 180.5,119 301.5,307 -115,179 -282,294 l 63,112 q 95,-64 182.5,-153 87.5,-89 144.5,-184 20,-34 20,-69 z\" fill=\"#c0c0c0\"></path></g></symbol></svg>`\r\n    );\r\n    //  var eyeClosed = util.SVGParser('<svg xmlns=\"http://www.w3.org/2000/svg\"><symbol id=\"' + this.eyeId + '\" viewBox=\"0 0 100 100\"><rect fill=\"black\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" /></symbol></svg>');\r\n\r\n    /* var eyeClosed = document.createElementNS( this.graph.ns, \"symbol\");\r\n      eyeClosed.setAttribute('id', this.eyeId );\r\n      eyeClosed.setAttribute(\"viewBox\", '0 0 100 100');\r\n\r\n      var rect = document.createElementNS( this.graph.ns, \"rect\" );\r\n      rect.setAttribute('width', 100 );\r\n      rect.setAttribute('height', 100 );\r\n      rect.setAttribute('x', 0 );\r\n      rect.setAttribute('y', 0 );\r\n      rect.setAttribute('fill', 'black');\r\n      eyeClosed.appendChild( rect );\r\n  */\r\n    var eye = util.SVGParser(\r\n      `<svg xmlns=\"http://www.w3.org/2000/svg\"><symbol id=\"${this.eyeId\r\n      }\" viewBox=\"0 -256 1850 1850\"><rect pointer-events=\"fill\" x=\"-256\" y=\"0\" fill=\"transparent\" width=\"2106\" height=\"1850\" /><g transform=\"matrix(1,0,0,-1,30.372881,1259.8983)\"><path d=\"m 1664,576 q -152,236 -381,353 61,-104 61,-225 0,-185 -131.5,-316.5 Q 1081,256 896,256 711,256 579.5,387.5 448,519 448,704 448,825 509,929 280,812 128,576 261,371 461.5,249.5 662,128 896,128 1130,128 1330.5,249.5 1531,371 1664,576 z M 944,960 q 0,20 -14,34 -14,14 -34,14 -125,0 -214.5,-89.5 Q 592,829 592,704 q 0,-20 14,-34 14,-14 34,-14 20,0 34,14 14,14 14,34 0,86 61,147 61,61 147,61 20,0 34,14 14,14 14,34 z m 848,-384 q 0,-34 -20,-69 Q 1632,277 1395.5,138.5 1159,0 896,0 633,0 396.5,139 160,278 20,507 0,542 0,576 q 0,34 20,69 140,229 376.5,368 236.5,139 499.5,139 263,0 499.5,-139 236.5,-139 376.5,-368 20,-35 20,-69 z\" fill=\"#444444\" /></g></symbol></svg>`\r\n    );\r\n\r\n    this.svg.appendChild( document.adoptNode( eye.documentElement.firstChild ) );\r\n    this.svg.appendChild(\r\n      document.adoptNode( eyeClosed.documentElement.firstChild )\r\n    );\r\n\r\n    this.svg.appendChild( this.subG );\r\n\r\n    this.applyStyle();\r\n  }\r\n\r\n  /**\r\n   * Sets the position of the legend\r\n   * @param {Position} position - the position to set the legend to versus the graph main axes ({@link Graph#getXAxis} and {@link Graph#getYAxis})\r\n   * @param {String} alignToX - \"right\" or \"left\". References the legend right or left boundary using the position parameter\r\n   * @param {String} alignToY - \"top\" or \"bottom\". References the legend top or bottom boundary using the position parameter\r\n   * @example legend.setPosition( { x: 'max', y: '0px' }, 'right', 'top' ); // The rightmost side of the legend will at the maximum value of the axis, and will be positioned at the top\r\n   */\r\n  setPosition( position, alignToX, alignToY ) {\r\n    if ( !position ) {\r\n      return;\r\n    }\r\n\r\n    this.position = position;\r\n    this.alignToX = alignToX || 'left';\r\n    this.alignToY = alignToY || 'top';\r\n  }\r\n\r\n  setDraggable( bln ) {\r\n    this.options.movable = bln;\r\n  }\r\n\r\n  setAutoPosition( position ) {\r\n    if (\r\n      [ 'bottom', 'left', 'top', 'right' ].indexOf(\r\n        ( position = position.toLowerCase() )\r\n      ) > -1\r\n    ) {\r\n      this.autoPosition = position;\r\n      return this;\r\n    }\r\n\r\n    this.requireDelayedUpdate();\r\n    this.autoPosition = false;\r\n  }\r\n\r\n  autoPosition() {\r\n    return this.setAutoPosition( ...arguments );\r\n  }\r\n\r\n  kill() {\r\n\r\n    if ( !this.autoPosition ) {\r\n      this.graph.graphingZone.removeChild( this.getDom() );\r\n    } else {\r\n      this.graph.getDom().removeChild( this.getDom() );\r\n    }\r\n  }\r\n\r\n  buildLegendBox() {\r\n    var series = this.series || this.graph.getSeries(),\r\n      posX = 0,\r\n      posY = this.options.paddingTop;\r\n\r\n    if ( !this.autoPosition ) {\r\n      this.graph.graphingZone.appendChild( this.getDom() );\r\n    } else {\r\n      this.graph.getDom().appendChild( this.getDom() );\r\n    }\r\n\r\n    for ( var i = 0, l = series.length; i < l; i++ ) {\r\n      if ( series[ i ].excludedFromLegend && !this.series ) {\r\n        continue;\r\n      }\r\n\r\n      if ( this.autoPosition == 'bottom' || this.autoPosition == 'top' ) {\r\n        var bbox = getBBox( this.groups[ i ] );\r\n\r\n        if (\r\n          posX + bbox.width >\r\n          this.graph.getDrawingWidth() - this.options.paddingRight\r\n        ) {\r\n          posY += 16;\r\n          posX = 0;\r\n        }\r\n      }\r\n\r\n      this.groups[ i ].setAttribute( 'transform', `translate( ${posX}, ${posY})` );\r\n\r\n      if ( this.autoPosition == 'bottom' || this.autoPosition == 'top' ) {\r\n        posX += bbox.width + 10;\r\n        posY += 0;\r\n      } else {\r\n        posX = 0;\r\n        posY += 16;\r\n      }\r\n    }\r\n\r\n    var bbox = getBBox( this.subG );\r\n\r\n    /* Independant on box position */\r\n    this.width =\r\n      bbox.width + this.options.paddingRight + this.options.paddingLeft;\r\n    this.height =\r\n      bbox.height + this.options.paddingBottom + this.options.paddingTop;\r\n\r\n    this.rect.setAttribute( 'width', this.width );\r\n    this.rect.setAttribute( 'height', this.height );\r\n    this.rect.setAttribute( 'fill', 'none' );\r\n    this.rect.setAttribute( 'pointer-events', 'fill' );\r\n\r\n    this.rect.setAttribute( 'display', 'none' );\r\n\r\n    if ( this.options.movable ) {\r\n      this.rectBottom.style.cursor = 'move';\r\n    }\r\n\r\n    this.rectBottom.setAttribute( 'width', this.width );\r\n    this.rectBottom.setAttribute( 'height', this.height );\r\n\r\n    this.rectBottom.setAttribute( 'x', bbox.x - this.options.paddingLeft );\r\n    this.rectBottom.setAttribute( 'y', bbox.y - this.options.paddingTop );\r\n    /* End independant on box position */\r\n\r\n    this.position = this.position || {};\r\n\r\n    switch ( this.autoPosition ) {\r\n      case 'bottom':\r\n        this.position.y = `${this.graph.getHeight()}px`;\r\n        // Try to center with respect to the drawing space, not the full graph. It's useful when the graph is fairly asymmetric (i.e. multiple axes on 1 side)\r\n        this.position.x = `${( this.graph.drawingSpaceWidth - this.width ) / 2 +\r\n          this.graph.drawingSpaceMinX}px`;\r\n        this.alignToY = 'bottom';\r\n        this.alignToX = false;\r\n        break;\r\n\r\n      case 'left':\r\n        this.position.x = '6px';\r\n        this.position.y = `${( this.graph.getHeight() - this.height ) / 2}px`;\r\n        this.alignToX = 'left';\r\n        this.alignToY = false;\r\n        break;\r\n\r\n      case 'right':\r\n        this.position.x = `${this.graph.getWidth()}px`;\r\n        this.position.y = `${( this.graph.getHeight() - this.height ) / 2}px`;\r\n        this.alignToX = 'right';\r\n        this.alignToY = false;\r\n        break;\r\n\r\n      case 'top':\r\n        this.position.x = `${( this.graph.drawingSpaceWidth - this.width ) / 2 +\r\n          this.graph.drawingSpaceMinX}px`;\r\n        this.position.y = '10px';\r\n        this.alignToY = 'top';\r\n        this.alignToX = false;\r\n        break;\r\n\r\n      default:\r\n        console.error( 'Position is not supported' );\r\n        return;\r\n\r\n    }\r\n    if ( this.autoPosition ) {\r\n      let redrawGraph;\r\n      switch ( this.autoPosition ) {\r\n        case 'bottom':\r\n          this.graph.options.paddingBottom = this.height + 10;\r\n\r\n          redrawGraph = this.height !== this.previousHeight;\r\n          break;\r\n\r\n        case 'top':\r\n          this.graph.options.paddingTop = this.height + 14;\r\n\r\n          redrawGraph = this.height !== this.previousHeight;\r\n          break;\r\n\r\n        case 'left':\r\n          this.graph.options.paddingLeft = this.width + 5;\r\n\r\n          redrawGraph = this.width !== this.previousWidth;\r\n          break;\r\n\r\n        case 'right':\r\n          this.graph.options.paddingRight = this.width + 10;\r\n\r\n          redrawGraph = this.width !== this.previousWidth;\r\n          break;\r\n      }\r\n\r\n      if ( redrawGraph ) {\r\n        this.graph.draw( true );\r\n        this.previousHeight = this.height;\r\n        this.previousWidth = this.width;\r\n      }\r\n    }\r\n\r\n    this.bbox = bbox;\r\n  }\r\n\r\n  calculatePosition() {\r\n    var pos = GraphPosition.check( this.position );\r\n    let poscoords = pos.compute(\r\n      this.graph,\r\n      this.graph.getXAxis(),\r\n      this.graph.getYAxis()\r\n    );\r\n\r\n    if ( !poscoords ) {\r\n      return;\r\n    }\r\n\r\n    // I don't think this is correct... y=max already is axis-relative.\r\n    if ( pos.y == 'max' ) {\r\n      //    poscoords.y += this.graph.getPaddingTop();\r\n    }\r\n\r\n    if ( pos.x == 'max' ) {\r\n      // todo\r\n    }\r\n\r\n    // This was making the autoPosition fail. But I can totally see how this will cause problems in other case scenarios...\r\n    // poscoords.y += this.graph.getPaddingTop();\r\n    // poscoords.x += this.graph.getPaddingLeft();\r\n\r\n    if ( this.alignToX == 'right' ) {\r\n      poscoords.x -= this.width;\r\n      //poscoords.x -= this.bbox.x;\r\n    } else {\r\n      //poscoords.x -= this.bbox.x;\r\n    }\r\n\r\n    if ( this.alignToY == 'bottom' ) {\r\n      poscoords.y -= this.height;\r\n      //    poscoords.y -= this.bbox.y;\r\n    } else {\r\n      //     poscoords.y -= this.bbox.y;\r\n    }\r\n\r\n    this.pos.transformX = poscoords.x;\r\n    this.pos.transformY = poscoords.y;\r\n\r\n    this._setPosition();\r\n  }\r\n\r\n  /**\r\n   * Updates the legend position and content\r\n   */\r\n  update( onlyIfRequired ) {\r\n    if (\r\n      this.graph.isDelayedUpdate() ||\r\n      ( !this._requiredUpdate && onlyIfRequired )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this._requiredUpdate = false;\r\n\r\n    var self = this;\r\n\r\n    this.applyStyle();\r\n\r\n    while ( this.subG.hasChildNodes() ) {\r\n      this.subG.removeChild( this.subG.lastChild );\r\n    }\r\n\r\n    this.svg.insertBefore( this.rectBottom, this.svg.firstChild );\r\n\r\n    var series = this.series || this.graph.getSeries(),\r\n      line,\r\n      text,\r\n      g;\r\n\r\n    if ( series.length > 0 ) {\r\n      this.svg.setAttribute( 'display', 'block' );\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if ( this.autoPosition == 'bottom' || this.autoPosition == 'top' ) {\r\n      var fullWidth = this.graph.getDrawingWidth();\r\n    }\r\n\r\n    var posX, posY;\r\n\r\n    for ( let i = 0, l = series.length; i < l; i++ ) {\r\n      if ( series[ i ].excludedFromLegend && !this.series ) {\r\n        continue;\r\n      }\r\n\r\n      var g,\r\n        line,\r\n        text,\r\n        xPadding = 0;\r\n\r\n      const j = i;\r\n\r\n      if ( this.autoPosition == 'bottom' || this.autoPosition == 'top' ) {\r\n        var fullWidth = this.graph.getDrawingWidth();\r\n      }\r\n\r\n      g = document.createElementNS( self.graph.ns, 'g' );\r\n      var rect = document.createElementNS( self.graph.ns, 'rect' );\r\n\r\n      self.subG.appendChild( g );\r\n\r\n      g.appendChild( rect );\r\n\r\n      series[ i ].getSymbolForLegend();\r\n\r\n      var line = series[ i ]._getSymbolForLegendContainer();\r\n      var marker = series[ i ].getMarkerForLegend();\r\n      var text = series[ i ].getTextForLegend();\r\n\r\n      var dx = 35;\r\n      const eyeUse = document.createElementNS( self.graph.ns, 'use' );\r\n      if ( this.isHideable() ) {\r\n        dx += 20;\r\n\r\n        eyeUse.setAttributeNS(\r\n          'http://www.w3.org/1999/xlink',\r\n          'xlink:href',\r\n          `#${series[i].isShown() ? this.eyeId : this.eyeCrossedId}`\r\n        );\r\n        eyeUse.setAttribute( 'width', 15 );\r\n        eyeUse.setAttribute( 'height', 15 );\r\n        eyeUse.setAttribute( 'x', 35 );\r\n        eyeUse.setAttribute( 'y', -8 );\r\n\r\n        eyeUse.addEventListener( 'click', function( e ) {\r\n          e.stopPropagation();\r\n\r\n          var id;\r\n          if ( series[ j ].isShown() ) {\r\n            series[ j ].hide( self.options.hideShapesOnHideSerie );\r\n            id = self.eyeCrossedId;\r\n          } else {\r\n            series[ j ].show( self.options.hideShapesOnHideSerie );\r\n            id = self.eyeId;\r\n          }\r\n\r\n          eyeUse.setAttributeNS(\r\n            'http://www.w3.org/1999/xlink',\r\n            'xlink:href',\r\n            `#${id}`\r\n          );\r\n        } );\r\n      }\r\n\r\n      text.setAttribute( 'transform', `translate(${dx}, 3)` );\r\n      text.setAttribute( 'fill', this.options.color );\r\n\r\n      if ( line ) {\r\n        g.appendChild( line );\r\n      }\r\n\r\n      if ( series[ i ].getType() == 'scatter' ) {\r\n        line.setAttribute( 'transform', 'translate( 20, 0 )' );\r\n      }\r\n\r\n      if ( marker ) {\r\n        g.appendChild( marker );\r\n      }\r\n\r\n      if ( eyeUse ) {\r\n        g.appendChild( eyeUse );\r\n      }\r\n\r\n      g.appendChild( text );\r\n\r\n      var bbox = getBBox( g );\r\n\r\n      rect.setAttribute( 'x', bbox.x );\r\n      rect.setAttribute( 'y', bbox.y );\r\n      rect.setAttribute( 'width', bbox.width );\r\n      rect.setAttribute( 'height', bbox.height );\r\n      rect.setAttribute( 'fill', 'none' );\r\n      rect.setAttribute( 'pointer-events', 'fill' );\r\n\r\n      self.groups[ i ] = g;\r\n\r\n      g.addEventListener( 'click', function( e ) {\r\n        var serie = series[ i ];\r\n\r\n        if ( !serie.isShown() ) {\r\n          return;\r\n        }\r\n        if ( self.isSelectable() && !serie.isSelected() ) {\r\n          self.graph.selectSerie( serie );\r\n        } else {\r\n          self.graph.unselectSerie( serie );\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      } );\r\n    }\r\n\r\n    this.svg.appendChild( this.rect );\r\n    this.buildLegendBox();\r\n    this.calculatePosition();\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} true or false depending if the series can be hidden or not\r\n   */\r\n  isHideable() {\r\n    return this.options.isSerieHideable;\r\n  }\r\n\r\n  notHideable() {\r\n    this.options.isSerieHideable = false;\r\n    return this;\r\n  }\r\n\r\n  hideable() {\r\n    this.options.isSerieHideable = true;\r\n    return this;\r\n  }\r\n\r\n  set seriesHideable( hideable ) {\r\n    this.options.isSerieHideable = !!hideable;\r\n  }\r\n\r\n  /**\r\n   *  @type {Boolean}\r\n   */\r\n  get seriesHideable() {\r\n    return this.options.isSerieHideable;\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} true or false depending if the series can be selected or not\r\n   */\r\n  isSelectable() {\r\n    return this.options.isSerieSelectable;\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} true or false depending if the series can be t or not\r\n   */\r\n  isToggleShapes() {\r\n    return this.options.shapesToggleable;\r\n  }\r\n\r\n  /**\r\n   * @return {SVGGroupElement} The SVG group element wrapping the legend\r\n   */\r\n  getDom() {\r\n    return this.svg;\r\n  }\r\n\r\n  setEvents() {\r\n    var self = this;\r\n    var pos = this.pos;\r\n\r\n    var mousedown = function( e ) {\r\n      e.stopPropagation();\r\n      if ( self.options.movable ) {\r\n        pos.x = e.clientX;\r\n        pos.y = e.clientY;\r\n\r\n        e.preventDefault();\r\n        self.mousedown = true;\r\n        self.graph.elementMoving( self );\r\n\r\n        self.rect.setAttribute( 'display', 'block' );\r\n      }\r\n    };\r\n\r\n    var mousemove = function( e ) {\r\n      self.handleMouseMove( e );\r\n    };\r\n\r\n    this.svg.addEventListener( 'mousedown', mousedown );\r\n    this.svg.addEventListener( 'click', function( e ) {\r\n      e.stopPropagation();\r\n    } );\r\n    this.svg.addEventListener( 'dblclick', function( e ) {\r\n      e.stopPropagation();\r\n    } );\r\n    this.svg.addEventListener( 'mousemove', mousemove );\r\n    //this.rect.addEventListener( 'mousemove', mousemove );\r\n  }\r\n\r\n  handleMouseUp( e ) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    this.mousedown = false;\r\n    this.rect.setAttribute( 'display', 'none' );\r\n    this.graph.elementMoving( false );\r\n  }\r\n\r\n  handleMouseMove( e ) {\r\n    if ( !this.mousedown ) {\r\n      return;\r\n    }\r\n\r\n    var pos = this.pos;\r\n\r\n    var deltaX = e.clientX - pos.x;\r\n    var deltaY = e.clientY - pos.y;\r\n\r\n    pos.transformX += deltaX;\r\n    pos.transformY += deltaY;\r\n\r\n    pos.x = e.clientX;\r\n    pos.y = e.clientY;\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    this._setPosition();\r\n  }\r\n\r\n  _setPosition() {\r\n    var pos = this.pos;\r\n    if (\r\n      !isNaN( pos.transformX ) &&\r\n      !isNaN( pos.transformY ) &&\r\n      pos.transformX !== false &&\r\n      pos.transformY !== false\r\n    ) {\r\n      this.svg.setAttribute(\r\n        'transform',\r\n        `translate(${pos.transformX}, ${pos.transformY})`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Re-applies the legend style\r\n   */\r\n  applyStyle() {\r\n    if ( this.options.frame ) {\r\n      this.rectBottom.setAttribute( 'stroke', this.options.frameColor );\r\n      this.rectBottom.setAttribute(\r\n        'stroke-width',\r\n        `${this.options.frameWidth}px`\r\n      );\r\n      this.rectBottom.setAttribute( 'rx', this.options.frameRounding );\r\n      this.rectBottom.setAttribute( 'ry', this.options.frameRounding );\r\n    }\r\n\r\n    this.rectBottom.setAttribute( 'fill', this.options.backgroundColor );\r\n  }\r\n\r\n  /**\r\n   * Re-applies the legend style\r\n   * @param {...(GraphSerie|GraphSerie[])} a serie or an array of series\r\n   */\r\n  fixSeries() {\r\n    var series = [];\r\n\r\n    if ( arguments[ 0 ] === false ) {\r\n      this.series = false;\r\n      this.update();\r\n      return;\r\n    }\r\n\r\n    for ( var i = 0, l = arguments.length; i < l; i++ ) {\r\n      if ( Array.isArray( arguments[ i ] ) ) {\r\n        series = series.concat( arguments[ i ] );\r\n      } else {\r\n        series.push( arguments[ i ] );\r\n      }\r\n    }\r\n\r\n    this.update();\r\n    this.series = series;\r\n  }\r\n\r\n  fixSeriesAdd( serie ) {\r\n    this.series = this.series || [];\r\n    this.series.push( serie );\r\n  }\r\n\r\n  requireDelayedUpdate() {\r\n    this._requiredUpdate = true;\r\n  }\r\n}\r\n\r\nfunction getBBox( svgElement ) {\r\n  // Firefox throws when trying to call getBBox() on elements\r\n  // that are not yet rendered.\r\n  try {\r\n    return svgElement.getBBox();\r\n  } catch ( e ) {\r\n    return {\r\n      height: 0,\r\n      width: 0,\r\n      x: 0,\r\n      y: 0\r\n    };\r\n  }\r\n}\r\n\r\nexport default Legend;","import {\r\n  EventMixin,\r\n  trigger\r\n} from './graph.mixin.event.js';\r\nlet ExtendedEventMixin = (manglingName) => {\r\n\r\n  return Object.assign({}, EventMixin, {\r\n\r\n    trigger(eventName, ...args) {\r\n\r\n      trigger.call(this, eventName, ...args);\r\n\r\n      if (this.graph) {\r\n        this.graph.trigger(manglingName + \".\" + eventName, ...args);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    emit(eventName, ...args) {\r\n      return this.trigger(eventName, ...args);\r\n    }\r\n  });\r\n};\r\n\r\nexport default (Obj, manglingName = \"__\") => {\r\n\r\n  Object.assign(Obj.prototype, ExtendedEventMixin(manglingName));\r\n};","import Graph from './graph.core.js';\r\nimport * as util from './graph.util.js';\r\nimport EventMixin from './mixins/graph.mixin.event_graph.js';\r\n\r\n/**\r\n * Default graph parameters\r\n * @name AxisOptionsDefault\r\n * @object\r\n * @static\r\n * @memberof Axis\r\n * @prop {Boolean} display - Whether to display or not the axis\r\n * @prop {Boolean} flipped - Flips the axis (maximum and minimum will be inverted)\r\n * @prop {Numner} axisDataSpacing.min - The spacing of the at the bottom of the axis. The value is multiplied by the (max - min) values given by the series (0.1 means 10% of the serie width / height).\r\n * @prop {Number} axisDataSpacing.max - The spacing of the at the top of the axis. The value is multiplied by the (max - min) values given by the series (0.1 means 10% of the serie width / height).\r\n * @prop {String} unitModification - Used to change the units of the axis in a defined way. Currently, \"time\" and \"time:min.sec\" are supported. They will display the value in days, hours, minutes and seconds and the data should be expressed in seconds.\r\n * @prop {Boolean} primaryGrid - Whether or not to display the primary grid (on the main ticks)\r\n * @prop {Boolean} secondaryGrid - Whether or not to display the secondary grid (on the secondary ticks)\r\n * @prop {Number} tickPosition - Sets the position of the ticks with regards to the axis ( 1 = inside, 2 = centered, 3 = outside ).\r\n * @prop {Number} nbTicksPrimary - The number of primary ticks to use (approximately)\r\n * @prop {Number} nbTicksSecondary - The number of secondary ticks to use (approximately)\r\n * @prop {Number} ticklabelratio - Scaling factor on the labels under each primary ticks\r\n * @prop {Number} exponentialFactor - Scales the labels under each primary ticks by 10^(exponentialFactor)\r\n * @prop {Number} exponentialLabelFactor - Scales the axis label by 10^(exponentialFactor)\r\n * @prop {Boolean} logScale - Display the axis in log scale (base 10)\r\n * @prop {(Number|Boolean)} forcedMin - Use a number to force the minimum value of the axis (becomes independant of its series)\r\n * @prop {(Number|Boolean)} forcedMax - Use a number to force the maximum value of the axis (becomes independant of its series)\r\n */\r\nconst defaults = {\r\n\r\n  name: undefined,\r\n\r\n  lineAt: false,\r\n  display: true,\r\n  flipped: false,\r\n  axisDataSpacing: {\r\n    min: 0.1,\r\n    max: 0.1\r\n  },\r\n  unitModification: false,\r\n  primaryGrid: true,\r\n  secondaryGrid: true,\r\n\r\n  primaryGridWidth: 1,\r\n  primaryGridColor: '#f0f0f0',\r\n  primaryGridDasharray: undefined,\r\n  primaryGridOpacity: undefined,\r\n  primaryTicksColor: 'black',\r\n\r\n  secondaryGridWidth: 1,\r\n  secondaryGridColor: '#f0f0f0',\r\n  secondaryGridDasharray: undefined,\r\n  secondaryGridOpacity: undefined,\r\n  secondaryTicksColor: 'black',\r\n\r\n  hideWhenNoSeriesShown: false,\r\n  shiftToZero: false,\r\n  tickPosition: 1,\r\n  nbTicksPrimary: 3,\r\n  nbTicksSecondary: 10,\r\n  ticklabelratio: 1,\r\n  exponentialFactor: 0,\r\n  exponentialLabelFactor: 0,\r\n  logScale: false,\r\n  forcedMin: false,\r\n  forcedMax: false,\r\n\r\n  span: [0, 1],\r\n  marginMin: 0,\r\n  marginMax: 0,\r\n\r\n  scientificScale: false,\r\n  scientificScaleExponent: false,\r\n  engineeringScale: false,\r\n\r\n  unitInTicks: false,\r\n  unit: false,\r\n  unitWrapperBefore: '',\r\n  unitWrapperAfter: '',\r\n\r\n\r\n  tickLabelOffset: 0,\r\n\r\n  useKatexForLabel: false,\r\n\r\n  highestMax: undefined,\r\n  lowestMin: undefined,\r\n\r\n  labelValue: ''\r\n};\r\n\r\n/**\r\n * Axis constructor. Usually not instanced directly, but for custom made axes, that's possible\r\n * @class Axis\r\n * @static\r\n * @example function myAxis() {};\r\n * myAxis.prototype = new Graph.getConstructor(\"axis\");\r\n * graph.setBottomAxis( new myAxis( { } ) );\r\n */\r\nclass Axis {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  init(graph, options, overwriteoptions) {\r\n\r\n    this.unitModificationTimeTicks = [\r\n      [1, [1, 2, 5, 10, 20, 30]],\r\n      [60, [1, 2, 5, 10, 20, 30]],\r\n      [3600, [1, 2, 6, 12]],\r\n      [3600 * 24, [1, 2, 3, 4, 5, 10, 20, 40]]\r\n    ];\r\n\r\n    this.graph = graph;\r\n    this.options = util.extend(true, {}, defaults, overwriteoptions, options);\r\n\r\n    this.group = document.createElementNS(this.graph.ns, 'g');\r\n    this.hasChanged = true;\r\n\r\n    this.rectEvent = document.createElementNS(this.graph.ns, 'rect');\r\n    this.rectEvent.setAttribute('pointer-events', 'fill');\r\n    this.rectEvent.setAttribute('fill', 'transparent');\r\n    this.group.appendChild(this.rectEvent);\r\n\r\n    this.graph.axisGroup.appendChild(this.group); // Adds to the main axiszone\r\n\r\n    // Lines at a certain value\r\n    this._lines = [];\r\n\r\n    this.line = document.createElementNS(this.graph.ns, 'line');\r\n    this.line.setAttribute('stroke', 'black');\r\n    this.line.setAttribute('shape-rendering', 'crispEdges');\r\n    this.line.setAttribute('stroke-linecap', 'square');\r\n    this.groupTicks = document.createElementNS(this.graph.ns, 'g');\r\n    this.groupTickLabels = document.createElementNS(this.graph.ns, 'g');\r\n\r\n    this.group.appendChild(this.groupTicks);\r\n    this.group.appendChild(this.groupTickLabels);\r\n    this.group.appendChild(this.line);\r\n\r\n    this.label = document.createElementNS(this.graph.ns, 'text');\r\n\r\n    this.labelTspan = document.createElementNS(this.graph.ns, 'tspan'); // Contains the main label\r\n    this.preunit = ''; //document.createElementNS( this.graph.ns, 'tspan' ); // Contains the scaling unit\r\n    this.unitTspan = document.createElementNS(this.graph.ns, 'tspan'); // Contains the unit\r\n    this.expTspan = document.createElementNS(this.graph.ns, 'tspan'); // Contains the exponent (x10)\r\n    this.expTspanExp = document.createElementNS(this.graph.ns, 'tspan'); // Contains the exponent value\r\n\r\n    this.label.appendChild(this.labelTspan);\r\n    //this.label.appendChild( this.preunitTspan );\r\n    this.label.appendChild(this.unitTspan);\r\n    this.label.appendChild(this.expTspan);\r\n    this.label.appendChild(this.expTspanExp);\r\n\r\n    this.expTspan.setAttribute('dx', 6);\r\n    this.expTspanExp.setAttribute('dy', -5);\r\n    this.expTspanExp.setAttribute('font-size', '0.8em');\r\n\r\n    this.label.setAttribute('text-anchor', 'middle');\r\n\r\n    this.setTickPosition(this.options.tickPosition);\r\n\r\n    this.gridLinePath = {\r\n      primary: '',\r\n      secondary: ''\r\n    };\r\n\r\n    this.gridPrimary = document.createElementNS(this.graph.ns, 'path');\r\n    this.gridSecondary = document.createElementNS(this.graph.ns, 'path');\r\n\r\n    this.graph.groupPrimaryGrids.appendChild(this.gridPrimary);\r\n    this.graph.groupSecondaryGrids.appendChild(this.gridSecondary);\r\n\r\n    this.setGridLinesStyle();\r\n\r\n    this.group.appendChild(this.label);\r\n\r\n    this.groupSeries = document.createElementNS(this.graph.ns, 'g');\r\n    this.group.appendChild(this.groupSeries);\r\n\r\n    this.widthHeightTick = 0;\r\n\r\n    this.ticks = {};\r\n    this.ticksLabels = [];\r\n    this.tickScaling = {\r\n      1: 3,\r\n      2: 2,\r\n      3: 1,\r\n      4: 0.5\r\n    };\r\n\r\n    this.currentTick = {};\r\n    this.lastCurrentTick = {};\r\n\r\n    this.series = [];\r\n    this.totalDelta = 0;\r\n    this.currentAction = false;\r\n\r\n    this.group.addEventListener('mousemove', (e) => {\r\n      e.preventDefault();\r\n      var coords = this.graph._getXY(e);\r\n      this.handleMouseMoveLocal(coords.x, coords.y, e);\r\n\r\n      for (var i = 0, l = this.series.length; i < l; i++) {\r\n        this.series[i].handleMouseMove(false, true);\r\n      }\r\n    });\r\n\r\n    this.labels = [];\r\n    this.group.addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n      var coords = this.graph._getXY(e);\r\n      this.addLabel(this.getVal(coords.x - this.graph.getPaddingLeft()));\r\n    });\r\n\r\n    //this.clip = document.createElementNS( this.graph.ns, 'clipPath' );\r\n    //this.clip.setAttribute( 'id', '_clip' + this.axisRand );\r\n    //this.graph.defs.appendChild( this.clip );\r\n    /*\r\n        this.clipRect = document.createElementNS( this.graph.ns, 'rect' );\r\n        this.clip.appendChild( this.clipRect );\r\n        this.clip.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );\r\n    */\r\n    this.gridPrimary.setAttribute('clip-path', `url(#_clipplot${this.graph._creation})`);\r\n    this.gridSecondary.setAttribute('clip-path', `url(#_clipplot${this.graph._creation})`);\r\n    this.graph._axisHasChanged(this);\r\n\r\n    this.cache();\r\n  }\r\n\r\n  handleMouseMoveLocal() { }\r\n\r\n  /**\r\n   * Hides the axis\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  hide() {\r\n    this.options.display = false;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows the axis\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  show() {\r\n    this.options.display = true;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows or hides the axis\r\n   * @memberof Axis\r\n   * @param {Boolean} display - true to display the axis, false to hide it\r\n   * @return {Axis} The current axis\r\n   */\r\n  setDisplay(bool) {\r\n    this.options.display = !!bool;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Boolean} A boolean indicating the displayed state of the axis\r\n   */\r\n  isDisplayed() {\r\n\r\n    if (!this.options.hideWhenNoSeriesShown) {\r\n      return this.options.display;\r\n    }\r\n\r\n    return this.graph.getSeriesFromAxis(this).reduce((accumulator, serie) => {\r\n      return accumulator || serie.isShown();\r\n    }, false);\r\n  }\r\n\r\n  isShown() {\r\n\r\n    return this.isDisplayed(...arguments);\r\n  }\r\n\r\n  hideGroup() {\r\n    if (this._hidden) {\r\n      return;\r\n    }\r\n    this._hidden = true;\r\n    this.group.setAttribute('display', 'none');\r\n  }\r\n\r\n  showGroup() {\r\n    if (!this._hidden) {\r\n      return;\r\n    }\r\n    this._hidden = false;\r\n    this.group.setAttribute('display', 'initial');\r\n  }\r\n\r\n  kill(noRedraw, noSerieKill) {\r\n    this.graph.killAxis(this, noRedraw, noSerieKill);\r\n  }\r\n  /**\r\n   * Forces the appearence of a straight perpendicular line at value 0\r\n   * @param {Array<Number>} atValues - An array of x or y values where the lines are displayed\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setLineAt(atValues) {\r\n    this.options.lineAt = atValues;\r\n    return this;\r\n  }\r\n\r\n  // Used to adapt the 0 of the axis to the zero of another axis that has the same direction\r\n\r\n  /**\r\n   * Aligns ```thisValue``` of the axis to ```foreignValue``` of another axis\r\n   * @param {(Axis|Boolean)} axis - The axis with which the 0 should be aligned. Use \"false\" to deactivate the adapt to 0 mode.\r\n   * @param {Number} thisValue - The value of the current axis that should be aligned\r\n   * @param {Number} foreignValue - The value of the reference axis that should be aligned\r\n   * @param {String} preference - \"min\" or \"max\". Defined the boundary that should behave the more normally\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.2\r\n   */\r\n  adaptTo(axis, thisValue, foreignValue, preference) {\r\n\r\n    if (!axis) {\r\n      this.options.adaptTo = false;\r\n      return this;\r\n    }\r\n\r\n    this.options.adaptTo = {\r\n      axis: axis,\r\n      thisValue: thisValue,\r\n      foreignValue: foreignValue,\r\n      preference: preference\r\n    };\r\n\r\n    this.adapt();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adapts maximum and minimum of the axis if options.adaptTo is defined\r\n   * @memberof Axis\r\n   * @returns {Axis} The current axis\r\n   * @since 1.13.2\r\n   */\r\n  adapt() {\r\n\r\n    if (!this.options.adaptTo) {\r\n      return;\r\n    }\r\n\r\n    var axis = this.options.adaptTo.axis,\r\n      current = this.options.adaptTo.thisValue,\r\n      foreign = this.options.adaptTo.foreignValue;\r\n    if (axis.options.currentAxisMin === undefined || axis.options.currentAxisMax === undefined) {\r\n      axis.setMinMaxToFitSeries();\r\n    }\r\n    if ((this.options.forcedMin !== false && this.options.forcedMax == false) || (this.options.adaptTo.preference !== 'max')) {\r\n\r\n      if (this.options.forcedMin !== false) {\r\n        this.options.currentAxisMin = this.options.forcedMin;\r\n      } else if (this._zoomed) {\r\n        this.options.currentAxisMin = this.getCurrentMin();\r\n      } else {\r\n        this.options.currentAxisMin = this.getMinValue() - (current - this.getMinValue()) * (this.options.axisDataSpacing.min * (axis.getCurrentMax() - axis.getCurrentMin()) / (foreign - axis.getCurrentMin()));\r\n      }\r\n\r\n      var use = this.options.forcedMin !== false ? this.options.forcedMin : this.options.currentAxisMin;\r\n      this.options.currentAxisMax = (current - use) * (axis.getCurrentMax() - axis.getCurrentMin()) / (foreign - axis.getCurrentMin()) + use;\r\n\r\n    } else {\r\n\r\n      if (this.options.forcedMax !== false) {\r\n        this.options.currentAxisMax = this.options.forcedMax;\r\n      } else if (this._zoomed) {\r\n        this.options.currentAxisMax = this.getCurrentMax();\r\n      } else {\r\n        this.options.currentAxisMax = this.getMaxValue() + (this.getMaxValue() - current) * (this.options.axisDataSpacing.max * (axis.getCurrentMax() - axis.getCurrentMin()) / (axis.getCurrentMax() - foreign));\r\n      }\r\n\r\n      if (this.options.currentAxisMax == current) {\r\n        this.options.currentAxisMax += this.options.axisDataSpacing.max * this.getInterval();\r\n      }\r\n\r\n      var use = this.options.forcedMax !== false ? this.options.forcedMax : this.options.currentAxisMax;\r\n\r\n      this.options.currentAxisMin = (current - use) * (axis.getCurrentMin() - axis.getCurrentMax()) / (foreign - axis.getCurrentMax()) + use;\r\n    }\r\n\r\n    this.graph._axisHasChanged(this);\r\n  }\r\n\r\n  // Floating axis. Adapts axis position orthogonally to another axis at a defined value. Not taken into account for margins\r\n\r\n  /**\r\n   * Makes the axis floating (not aligned to the right or the left anymore). You need to specify another axis (perpendicular) and a value at which this axis should be located\r\n   * @param {Axis} axis - The axis on which the current axis should be aligned to\r\n   * @param {Number} value - The value on which the current axis should be aligned\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   * @example graph.getYAxis().setFloat( graph.getBottomAxis(), 0 ); // Alignes the y axis with the origin of the bottom axis\r\n   */\r\n  setFloating(axis, value) {\r\n\r\n    this.floating = true;\r\n    this.floatingAxis = axis;\r\n    this.floatingValue = value;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Axis} The axis referencing the floating value of the current axis\r\n   */\r\n  getFloatingAxis() {\r\n    return this.floatingAxis;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Axis} The value to which the current axis is aligned to\r\n   */\r\n  getFloatingValue() {\r\n    return this.floatingValue;\r\n  }\r\n\r\n  /**\r\n   * Sets the axis data spacing\r\n   * @memberof Axis\r\n   * @see AxisOptionsDefault\r\n   * @param {Number} min - The spacing at the axis min value\r\n   * @param {Number} [ max = min ] - The spacing at the axis max value. If omitted, will be equal to the \"min\" parameter\r\n   * @return {Axis} The current axis\r\n   */\r\n  setAxisDataSpacing(val1, val2) {\r\n    this.options.axisDataSpacing.min = val1;\r\n    this.options.axisDataSpacing.max = val2 || val1;\r\n    return this;\r\n  }\r\n\r\n  dataSpacing() {\r\n    return this.setAxisDataSpacing(...arguments);\r\n  }\r\n\r\n  /**\r\n   * Sets the axis data spacing at the minimum of the axis\r\n   * @memberof Axis\r\n   * @see AxisOptionsDefault\r\n   * @param {Number} min - The spacing at the axis min value\r\n   * @return {Axis} The current axis\r\n   */\r\n  setAxisDataSpacingMin(val) {\r\n    this.options.axisDataSpacing.min = val;\r\n  }\r\n\r\n  /**\r\n   * Sets the axis data spacing at the maximum of the axis\r\n   * @memberof Axis\r\n   * @see AxisOptionsDefault\r\n   * @param {Number} max - The spacing at the axis max value\r\n   * @return {Axis} The current axis\r\n   */\r\n  setAxisDataSpacingMax(val) {\r\n    this.options.axisDataSpacing.max = val;\r\n  }\r\n\r\n  setMinPx(px) {\r\n\r\n    this.minPx = px;\r\n    this.setMinMaxFlipped();\r\n  }\r\n\r\n  setMaxPx(px) {\r\n\r\n    this.maxPx = px;\r\n    this.setMinMaxFlipped();\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Number} The position in px of the bottom of the axis\r\n   */\r\n  getMinPx() {\r\n    return this.minPxFlipped;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Number} The position in px of the top of the axis\r\n   */\r\n  getMaxPx() {\r\n    return this.maxPxFlipped;\r\n  }\r\n\r\n  getMathMaxPx() {\r\n    return this.maxPx;\r\n  }\r\n\r\n  getMathMinPx() {\r\n    return this.minPx;\r\n  }\r\n\r\n  // Returns the true minimum of the axis. Either forced in options or the one from the data\r\n\r\n  /**\r\n   * Retrieves the minimum possible value of the axis. Can be set by \"forcedMin\", \"adapt0ToAxis\" or by the values of the series the axis contains. Does not take into account any zooming.\r\n   * @memberof Axis\r\n   * @return {Number} The minimum possible value of the axis\r\n   */\r\n  getMinValue() {\r\n    return this.options.forcedMin !== false ? this.options.forcedMin : (!isNaN(this.options.lowestMin) ? Math.max(this.options.lowestMin, this.dataMin) : this.dataMin);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the maximum possible value of the axis. Can be set by \"forcedMax\", \"adapt0ToAxis\" or by the values of the series the axis contains. Does not take into account any zooming.\r\n   * @memberof Axis\r\n   * @return {Number} The maximum possible value of the axis\r\n   */\r\n  getMaxValue() {\r\n    return this.options.forcedMax !== false ? this.options.forcedMax : (!isNaN(this.options.highestMax) ? Math.min(this.options.highestMax, this.dataMax) : this.dataMax);\r\n  }\r\n\r\n  setMinValueData(min) {\r\n    this.dataMin = min;\r\n\r\n    // 25.10.2017. This is to help in the case there's no autoscaling\r\n    if (isNaN(this.getCurrentMin())) {\r\n      //this.setCurrentMin( this.getMinValue() );\r\n      //this.cache();\r\n\r\n    }\r\n  }\r\n\r\n  setMaxValueData(max) {\r\n    this.dataMax = max;\r\n\r\n    // 25.10.2017. This is to help in the case there's no autoscaling\r\n    // 02.02.2018. Don't agree with this. Next time, put a link to show the use of this piece of code\r\n    if (isNaN(this.getCurrentMax())) {\r\n      //     this.setCurrentMax( this.getMaxValue() );\r\n      //this.cache();\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the maximum possible value of the axis based only on the data. Does not take into account the possible axis forcing\r\n   * @memberof Axis\r\n   * @return {Number} The maximum possible value of the axis\r\n   */\r\n  getDataMax() {\r\n    return this.dataMax;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the minimum possible value of the axis based only on the data. Does not take into account the possible axis forcing\r\n   * @memberof Axis\r\n   * @return {Number} The minimum possible value of the axis\r\n   */\r\n  getDataMin() {\r\n    return this.dataMin;\r\n  }\r\n\r\n  /**\r\n   * Sets the highest maximum value of the axis.\r\n   * @memberof Axis\r\n   * @param {Number} max - The maximum value of the axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setLowestMin(lowestMin) {\r\n    this.options.lowestMin = lowestMin;\r\n    this.graph._axisHasChanged(this);\r\n  }\r\n\r\n  /**\r\n   * Forces the minimum value of the axis (no more dependant on the serie values)\r\n   * @memberof Axis\r\n   * @param {Number} min - The minimum value of the axis\r\n   * @param {Boolean} noRescale - ```true``` to prevent the axis to rescale to set this minimum. Rescales anyway if current min is lower than the value. Defaults to ```false```\r\n   * @return {Axis} The current axis\r\n   */\r\n  forceMin(min, noRescale = false) {\r\n    this.options.forcedMin = min;\r\n    this.setCurrentMin(noRescale ? this.getCurrentMin() : undefined);\r\n    this.graph._axisHasChanged(this);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the highest maximum value of the axis.\r\n   * @memberof Axis\r\n   * @param {Number} max - The maximum value of the axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setHighestMax(highestMax) {\r\n    this.options.highestMax = highestMax;\r\n    this.graph._axisHasChanged(this);\r\n  }\r\n\r\n  /**\r\n   * Forces the maximum value of the axis (no more dependant on the serie values).\r\n   * @memberof Axis\r\n   * @param {Number} max - The maximum value of the axis\r\n   * @param {Boolean} noRescale - ```true``` to prevent the axis to rescale to set this maximum. Rescales anyway if current max is higher than the value\r\n   * @return {Axis} The current axis\r\n   */\r\n  forceMax(max, noRescale = false) {\r\n    this.options.forcedMax = max;\r\n    this.setCurrentMax(noRescale ? this.getCurrentMax() : undefined);\r\n    this.graph._axisHasChanged(this);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the forced minimum of the axis\r\n   * @memberof Axis\r\n   * @return {Number} The maximum possible value of the axis\r\n   */\r\n  getForcedMin() {\r\n    return this.options.forcedMin;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the forced minimum of the axis\r\n   * @memberof Axis\r\n   * @return {Number} The maximum possible value of the axis\r\n   */\r\n  getForcedMax() {\r\n    return this.options.forcedMax;\r\n  }\r\n\r\n  /**\r\n   * Forces the min and max values of the axis to the min / max values of another axis\r\n   * @param {Axis} axis - The axis from which the min / max values are retrieved.\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  forceToAxis(axis) {\r\n    if (axis.getMaxValue && axis.getMinValue) {\r\n      this.options.forcedMin = axis.getMinValue();\r\n      this.options.forcedMax = axis.getMaxValue();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  getNbTicksPrimary() {\r\n    return this.options.nbTicksPrimary;\r\n  }\r\n\r\n  setNbTicksPrimary(nb) {\r\n    this.options.nbTicksPrimary = nb;\r\n  }\r\n\r\n  getNbTicksSecondary() {\r\n    return this.options.nbTicksSecondary;\r\n  }\r\n\r\n  setNbTicksSecondary(nb) {\r\n    this.options.nbTicksSecondary = nb;\r\n    return this;\r\n  }\r\n\r\n  handleMouseMove(px) {\r\n    this.mouseVal = this.getVal(px);\r\n  }\r\n\r\n  handleMouseWheel(delta, e, baseline) {\r\n\r\n    delta = Math.min(0.2, Math.max(-0.2, delta));\r\n\r\n    if (baseline == 'min') {\r\n      baseline = this.getMinValue();\r\n    } else if (baseline == 'max') {\r\n      baseline = this.getMaxValue();\r\n    } else if (!baseline) {\r\n      baseline = 0;\r\n    }\r\n\r\n    this._doZoomVal(\r\n      ((this.getCurrentMax() - baseline) * (1 + delta)) + baseline, ((this.getCurrentMin() - baseline) * (1 + delta)) + baseline\r\n    );\r\n\r\n    this.graph.draw();\r\n    //\tthis.graph.drawSeries(true);\r\n\r\n  }\r\n\r\n  set zoomLock(bln) {\r\n    this._zoomLocked = bln;\r\n  }\r\n\r\n  get zoomLock() {\r\n    return this._zoomLocked || false;\r\n  }\r\n\r\n  /**\r\n   * Performs a zoom on the axis, without redraw afterwards\r\n   * @param {Number} val1 - The new axis minimum\r\n   * @param {Number} val2 - The new axis maximum\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   * @example\r\n   * graph.getBottomAxis().zoom( 50, 70 ); // Axis boundaries will be 50 and 70 after next redraw\r\n   * graph.redraw();\r\n   * @example\r\n   * graph.getBottomAxis().forceMin( 0 ).forceMax( 100 ).zoom( 50, 70 );  // Axis boundaries will be 50 and 70 after next redraw\r\n   * graph.draw();\r\n   * graph.autoscaleAxes(); // New bottom axis boundaries will be 0 and 100, not 50 and 70 !\r\n   * graph.draw();\r\n   */\r\n  zoom(val1, val2, forceLock) {\r\n\r\n    if (!forceLock && this.zoomLock) {\r\n      return;\r\n    }\r\n\r\n    return this._doZoomVal(val1, val2, true);\r\n  }\r\n\r\n  _doZoomVal(val1, val2, mute) {\r\n\r\n    return this._doZoom(this.getPx(val1), this.getPx(val2), val1, val2, mute);\r\n  }\r\n\r\n  _doZoom(px1, px2, val1, val2, mute) {\r\n\r\n    //if(this.options.display || 1 == 1) {\r\n    var val1 = val1 !== undefined ? val1 : this.getVal(px1);\r\n    var val2 = val2 !== undefined ? val2 : this.getVal(px2);\r\n\r\n    this.setCurrentMin(Math.min(val1, val2));\r\n    this.setCurrentMax(Math.max(val1, val2));\r\n\r\n    this.cacheCurrentMin();\r\n    this.cacheCurrentMax();\r\n    this.cacheInterval();\r\n\r\n    this._zoomed = true;\r\n\r\n    this.adapt();\r\n\r\n    this._hasChanged = true;\r\n\r\n    // New method\r\n    if (!mute) {\r\n      this.emit('zoom', [this.options.currentAxisMin, this.options.currentAxisMax, this]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  getSerieShift() {\r\n    return this._serieShift;\r\n  }\r\n\r\n  getSerieScale() {\r\n    return this._serieScale;\r\n  }\r\n\r\n  getMouseVal() {\r\n    return this.mouseVal;\r\n  }\r\n\r\n  getUnitPerTick(px, nbTick, valrange) {\r\n\r\n    var pxPerTick = px / nbTicks; // 1000 / 100 = 10 px per tick\r\n    if (!nbTick) {\r\n      nbTick = px / 10;\r\n    } else {\r\n      nbTick = Math.min(nbTick, px / 10);\r\n    }\r\n\r\n    // So now the question is, how many units per ticks ?\r\n    // Say, we have 0.0004 unit per tick\r\n    var unitPerTick = valrange / nbTick;\r\n    switch (this.options.unitModification) {\r\n\r\n      case 'time':\r\n      case 'time:min.sec':\r\n      case 'time:min_dec':\r\n\r\n        {\r\n\r\n          //const max = this.getModifiedValue( this.getMaxValue() );/*,\r\n          /*units = [\r\n            [ 60, 'min' ],\r\n            [ 3600, 'h' ],\r\n            [ 3600 * 24, 'd' ]\r\n          ];*/\r\n\r\n          let i, l, k, m;\r\n          let breaked = false;\r\n          for (i = 0, l = this.unitModificationTimeTicks.length; i < l; i++) {\r\n            for (k = 0, m = this.unitModificationTimeTicks[i][1].length; k < m; k++) {\r\n              if (unitPerTick < this.unitModificationTimeTicks[i][0] * this.unitModificationTimeTicks[i][1][k]) {\r\n                breaked = true;\r\n                break;\r\n              }\r\n            }\r\n            if (breaked) {\r\n              break;\r\n            }\r\n          }\r\n\r\n          //i and k contain the good variable;\r\n          if (i !== this.unitModificationTimeTicks.length) {\r\n            unitPerTickCorrect = this.unitModificationTimeTicks[i][0] * this.unitModificationTimeTicks[i][1][k];\r\n          } else {\r\n            unitPerTickCorrect = 1;\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      default:\r\n        {\r\n\r\n          // We take the log\r\n          var decimals = Math.floor(Math.log(unitPerTick) / Math.log(10));\r\n          /*\r\n            Example:\r\n              13'453 => Math.log10() = 4.12 => 4\r\n              0.0000341 => Math.log10() = -4.46 => -5\r\n          */\r\n\r\n          var numberToNatural = unitPerTick * Math.pow(10, -decimals);\r\n\r\n          /*\r\n            Example:\r\n              13'453 (4) => 1.345\r\n              0.0000341 (-5) => 3.41\r\n          */\r\n\r\n          this.decimals = -decimals;\r\n\r\n          var possibleTicks = [1, 2, 5, 10];\r\n          var closest = false;\r\n          for (let i = possibleTicks.length - 1; i >= 0; i--) {\r\n            if (!closest || (Math.abs(possibleTicks[i] - numberToNatural) < Math.abs(closest - numberToNatural))) {\r\n              closest = possibleTicks[i];\r\n            }\r\n          }\r\n\r\n          // Ok now closest is the number of unit per tick in the natural number\r\n          /*\r\n            Example:\r\n              13'453 (4) (1.345) => 1\r\n              0.0000341 (-5) (3.41) => 5\r\n          */\r\n\r\n          // Let's scale it back\r\n          var unitPerTickCorrect = closest * Math.pow(10, decimals);\r\n\r\n          /*\r\n            Example:\r\n              13'453 (4) (1.345) (1) => 10'000\r\n              0.0000341 (-5) (3.41) (5) => 0.00005\r\n          */\r\n          break;\r\n        }\r\n    }\r\n\r\n    var nbTicks = valrange / unitPerTickCorrect;\r\n\r\n    var pxPerTick = px / nbTick;\r\n    return [unitPerTickCorrect, nbTicks, pxPerTick];\r\n  }\r\n\r\n  /**\r\n   * Resets the min and max of the serie to fit the series it contains\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setMinMaxToFitSeries(noNotify) {\r\n\r\n    var interval = this.getInterval();\r\n\r\n    if (this.options.logScale) {\r\n\r\n      this.setCurrentMin(Math.max(1e-50, this.getMinValue() * 0.9));\r\n      this.setCurrentMax(Math.max(1e-50, this.getMaxValue() * 1.1));\r\n      //this.options.currentAxisMin = Math.max( 1e-50, this.getMinValue() * 0.9 );\r\n      //this.options.currentAxisMax = Math.max( 1e-50, this.getMaxValue() * 1.1 );\r\n\r\n    } else {\r\n      this.setCurrentMin(this.getMinValue());\r\n      this.setCurrentMax(this.getMaxValue());\r\n\r\n      //this.options.currentAxisMin = this.getMinValue();\r\n      //this.options.currentAxisMax = this.getMaxValue();\r\n\r\n      if (this.getForcedMin() === false) {\r\n\r\n        this.setCurrentMin(this.getCurrentMin() - (this.options.axisDataSpacing.min * interval));\r\n      }\r\n\r\n      if (this.getForcedMax() === false) {\r\n\r\n        this.setCurrentMax(this.getCurrentMax() + (this.options.axisDataSpacing.max * interval));\r\n      }\r\n    }\r\n\r\n    if (isNaN(this.options.currentAxisMin) || isNaN(this.options.currentAxisMax)) {\r\n      this.options.currentAxisMax = undefined;\r\n      this.options.currentAxisMin = undefined;\r\n    }\r\n\r\n\r\n    this._zoomed = false;\r\n\r\n    this.adapt();\r\n\r\n    // Let's cache the current min and max. This has to be done after the last possibility to change the min max, otherwise the cached value will be invalid during rendering.\r\n    // Most notably, it has to occur after the adapt() method, which again, can change the min/max value of the current axis\r\n    this.cache();\r\n\r\n    if (!noNotify) {\r\n      this.graph._axisHasChanged(this);\r\n    }\r\n\r\n    this.emit('zoomOutFull', [this.options.currentAxisMin, this.options.currentAxisMax, this]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Number} the maximum interval ( max - min ) of the axis ( not nessarily the current one )\r\n   */\r\n  getInterval() {\r\n    return this.getMaxValue() - this.getMinValue();\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Number} the maximum interval ( max - min ) of the axis ( not nessarily the current one )\r\n   */\r\n  getCurrentInterval() {\r\n    return this.cachedInterval;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Number} The current minimum value of the axis\r\n   */\r\n  getCurrentMin() {\r\n    return this.cachedCurrentMin;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Number} The current maximum value of the axis\r\n   */\r\n  getCurrentMax() {\r\n    return this.cachedCurrentMax;\r\n  }\r\n\r\n  /**\r\n   * Caches the current axis minimum\r\n   * @memberof Axis\r\n   */\r\n  cacheCurrentMin() {\r\n    this.cachedCurrentMin = this.options.currentAxisMin == this.options.currentAxisMax ? (this.options.logScale ? this.options.currentAxisMin / 10 : this.options.currentAxisMin - 1) : this.options.currentAxisMin;\r\n  }\r\n\r\n  /**\r\n   * Caches the current axis maximum\r\n   * @memberof Axis\r\n   */\r\n  cacheCurrentMax() {\r\n    this.cachedCurrentMax = this.options.currentAxisMax == this.options.currentAxisMin ? (this.options.logScale ? this.options.currentAxisMax * 10 : this.options.currentAxisMax + 1) : this.options.currentAxisMax;\r\n  }\r\n\r\n  /**\r\n   * Caches the current interval\r\n   * @memberof Axis\r\n   */\r\n  cacheInterval() {\r\n    this.cachedInterval = this.cachedCurrentMax - this.cachedCurrentMin;\r\n  }\r\n\r\n  cache() {\r\n    this.cacheCurrentMin();\r\n    this.cacheCurrentMax();\r\n    this.cacheInterval();\r\n  }\r\n\r\n  /**\r\n   * Sets the current minimum value of the axis. If lower that the forced value, the forced value is used\r\n   * @memberof Axis\r\n   * @param {Number} val - The new minimum value\r\n   * @return {Axis} The current axis\r\n   */\r\n  setCurrentMin(val) {\r\n\r\n    if (val === undefined || (this.getForcedMin() !== false && (val < this.getForcedMin() || val < this.options.lowestMin || val === undefined))) {\r\n      val = this.getMinValue();\r\n    }\r\n    this.options.currentAxisMin = val;\r\n    if (this.options.logScale) {\r\n      this.options.currentAxisMin = Math.max(1e-50, val);\r\n    }\r\n\r\n    this.cacheCurrentMin();\r\n    this.cacheInterval();\r\n\r\n    this.graph._axisHasChanged(this);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the current maximum value of the axis. If higher that the forced value, the forced value is used\r\n   * @memberof Axis\r\n   * @param {Number} val - The new maximum value\r\n   * @return {Axis} The current axis\r\n   */\r\n  setCurrentMax(val) {\r\n\r\n    if (val === undefined || (this.getForcedMax() !== false && (val > this.getForcedMax() || val > this.options.highestMax || val === undefined))) {\r\n      val = this.getMaxValue();\r\n    }\r\n\r\n    this.options.currentAxisMax = val;\r\n\r\n    if (this.options.logScale) {\r\n      this.options.currentAxisMax = Math.max(1e-50, val);\r\n    }\r\n\r\n    this.cacheCurrentMax();\r\n    this.cacheInterval();\r\n\r\n    this.graph._axisHasChanged(this);\r\n  }\r\n\r\n  /**\r\n   * Sets the flipping state of the axis. If enabled, the axis is descending rather than ascending.\r\n   * @memberof Axis\r\n   * @param {Boolean} flip - The new flipping state of the axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  flip(flip) {\r\n    this.options.flipped = flip;\r\n    this.setMinMaxFlipped();\r\n    return this;\r\n  }\r\n  /*\r\n    setMinMaxFlipped() {\r\n  \r\n      var interval = this.maxPx - this.minPx;\r\n      var maxPx = this.maxPx - interval * this.options.span[ 0 ];\r\n      var minPx = this.maxPx - interval * this.options.span[ 1 ];\r\n  \r\n      this.minPxFlipped = this.isFlipped() ? maxPx : minPx;\r\n      this.maxPxFlipped = this.isFlipped() ? minPx : maxPx;\r\n  \r\n      // this.minPx = minPx;\r\n      //this.maxPx = maxPx;\r\n    }\r\n  */\r\n  /**\r\n   * @memberof Axis\r\n   * @return {Boolean} The current flipping state of the axis\r\n   */\r\n  isFlipped() {\r\n    return this.options.flipped;\r\n  }\r\n\r\n  _draw() { // Redrawing of the axis\r\n\r\n    var self = this;\r\n    // var visible;\r\n\r\n    //    this.drawInit();\r\n\r\n    if (this.options.currentAxisMin === undefined || this.options.currentAxisMax === undefined) {\r\n      this.setMinMaxToFitSeries(true); // We reset the min max as a function of the series\r\n    }\r\n    // this.cache();\r\n\r\n    //   this.setSlaveAxesBoundaries();\r\n\r\n    // The data min max is stored in this.dataMin, this.dataMax\r\n\r\n    //var widthPx = this.maxPx - this.minPx;\r\n    var widthPx = Math.abs(this.getMaxPx() - this.getMinPx());\r\n    var valrange = this.getCurrentInterval();\r\n    /* Number of px per unit */\r\n    /* Example: width: 1000px\r\n      /* \t\t\t10 - 100 => 11.11\r\n      /*\t\t\t0 - 2 => 500\r\n      /*\t\t\t0 - 0.00005 => 20'000'000\r\n      */\r\n\r\n    if (!this.isShown()) {\r\n      this.line.setAttribute('display', 'none');\r\n      return 0;\r\n    }\r\n\r\n    this.line.setAttribute('display', 'block');\r\n\r\n    if (this.options.scientificScale == true) {\r\n\r\n      if (this.options.scientificScaleExponent) {\r\n\r\n        this.scientificExponent = this.options.scientificScaleExponent;\r\n      } else {\r\n        this.scientificExponent = Math.floor(Math.log(Math.max(Math.abs(this.getCurrentMax()), Math.abs(this.getCurrentMin()))) / Math.log(10));\r\n      }\r\n    } else {\r\n      this.scientificExponent = 0;\r\n    }\r\n\r\n    /************************************/\r\n    /*** DRAWING LABEL ******************/\r\n    /************************************/\r\n\r\n    this.gridLinePath.primary = '';\r\n    this.gridLinePath.secondary = '';\r\n\r\n    /*\r\n    var label;\r\n    if ( label = this.getLabel() ) {\r\n      // Sets the label\r\n      this.labelTspan.textContent = label;\r\n    }\r\n  */\r\n    let letter;\r\n    if (!this.options.useKatexForLabel || !this.graph.hasKatexRenderer()) {\r\n\r\n      if (this.options.unitDecade && this.options.unit && this.scientificExponent !== 0 && (this.scientificExponent = this.getEngineeringExponent(this.scientificExponent)) && (letter = this.getExponentGreekLetter(this.scientificExponent))) {\r\n\r\n        this.preunit = letter;\r\n        this.unitTspan.setAttribute('dx', 0);\r\n\r\n      } else if (this.scientificExponent !== 0 && !isNaN(this.scientificExponent)) {\r\n\r\n        if (this.options.engineeringScale) {\r\n          this.scientificExponent = this.getEngineeringExponent(this.scientificExponent);\r\n        }\r\n\r\n        this.preunit = '';\r\n\r\n        this.expTspan.setAttribute('display', 'visible');\r\n        this.expTspanExp.setAttribute('display', 'visible');\r\n\r\n        this.expTspan.textContent = 'x10';\r\n        this.expTspanExp.textContent = this.scientificExponent;\r\n\r\n      } else {\r\n\r\n        if (!this.options.unit) {\r\n          this.unitTspan.setAttribute('display', 'none');\r\n        }\r\n\r\n        this.preunit = '';\r\n        this.expTspan.setAttribute('display', 'none');\r\n        this.expTspanExp.setAttribute('display', 'none');\r\n      }\r\n\r\n      this.writeUnit();\r\n\r\n    } else {\r\n\r\n      let string = this.getLabel();\r\n      /*,\r\n              domEl;*/\r\n\r\n      if (this.options.unitDecade && this.options.unit && this.scientificExponent !== 0 && (this.scientificExponent = this.getEngineeringExponent(this.scientificExponent)) && (letter = this.getExponentGreekLetter(this.scientificExponent))) {\r\n\r\n        string += letter;\r\n        this.preunitTspan.innerHTML = letter;\r\n        this.preunitTspan.setAttribute('display', 'visible');\r\n        this.unitTspan.setAttribute('dx', 0);\r\n\r\n        string += ` ${letter} ${this.options.unit}`;\r\n\r\n      } else if (this.scientificExponent !== 0 && !isNaN(this.scientificExponent)) {\r\n\r\n        if (this.options.engineeringScale) {\r\n          this.scientificExponent = this.getEngineeringExponent(this.scientificExponent);\r\n        }\r\n        string += ` \\\\cdot 10^${this.scientificExponent} ${this.options.unit}`;\r\n\r\n      }\r\n\r\n      this.katexElement = this.graph.renderWithKatex(string, this.katexElement);\r\n    }\r\n\r\n    if (!this.options.hideTicks) {\r\n\r\n      this.resetTicksLength();\r\n\r\n      if (this.linkedToAxis) { // px defined, linked to another axis\r\n\r\n        this.linkedToAxis.deltaPx = 10;\r\n        var widthHeight = this.drawLinkedToAxisTicksWrapper(widthPx, valrange);\r\n\r\n      } else if (!this.options.logScale) {\r\n        // So the setting is: How many ticks in total ? Then we have to separate it\r\n\r\n        var widthHeight = this.drawLinearTicksWrapper(widthPx, valrange);\r\n\r\n      } else {\r\n\r\n        var widthHeight = this.drawLogTicks();\r\n\r\n      }\r\n    } else {\r\n      var widthHeight = 0;\r\n    }\r\n\r\n    this.removeUselessTicks();\r\n    this.removeUselessTickLabels();\r\n\r\n    this.gridPrimary.setAttribute('d', this.gridLinePath.primary);\r\n    this.gridSecondary.setAttribute('d', this.gridLinePath.secondary);\r\n\r\n    // Looks for axes linked to this current axis\r\n    var axes = this.graph.findAxesLinkedTo(this);\r\n    axes.forEach(function (axis) {\r\n\r\n      if (!axis.linkedToAxis) {\r\n        return;\r\n      }\r\n      axis.setMinPx(self.getMinPx());\r\n      axis.setMaxPx(self.getMaxPx());\r\n\r\n      axis.draw();\r\n\r\n    });\r\n\r\n    /************************************/\r\n    /*** DRAW CHILDREN IMPL SPECIFIC ****/\r\n    /************************************/\r\n\r\n    //   this.drawSpecifics();\r\n\r\n    return widthHeight;\r\n  }\r\n\r\n  drawLines() {\r\n\r\n    if (this.options.lineAt && Array.isArray(this.options.lineAt)) {\r\n\r\n      this.options.lineAt.forEach((val, index) => {\r\n\r\n        if (!isNaN(val) && this.getCurrentMin() <= val && this.getCurrentMax() >= val) {\r\n\r\n          this._lines[index] = this._drawLine(val, this._lines[index]);\r\n\r\n        } else {\r\n          this._hideLine(this._lines[index]);\r\n        }\r\n\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  writeUnit() {\r\n    if (this.options.unit) {\r\n\r\n      this.unitTspan.setAttribute('display', 'visible');\r\n      this.unitTspan.setAttribute('dx', 5);\r\n\r\n      //6.10.2018: This was incompatible with the fact that there can be a unit + a *10^x factor, when setUnitDecate( false ) is called (which is also the default behaviour)\r\n      // We should check if this creates other issues.\r\n\r\n      //this.expTspan.setAttribute( 'display', 'none' );\r\n      //this.expTspanExp.setAttribute( 'display', 'none' );\r\n      this.unitTspan.innerHTML = (this.options.unitWrapperBefore + this.preunit + this.options.unit + this.options.unitWrapperAfter).replace(/\\^([-+0-9]*)(.*)/g, \"<tspan dy='-5' font-size='0.7em'>$1</tspan><tspan dy='5' font-size='1em'>$2</tspan>\");\r\n\r\n    } else {\r\n      this.unitTspan.setAttribute('display', 'none');\r\n    }\r\n  }\r\n\r\n  getExponentGreekLetter(val) {\r\n\r\n    switch (val) {\r\n\r\n      case 3:\r\n        {\r\n          return 'k';\r\n        }\r\n\r\n      case 6:\r\n        {\r\n          return 'M';\r\n        }\r\n      case 9:\r\n        {\r\n          return 'G';\r\n        }\r\n      case 12:\r\n        {\r\n          return 'T';\r\n        }\r\n      case 15:\r\n        {\r\n          return 'E';\r\n        }\r\n      case -3:\r\n        {\r\n          return 'm';\r\n        }\r\n      case -6:\r\n        {\r\n          return '&mu;';\r\n        }\r\n      case -9:\r\n        {\r\n          return 'n';\r\n        }\r\n      case -12:\r\n        {\r\n          return 'p';\r\n\r\n        }\r\n      case -15:\r\n        {\r\n          return 'f';\r\n        }\r\n      default:\r\n        {\r\n          return '';\r\n        }\r\n    }\r\n\r\n  }\r\n\r\n  drawLinearTicksWrapper(widthPx, valrange) {\r\n\r\n    let tickPrimaryUnit;\r\n\r\n    if (this.options.primaryTickUnit) {\r\n\r\n      tickPrimaryUnit = this.options.primaryTickUnit;\r\n\r\n    } else {\r\n\r\n      tickPrimaryUnit = this.getUnitPerTick(widthPx, this.getNbTicksPrimary(), valrange)[0];\r\n\r\n      if (this.options.maxPrimaryTickUnit && this.options.maxPrimaryTickUnit < tickPrimaryUnit) {\r\n        tickPrimaryUnit = this.options.maxPrimaryTickUnit;\r\n      } else if (this.options.minPrimaryTickUnit && this.options.minPrimaryTickUnit > tickPrimaryUnit) {\r\n        tickPrimaryUnit = this.options.minPrimaryTickUnit;\r\n      }\r\n\r\n    }\r\n\r\n    // We need to get here the width of the ticks to display the axis properly, with the correct shift\r\n    return this.drawTicks(tickPrimaryUnit, this.secondaryTicks());\r\n  }\r\n\r\n  forcePrimaryTickUnit(primaryInterval) {\r\n    this.options.primaryTickUnit = primaryInterval;\r\n\r\n    this.decimals = Math.max(0, Math.round(-Math.log(primaryInterval) / Math.log(10)));\r\n\r\n  }\r\n\r\n  forcePrimaryTickUnitMax(value) {\r\n    this.options.maxPrimaryTickUnit = value;\r\n  }\r\n\r\n  forcePrimaryTickUnitMin(value) {\r\n    this.options.minPrimaryTickUnit = value;\r\n  }\r\n\r\n  getPrimaryTickUnit() {\r\n    return this.incrTick;\r\n  }\r\n\r\n  setTickLabelRatio(tickRatio) {\r\n    this.options.ticklabelratio = tickRatio;\r\n  }\r\n\r\n  doesHideWhenNoSeriesShown() {\r\n    return this.options.hideWhenNoSeriesShown;\r\n  }\r\n\r\n  draw() {\r\n\r\n    this._widthLabels = 0;\r\n    var drawn = this._draw();\r\n    this._widthLabels += drawn;\r\n    return drawn;\r\n  }\r\n\r\n  drawTicks(primary, secondary) {\r\n\r\n    var unitPerTick = primary,\r\n      min = this.getCurrentMin(),\r\n      max = this.getCurrentMax(),\r\n      secondaryIncr,\r\n      incrTick,\r\n      subIncrTick,\r\n      loop = 0;\r\n\r\n    if (secondary) {\r\n      secondaryIncr = unitPerTick / secondary;\r\n    }\r\n\r\n    incrTick = this.options.shiftToZero ? this.dataMin - Math.ceil((this.dataMin - min) / unitPerTick) * unitPerTick : Math.floor(min / unitPerTick) * unitPerTick;\r\n    this.incrTick = primary;\r\n\r\n    while (incrTick <= max) {\r\n\r\n      loop++;\r\n      if (loop > 1000) {\r\n        break;\r\n      }\r\n\r\n      if (secondary) {\r\n\r\n        subIncrTick = incrTick + secondaryIncr;\r\n        this.subIncrTick = subIncrTick;\r\n        //widthHeight = Math.max(widthHeight, this.drawTick(subIncrTick, 1));\r\n        var loop2 = 0;\r\n\r\n        while (subIncrTick < incrTick + unitPerTick && Math.abs(subIncrTick - (incrTick + unitPerTick)) > 1e-7) {\r\n          loop2++;\r\n          if (loop2 > 100) {\r\n            break;\r\n          }\r\n\r\n          if (subIncrTick < min || subIncrTick > max) {\r\n            subIncrTick += secondaryIncr;\r\n            continue;\r\n          }\r\n\r\n          this.drawTickWrapper(subIncrTick, false, Math.abs(subIncrTick - incrTick - unitPerTick / 2) < 1e-4 ? 2 : 3);\r\n\r\n          subIncrTick += secondaryIncr;\r\n        }\r\n      }\r\n\r\n      if (incrTick < min || incrTick > max) {\r\n        incrTick += primary;\r\n        continue;\r\n      }\r\n\r\n      this.drawTickWrapper(incrTick, true, 1);\r\n      incrTick += primary;\r\n    }\r\n\r\n    this.widthHeightTick = this.getMaxSizeTick();\r\n    return this.widthHeightTick;\r\n  }\r\n\r\n  nextTick(level, callback) {\r\n\r\n    this.ticks[level] = this.ticks[level] || [];\r\n    this.lastCurrentTick[level] = this.lastCurrentTick[level] || 0;\r\n    this.currentTick[level] = this.currentTick[level] || 0;\r\n\r\n    if (this.currentTick[level] >= this.ticks[level].length) {\r\n      var tick = document.createElementNS(this.graph.ns, 'line');\r\n      this.groupTicks.appendChild(tick);\r\n      this.ticks[level].push(tick);\r\n\r\n      callback(tick);\r\n    }\r\n\r\n    var tick = this.ticks[level][this.currentTick[level]];\r\n\r\n    if (this.currentTick[level] >= this.lastCurrentTick[level]) {\r\n      tick.setAttribute('display', 'visible');\r\n    }\r\n\r\n    this.currentTick[level]++;\r\n\r\n    return tick;\r\n  }\r\n\r\n  nextTickLabel(callback) {\r\n\r\n    this.ticksLabels = this.ticksLabels || [];\r\n    this.lastCurrentTickLabel = this.lastCurrentTickLabel || 0;\r\n    this.currentTickLabel = this.currentTickLabel || 0;\r\n\r\n    if (this.currentTickLabel >= this.ticksLabels.length) {\r\n\r\n      var tickLabel = document.createElementNS(this.graph.ns, 'text');\r\n      this.groupTickLabels.appendChild(tickLabel);\r\n      this.ticksLabels.push(tickLabel);\r\n      callback(tickLabel);\r\n    }\r\n\r\n    var tickLabel = this.ticksLabels[this.currentTickLabel];\r\n\r\n    if (this.currentTickLabel >= this.lastCurrentTickLabel) {\r\n      tickLabel.setAttribute('display', 'visible');\r\n    }\r\n\r\n    this.currentTickLabel++;\r\n\r\n    return tickLabel;\r\n  }\r\n\r\n  removeUselessTicks() {\r\n\r\n    for (var j in this.currentTick) {\r\n\r\n      for (var i = this.currentTick[j]; i < this.ticks[j].length; i++) {\r\n        this.ticks[j][i].setAttribute('display', 'none');\r\n      }\r\n\r\n      this.lastCurrentTick[j] = this.currentTick[j];\r\n      this.currentTick[j] = 0;\r\n    }\r\n  }\r\n\r\n  removeUselessTickLabels() {\r\n\r\n    for (var i = this.currentTickLabel; i < this.ticksLabels.length; i++) {\r\n      this.ticksLabels[i].setAttribute('display', 'none');\r\n    }\r\n\r\n    this.lastCurrentTickLabel = this.currentTickLabel;\r\n    this.currentTickLabel = 0;\r\n\r\n  }\r\n  /*\r\n    doGridLine() {\r\n      var gridLine = document.createElementNS( this.graph.ns, 'line' );\r\n      this.groupGrids.appendChild( gridLine );\r\n      return gridLine;\r\n    };*/\r\n\r\n  nextGridLine(primary, x1, x2, y1, y2) {\r\n\r\n    if (!((primary && this.options.primaryGrid) || (!primary && this.options.secondaryGrid))) {\r\n      return;\r\n    }\r\n\r\n    this.gridLinePath[primary ? 'primary' : 'secondary'] += `M ${x1} ${y1} L ${x2} ${y2}`;\r\n  }\r\n\r\n  setGridLineStyle(gridLine, primary) {\r\n\r\n    gridLine.setAttribute('shape-rendering', 'crispEdges');\r\n    gridLine.setAttribute('stroke', primary ? this.getPrimaryGridColor() : this.getSecondaryGridColor());\r\n    gridLine.setAttribute('stroke-width', primary ? this.getPrimaryGridWidth() : this.getSecondaryGridWidth());\r\n    gridLine.setAttribute('stroke-opacity', primary ? this.getPrimaryGridOpacity() : this.getSecondaryGridOpacity());\r\n\r\n    var dasharray;\r\n    if ((dasharray = primary ? this.getPrimaryGridDasharray() : this.getSecondaryGridDasharray())) {\r\n      gridLine.setAttribute('stroke-dasharray', dasharray);\r\n    }\r\n\r\n  }\r\n\r\n  setGridLinesStyle() {\r\n    this.setGridLineStyle(this.gridPrimary, true);\r\n    this.setGridLineStyle(this.gridSecondary, false);\r\n    return this;\r\n  }\r\n\r\n  resetTicksLength() { }\r\n\r\n  secondaryTicks() {\r\n    return this.options.nbTicksSecondary;\r\n  }\r\n\r\n  drawLogTicks() {\r\n    var min = this.getCurrentMin(),\r\n      max = this.getCurrentMax();\r\n    var incr = Math.min(min, max);\r\n    var max = Math.max(min, max);\r\n\r\n    if (incr < 1e-50) {\r\n      incr = 1e-50;\r\n    }\r\n\r\n    if (Math.log(incr) - Math.log(max) > 20) {\r\n      max = Math.pow(10, (Math.log(incr) * 20));\r\n    }\r\n\r\n    var optsMain = {\r\n      fontSize: '1.0em',\r\n      exponential: true,\r\n      overwrite: false\r\n    };\r\n\r\n    if (incr < 0) {\r\n      incr = 0;\r\n    }\r\n\r\n    var pow = incr == 0 ? 0 : Math.floor(Math.log(incr) / Math.log(10));\r\n    var incr = 1,\r\n      val;\r\n    while ((val = incr * Math.pow(10, pow)) < max) {\r\n      if (incr == 1) { // Superior power\r\n        if (val > min)\r\n          this.drawTickWrapper(val, true, 1, optsMain);\r\n      }\r\n      if (incr == 10) {\r\n        incr = 1;\r\n        pow++;\r\n      } else {\r\n\r\n        if (incr != 1 && val > min) {\r\n\r\n          this.drawTickWrapper(val, false, 2, {\r\n            overwrite: '',\r\n            fontSize: '0.6em'\r\n          });\r\n\r\n        }\r\n\r\n        incr++;\r\n      }\r\n    }\r\n\r\n    this.widthHeightTick = this.getMaxSizeTick();\r\n    return this.widthHeightTick;\r\n  }\r\n\r\n  drawTickWrapper(value, label, level, options) {\r\n\r\n    //var pos = this.getPos( value );\r\n\r\n    this.drawTick(value, level, options);\r\n  }\r\n\r\n  /**\r\n   * Used to scale the master axis into the slave axis\r\n   * @function SlaveAxisScalingFunction\r\n   * @param {Number} val - The master value to convert into a slave value\r\n   * @returns undefined\r\n   */\r\n\r\n  /**\r\n   * Makes this axis a slave. This can be used to show the same data with different units, specifically when a conversion function exists from axis -> slaveAxis but not in reverse. This axis should actually have no series.\r\n   * @param {Axis} axis - The master axis\r\n   * @param {SlaveAxisScalingFunction} scalingFunction - The scaling function used to map masterValue -> slaveValue\r\n   * @param {Number} decimals - The number of decimals to round the value to\r\n   * @memberof Axis\r\n   * @return {Number} The width or height used by the axis (used internally)\r\n   */\r\n  linkToAxis(axis, scalingFunction, decimals) {\r\n\r\n    this.linkedToAxis = {\r\n      axis: axis,\r\n      scalingFunction: scalingFunction,\r\n      decimals: decimals || 1\r\n    };\r\n\r\n  }\r\n\r\n  drawLinkedToAxisTicksWrapper(widthPx, valrange) {\r\n\r\n    var opts = this.linkedToAxis,\r\n      px = 0,\r\n      val,\r\n      t,\r\n      l,\r\n      delta2;\r\n\r\n    // Redrawing the main axis ? Why ?\r\n    //opts.axis.draw();\r\n\r\n    if (!opts.deltaPx) {\r\n      opts.deltaPx = 10;\r\n    }\r\n\r\n    do {\r\n\r\n      val = opts.scalingFunction(opts.axis.getVal(px + this.getMinPx()));\r\n\r\n      if (opts.decimals) {\r\n        this.decimals = opts.decimals;\r\n      }\r\n\r\n      t = this.drawTick(val, 1, {}, px + this.getMinPx());\r\n\r\n      if (!t) {\r\n        console.error(val, px, this.getMinPx());\r\n        throw new Error('Unable to draw tick. Please report the test-case');\r\n      }\r\n\r\n      l = String(t[1].textContent).length * 8;\r\n      delta2 = Math.round(l / 5) * 5;\r\n\r\n      if (delta2 > opts.deltaPx) {\r\n        opts.deltaPx = delta2;\r\n        //     this.drawInit();\r\n        this.drawLinkedToAxisTicksWrapper(widthPx, valrange);\r\n        return;\r\n      }\r\n\r\n      px += opts.deltaPx;\r\n\r\n    } while (px < widthPx);\r\n  }\r\n\r\n  /**\r\n   * Transform a value into pixels, according to the axis scaling. The value is referenced to the drawing wrapper, not the the axis minimal value\r\n   * @param {Number} value - The value to translate into pixels\r\n   * @memberof Axis\r\n   * @return {Number} The value transformed into pixels\r\n   */\r\n  getPos(value) {\r\n    return this.getPx(value);\r\n  }\r\n\r\n  /**\r\n   * @alias Axis~getPos\r\n   */\r\n  getPx(value) {\r\n    //      if(this.getMaxPx() == undefined)\r\n    //        console.log(this);\r\n    //console.log(this.getMaxPx(), this.getMinPx(), this.getCurrentInterval());\r\n    // Ex 50 / (100) * (1000 - 700) + 700\r\n\r\n    //console.log( value, this.getCurrentMin(), this.getMaxPx(), this.getMinPx(), this.getCurrentInterval() );\r\n\r\n    if (!this.options.logScale) {\r\n\r\n      return (value - this.getCurrentMin()) / (this.getCurrentInterval()) * (this.getMaxPx() - this.getMinPx()) + this.getMinPx();\r\n    } else {\r\n      // 0 if value = min\r\n      // 1 if value = max\r\n\r\n      if (value < 0)\r\n        return;\r\n\r\n      var value = ((Math.log(value) - Math.log(this.getCurrentMin())) / (Math.log(this.getCurrentMax()) - Math.log(this.getCurrentMin()))) * (this.getMaxPx() - this.getMinPx()) + this.getMinPx();\r\n\r\n      return value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @alias Axis~getPos\r\n   */\r\n  getRoundedPx(value) {\r\n    //      if(this.getMaxPx() == undefined)\r\n    //        console.log(this);\r\n    //console.log(this.getMaxPx(), this.getMinPx(), this.getCurrentInterval());\r\n    // Ex 50 / (100) * (1000 - 700) + 700\r\n\r\n    //console.log( value, this.getCurrentMin(), this.getMaxPx(), this.getMinPx(), this.getCurrentInterval() );\r\n    return Math.round(this.getPx(value) * 10) / 10;\r\n  }\r\n\r\n  /**\r\n   * Transform a pixel position (referenced to the graph zone, not to the axis minimum) into a value, according to the axis scaling.\r\n   * @param {Number} pixels - The number of pixels to translate into a value\r\n   * @memberof Axis\r\n   * @return {Number} The axis value corresponding to the pixel position\r\n   */\r\n  getVal(px) {\r\n\r\n    if (!this.options.logScale) {\r\n\r\n      return (px - this.getMinPx()) / (this.getMaxPx() - this.getMinPx()) * this.getCurrentInterval() + this.getCurrentMin();\r\n\r\n    } else {\r\n\r\n      return Math.exp((px - this.getMinPx()) / (this.getMaxPx() - this.getMinPx()) * (Math.log(this.getCurrentMax()) - Math.log(this.getCurrentMin())) + Math.log(this.getCurrentMin()));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform a delta value into pixels\r\n   * @param {Number} value - The value to translate into pixels\r\n   * @return {Number} The value transformed into pixels\r\n   * @example graph.getBottomAxis().forceMin( 20 ).forceMax( 50 ).getRelPx( 2 ); // Returns how many pixels will be covered by 2 units. Let's assume 600px of width, it's ( 2 / 30 ) * 600 = 40px\r\n   */\r\n  getRelPx(delta) {\r\n\r\n    return (delta / this.getCurrentInterval()) * (this.getMaxPx() - this.getMinPx());\r\n  }\r\n\r\n  /**\r\n   * Transform a delta pixels value into value\r\n   * @param {Number} pixels - The pixel to convert into a value\r\n   * @return {Number} The delta value corresponding to delta pixels\r\n   * @see Axis~getRelPx\r\n   * @example graph.getBottomAxis().forceMin( 20 ).forceMax( 50 ).getRelVal( 40 ); // Returns 2 (for 600px width)\r\n   */\r\n  getRelVal(px) {\r\n    return px / (this.getMaxPx() - this.getMinPx()) * this.getCurrentInterval();\r\n  }\r\n\r\n  valueToText(value, forceDecimals) {\r\n\r\n    if (this.scientificExponent) {\r\n\r\n      value /= Math.pow(10, this.scientificExponent);\r\n      return value.toFixed(1);\r\n\r\n    } else {\r\n\r\n      value = value * Math.pow(10, this.getExponentialFactor()) * Math.pow(10, this.getExponentialLabelFactor());\r\n      if (this.options.shiftToZero) {\r\n        value -= this.dataMin;\r\n      }\r\n      if (this.options.ticklabelratio) {\r\n        value *= this.options.ticklabelratio;\r\n      }\r\n      if (this.options.unitModification) {\r\n        value = this.modifyUnit(value, this.options.unitModification);\r\n        return value;\r\n      }\r\n\r\n      var dec = this.decimals - this.getExponentialFactor() - this.getExponentialLabelFactor();\r\n\r\n      if (isNaN(value)) {\r\n        return '';\r\n      }\r\n\r\n      if (forceDecimals > 0) {\r\n        value = value.toFixed(forceDecimals);\r\n      } else {\r\n        if (dec > 0) {\r\n          value = value.toFixed(dec);\r\n        } else {\r\n          value = value.toFixed(0);\r\n        }\r\n      }\r\n      if (this.options.unitInTicks && this.options.unit) {\r\n        value += ` ${this.options.unit}`;\r\n      }\r\n\r\n      return value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Computes a value and returns it in HTML formatting\r\n   *  @memberof Axis\r\n   *  @param {Number} value - The value to compute\r\n   *  @param {Boolean} noScaling - Does not display scaling\r\n   *  @param {Boolean} noUnits - Does not display units\r\n   * @param {Number} [forceDecimals=0] - Force the precision of the display\r\n   *  @return {String} An HTML string containing the computed value\r\n   *  @example graph.getXAxis().setUnit( \"m\" ).setUnitDecade( true ).setScientific( true );\r\n   *  graph.getXAxis().valueToHtml( 3500 ); // Returns \"3.5 km\"\r\n   *  @see Axis#valueToText\r\n   */\r\n  valueToHtml(value, noScaling, noUnits, forceDecimals = 0) {\r\n\r\n    var text = this.valueToText(value, forceDecimals);\r\n    var letter;\r\n\r\n    if (this.options.unitDecade && this.options.unit && this.scientificExponent !== 0 && (this.scientificExponent = this.getEngineeringExponent(this.scientificExponent)) && (letter = this.getExponentGreekLetter(this.scientificExponent))) {\r\n\r\n      text += letter;\r\n\r\n    } else if (this.scientificExponent !== 0 && !isNaN(this.scientificExponent) && !noScaling) {\r\n      text += 'x10';\r\n      text += `<sup>${this.scientificExponent}</sup>`;\r\n    }\r\n\r\n    if (this.options.unit && !noUnits) {\r\n\r\n      text += this.options.unit.replace(/\\^([-+0-9]*)/g, '<sup>$1</sup>');\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  getModifiedValue(value) {\r\n    if (this.options.ticklabelratio) {\r\n      value *= this.options.ticklabelratio;\r\n    }\r\n\r\n    if (this.options.shiftToZero) {\r\n      value -= this.getMinValue() * (this.options.ticklabelratio || 1);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  modifyUnit(value, mode) {\r\n\r\n    var text = '';\r\n    var incr = this.incrTick;\r\n    var umin;\r\n\r\n    switch (mode) {\r\n\r\n      case 'time': // val must be in seconds => transform in hours / days / months\r\n        var max = this.getModifiedValue(this.getMaxValue()),\r\n          units = [\r\n            [60, 'min'],\r\n            [3600, 'h'],\r\n            [3600 * 24, 'd']\r\n          ];\r\n\r\n        if (max < 3600) { // to minutes\r\n          umin = 0;\r\n        } else if (max < 3600 * 24) {\r\n          umin = 1;\r\n        } else if (max < 3600 * 24 * 30) {\r\n          umin = 2;\r\n        }\r\n\r\n        if (!units[umin]) {\r\n          return false;\r\n        }\r\n\r\n        value = value / units[umin][0];\r\n        var valueRounded = Math.floor(value);\r\n        text = valueRounded + units[umin][1];\r\n\r\n        // Addind lower unit for precision\r\n        umin--;\r\n        while (incr < 1 * units[umin + 1][0] && umin > -1) {\r\n\r\n          value = (value - valueRounded) * units[umin + 1][0] / units[umin][0];\r\n          valueRounded = Math.round(value);\r\n          text += ` ${valueRounded}${units[umin][1]}`;\r\n          umin--;\r\n        }\r\n\r\n        break;\r\n\r\n      case 'time:min.sec':\r\n        value = value / 60;\r\n        var valueRounded = Math.floor(value);\r\n        var s = (`${Math.round((value - valueRounded) * 60)}`);\r\n        s = s.length == 1 ? `0${s}` : s;\r\n        text = `${valueRounded}:${s}`;\r\n        break;\r\n\r\n      case 'time:min_dec':\r\n        value = value / 60;\r\n        var valueRounded = Math.floor(value);\r\n        var s = (`${Math.round((value - valueRounded) * 100)}`);\r\n        s = s.length == 1 ? `0${s}` : s;\r\n        text = `${valueRounded}.${s}`;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  setExponentialFactor(value) {\r\n    this.options.exponentialFactor = value;\r\n    return this;\r\n  }\r\n\r\n  getExponentialFactor() {\r\n    return this.options.exponentialFactor;\r\n  }\r\n\r\n  setExponentialLabelFactor(value) {\r\n    this.options.exponentialLabelFactor = value;\r\n    return this;\r\n  }\r\n\r\n  getExponentialLabelFactor() {\r\n    return this.options.exponentialLabelFactor;\r\n  }\r\n  setLabelExponentialFactor(value) {\r\n    this.options.exponentialLabelFactor = value;\r\n    return this;\r\n  }\r\n\r\n  getLabelExponentialFactor() {\r\n    return this.options.exponentialLabelFactor;\r\n  }\r\n\r\n  setName(name) {\r\n    this.options.name = name;\r\n    return this;\r\n  }\r\n  /**\r\n   * Sets the label of the axis\r\n   * @param {Number} label - The label to display under the axis\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setLabel(label) {\r\n    this.options.label = label;\r\n    return this;\r\n  }\r\n\r\n  setLabelFont(font) {\r\n    this.options.labelFont = font;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @return {String} The label value\r\n   */\r\n  getLabel() {\r\n    return this.options.label;\r\n  }\r\n\r\n  setSpan(_from, _to) {\r\n\r\n    this.options.span = [_from, _to];\r\n    return this;\r\n  }\r\n\r\n  getSpan() {\r\n    return this.options.span;\r\n  }\r\n\r\n  setLevel(level) {\r\n    this._level = level;\r\n    return this;\r\n  }\r\n\r\n  getLevel() {\r\n    return this._level;\r\n  }\r\n\r\n  setShift(shift) {\r\n    this.shift = shift;\r\n  }\r\n\r\n  getShift() {\r\n    return this.shift;\r\n  }\r\n\r\n  /**\r\n   * Changes the tick position\r\n   * @param {Number} pos - The new position ( \"outside\", \"centered\" or \"inside\" )\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setTickPosition(pos) {\r\n    switch (pos) {\r\n      case 3:\r\n      case 'outside':\r\n      case Graph.TICKS_OUTSIDE:\r\n        {\r\n          pos = 3;\r\n          break;\r\n        }\r\n\r\n      case 2:\r\n      case 'centered':\r\n      case Graph.TICKS_CENTERED:\r\n        {\r\n          pos = 2;\r\n          break;\r\n        }\r\n\r\n      case 1:\r\n      case 'inside':\r\n      case Graph.TICKS_INSIDE:\r\n      default:\r\n        {\r\n          pos = 1;\r\n          break;\r\n        }\r\n    }\r\n\r\n    this.options.tickPosition = pos;\r\n\r\n    switch (this.options.tickPosition) {\r\n      case 3:\r\n        this.tickPx1 = -2;\r\n        this.tickPx2 = 0;\r\n        break;\r\n\r\n      case 2:\r\n        this.tickPx1 = -1;\r\n        this.tickPx2 = 1;\r\n        break;\r\n\r\n      default:\r\n      case 1:\r\n        this.tickPx1 = 0;\r\n        this.tickPx2 = 2;\r\n        break;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Displays or hides the axis grids\r\n   * @param {Boolean} on - true to enable the grids, false to disable them\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setGrids(on) {\r\n    this.options.primaryGrid = on;\r\n    this.options.secondaryGrid = on;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Displays or hides the axis primary grid\r\n   * @param {Boolean} on - true to enable the grids, false to disable it\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setPrimaryGrid(on) {\r\n    this.options.primaryGrid = on;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Displays or hides the axis secondary grid\r\n   * @param {Boolean} on - true to enable the grids, false to disable it\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  setSecondaryGrid(on) {\r\n    this.options.secondaryGrid = on;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables primary grid\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  primaryGridOn() {\r\n    return this.setPrimaryGrid(true);\r\n  }\r\n\r\n  /**\r\n   * Disables primary grid\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  primaryGridOff() {\r\n    return this.setPrimaryGrid(false);\r\n  }\r\n\r\n  /**\r\n   * Enables secondary grid\r\n   * @memberof Axis\r\n   * @return {Axis} The current axis\r\n   */\r\n  secondaryGridOn() {\r\n    return this.setSecondaryGrid(true);\r\n  }\r\n\r\n  /**\r\n   * Disables secondary grid\r\n   * @return {Axis} The current axis\r\n   */\r\n  secondaryGridOff() {\r\n    return this.setSecondaryGrid(false);\r\n  }\r\n\r\n  /**\r\n   * Enables all the grids\r\n   * @return {Axis} The current axis\r\n   */\r\n  gridsOn() {\r\n    return this.setGrids(true);\r\n  }\r\n\r\n  /**\r\n   * Disables all the grids\r\n   * @return {Axis} The current axis\r\n   */\r\n  gridsOff() {\r\n    return this.setGrids(false);\r\n  }\r\n\r\n  /**\r\n   * @alias Axis#gridsOff\r\n   */\r\n  turnGridsOff() {\r\n    return this.gridsOff(...arguments);\r\n  }\r\n\r\n  /**\r\n   * @alias Axis#gridsOn\r\n   */\r\n  turnGridsOn() {\r\n    return this.gridsOn(...arguments);\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the axis, the ticks and the label\r\n   * @memberof Axis\r\n   * @param {String} color - The new color of the primary ticks\r\n   * @return {Axis} The current axis\r\n   * @since 2.0.82\r\n   */\r\n  setColor(color = 'black') {\r\n    this.options.axisColor = color;\r\n    this.options.primaryTicksColor = color;\r\n    this.options.secondaryTicksColor = color;\r\n    this.options.ticksLabelColor = color;\r\n    this.options.primaryGridColor = color;\r\n    this.options.secondaryGridColor = color;\r\n    this.options.labelColor = color;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the axis color\r\n   * @memberof Axis\r\n   * @param {String} color - The color to set the axis\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.2\r\n   */\r\n  setAxisColor(color) {\r\n    this.options.axisColor = color;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the axis color\r\n   * @memberof Axis\r\n   * @return {String} The color of the axis\r\n   * @since 1.13.2\r\n   */\r\n  getAxisColor() {\r\n    return this.options.axisColor || 'black';\r\n  }\r\n\r\n  setTickLabelOffset(offsetValue) {\r\n    this.options.tickLabelOffset = offsetValue;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the main ticks\r\n   * @memberof Axis\r\n   * @param {String} color - The new color of the primary ticks\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.2\r\n   */\r\n  setPrimaryTicksColor(color) {\r\n    this.options.primaryTicksColor = color;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the color of the main ticks\r\n   * @memberof Axis\r\n   * @return {String} The color of the primary ticks\r\n   * @since 1.13.2\r\n   */\r\n  getPrimaryTicksColor() {\r\n    return this.options.primaryTicksColor || 'black';\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the secondary ticks\r\n   * @memberof Axis\r\n   * @param {String} color - The new color of the secondary ticks\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.2\r\n   */\r\n  setSecondaryTicksColor(color) {\r\n    this.options.secondaryTicksColor = color;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the color of the secondary ticks\r\n   * @memberof Axis\r\n   * @return {String} The color of the secondary ticks\r\n   * @since 1.13.2\r\n   */\r\n  getSecondaryTicksColor() {\r\n    return this.options.secondaryTicksColor || 'black';\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the tick labels\r\n   * @memberof Axis\r\n   * @param {String} color - The new color of the tick labels\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.2\r\n   */\r\n  setTicksLabelColor(color) {\r\n    this.options.ticksLabelColor = color;\r\n    if (Array.isArray(this.ticksLabels)) {\r\n      this.ticksLabels.forEach((tick) => {\r\n        tick.setAttribute('fill', color);\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the color of the tick labels\r\n   * @memberof Axis\r\n   * @return {String} The color of the tick labels\r\n   * @since 1.13.2\r\n   */\r\n  getTicksLabelColor() {\r\n    return this.options.ticksLabelColor || 'black';\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the primary grid\r\n   * @memberof Axis\r\n   * @param {String} color - The primary grid color\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.3\r\n   */\r\n  setPrimaryGridColor(color) {\r\n    this.options.primaryGridColor = color;\r\n    this.setGridLinesStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the color of the primary grid\r\n   * @memberof Axis\r\n   * @return {String} color - The primary grid color\r\n   * @since 1.13.3\r\n   */\r\n  getPrimaryGridColor() {\r\n    return this.options.primaryGridColor;\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the primary grid\r\n   * @memberof Axis\r\n   * @param {String} color - The primary grid color\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.3\r\n   */\r\n  setSecondaryGridColor(color) {\r\n    this.options.secondaryGridColor = color;\r\n    this.setGridLinesStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the color of the secondary grid\r\n   * @memberof Axis\r\n   * @return {String} color - The secondary grid color\r\n   * @since 1.13.3\r\n   */\r\n  getSecondaryGridColor() {\r\n    return this.options.secondaryGridColor;\r\n  }\r\n\r\n  /**\r\n   * Sets the width of the primary grid lines\r\n   * @memberof Axis\r\n   * @param {Number} width - The width of the primary grid lines\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.3\r\n   */\r\n  setPrimaryGridWidth(width) {\r\n    this.options.primaryGridWidth = width;\r\n    this.setGridLinesStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the width of the primary grid lines\r\n   * @memberof Axis\r\n   * @return {Number} width - The width of the primary grid lines\r\n   * @since 1.13.3\r\n   */\r\n  getPrimaryGridWidth() {\r\n    return this.options.primaryGridWidth;\r\n  }\r\n\r\n  /**\r\n   * Sets the width of the secondary grid lines\r\n   * @memberof Axis\r\n   * @param {Number} width - The width of the secondary grid lines\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.3\r\n   */\r\n  setSecondaryGridWidth(width) {\r\n    this.options.secondaryGridWidth = width;\r\n    this.setGridLinesStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the width of the secondary grid lines\r\n   * @memberof Axis\r\n   * @return {Number} width - The width of the secondary grid lines\r\n   * @since 1.13.3\r\n   */\r\n  getSecondaryGridWidth() {\r\n    return this.options.secondaryGridWidth;\r\n  }\r\n\r\n  /**\r\n   * Sets the opacity of the primary grid lines\r\n   * @memberof Axis\r\n   * @param {Number} opacity - The opacity of the primary grid lines\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.3\r\n   */\r\n  setPrimaryGridOpacity(opacity) {\r\n    this.options.primaryGridOpacity = opacity;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the opacity of the primary grid lines\r\n   * @memberof Axis\r\n   * @return {Number} opacity - The opacity of the primary grid lines\r\n   * @since 1.13.3\r\n   */\r\n  getPrimaryGridOpacity() {\r\n    return this.options.primaryGridOpacity;\r\n  }\r\n\r\n  /**\r\n   * Sets the opacity of the secondary grid lines\r\n   * @memberof Axis\r\n   * @param {Number} opacity - The opacity of the secondary grid lines\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.3\r\n   */\r\n  setSecondaryGridOpacity(opacity) {\r\n    this.options.secondaryGridOpacity = opacity;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the opacity of the secondary grid lines\r\n   * @memberof Axis\r\n   * @return {Number} opacity - The opacity of the secondary grid lines\r\n   * @since 1.13.3\r\n   */\r\n  getSecondaryGridOpacity() {\r\n    return this.options.secondaryGridOpacity;\r\n  }\r\n\r\n  /**\r\n   * Sets the dasharray of the primary grid lines\r\n   * @memberof Axis\r\n   * @param {String} dasharray - The dasharray of the primary grid lines\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.3\r\n   */\r\n  setPrimaryGridDasharray(dasharray) {\r\n    this.options.primaryGridDasharray = dasharray;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the dasharray of the primary grid lines\r\n   * @memberof Axis\r\n   * @return {String} dasharray - The dasharray of the primary grid lines\r\n   * @since 1.13.3\r\n   */\r\n  getPrimaryGridDasharray() {\r\n    return this.options.primaryGridDasharray;\r\n  }\r\n\r\n  /**\r\n   * Sets the dasharray of the secondary grid lines\r\n   * @memberof Axis\r\n   * @param {String} dasharray - The dasharray of the secondary grid lines\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.3\r\n   */\r\n  setSecondaryGridDasharray(dasharray) {\r\n    this.options.secondaryGridDasharray = dasharray;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the dasharray of the secondary grid lines\r\n   * @memberof Axis\r\n   * @return {String} dasharray - The dasharray of the secondary grid lines\r\n   * @since 1.13.3\r\n   */\r\n  getSecondaryGridDasharray() {\r\n    return this.options.secondaryGridDasharray;\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the label\r\n   * @memberof Axis\r\n   * @param {String} color - The new color of the label\r\n   * @return {Axis} The current axis\r\n   * @since 1.13.2\r\n   */\r\n  setLabelColor(color) {\r\n    this.options.labelColor = color;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the color of the label\r\n   * @memberof Axis\r\n   * @return {String} The color of the label\r\n   * @since 1.13.2\r\n   */\r\n  getLabelColor() {\r\n    return this.options.labelColor;\r\n  }\r\n\r\n  setTickContent(dom, val, options) {\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    if (options.overwrite || !options.exponential) {\r\n\r\n      dom.textContent = options.overwrite || this.valueToText(val);\r\n\r\n    } else {\r\n      var log = Math.round(Math.log(val) / Math.log(10));\r\n      var unit = Math.floor(val * Math.pow(10, -log));\r\n\r\n      dom.textContent = (unit != 1) ? `${unit}x10` : '10';\r\n      var tspan = document.createElementNS(this.graph.ns, 'tspan');\r\n      tspan.textContent = log;\r\n      tspan.setAttribute('font-size', '0.7em');\r\n      tspan.setAttribute('dy', -5);\r\n      dom.appendChild(tspan);\r\n    }\r\n\r\n    if (options.fontSize) {\r\n      dom.setAttribute('font-size', options.fontSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @returns {Boolean} true if it is an x axis, false otherwise\r\n   */\r\n  isX() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @memberof Axis\r\n   * @returns {Boolean} true if it is an y axis, false otherwise\r\n   */\r\n  isY() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sets the unit of the axis\r\n   * @param {String} unit - The unit of the axis\r\n   * @return {Axis} The current axis\r\n   * @memberof Axis\r\n   * @since 1.13.3\r\n   */\r\n  setUnit(unit) {\r\n    this.options.unit = unit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Places the unit in every tick\r\n   * @param {Boolean} bool - ```true``` to place the unit, ```false``` otherwise\r\n   * @return {Axis} The current axis\r\n   * @memberof Axis\r\n   * @since 2.0.44\r\n   */\r\n  setUnitInTicks(bool) {\r\n    this.options.unitInTicks = bool;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets characters wrapping the unit\r\n   * @param {String} before - The string to insert before\r\n   * @param {String} after - The string to insert after\r\n   * @return {Axis} The current axis\r\n   * @memberof Axis\r\n   * @example axis.setUnitWrapper(\"[\", \"]\").setUnit('m'); // Will display [m]\r\n   * @since 1.13.3\r\n   */\r\n  setUnitWrapper(before, after) {\r\n    this.options.unitWrapperBefore = before;\r\n    this.options.unitWrapperAfter = after;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Allows the unit to scale with thousands\r\n   * @param {Boolean} on - Enables this mode\r\n   * @return {Axis} The current axis\r\n   * @memberof Axis\r\n   * @since 1.13.3\r\n   */\r\n  setUnitDecade(on) {\r\n    this.options.unitDecade = on;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enable the scientific mode for the axis values. This way, big numbers can be avoided, e.g. \"1000000000\" would be displayed 1 with 10<sup>9</sup> or \"G\" shown on near the axis unit.\r\n   * @param {Boolean} on - Enables the scientific mode\r\n   * @return {Axis} The current axis\r\n   * @memberof Axis\r\n   * @since 1.13.3\r\n   */\r\n  setScientific(on = true) {\r\n    this.options.scientificScale = on;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * In the scientific mode, forces the axis to take a specific power of ten. Useful if you want to show kilometers instead of meters for example. In this case you would use \"3\" as a value.\r\n   * @param {Number} scientificScaleExponent - Forces the scientific scale to take a defined power of ten\r\n   * @return {Axis} The current axis\r\n   * @memberof Axis\r\n   * @since 1.13.3\r\n   * @see Axis#setScientific\r\n   */\r\n  setScientificScaleExponent(scientificScaleExponent) {\r\n    this.options.scientificScaleExponent = scientificScaleExponent;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The engineer scaling is similar to the scientific scaling ({@link Axis#setScientificScale}) but allowing only mupltiples of 3 to be used to scale the axis (for instance, go from grams to kilograms while skipping decagrams and hexagrams)\r\n   * @param {Boolean} engineeringScaling - <code>true</code> to turn on the engineering scaling\r\n   * @return {Axis} The current axis\r\n   * @memberof Axis\r\n   * @since 1.13.3\r\n   * @see Axis#setScientific\r\n   */\r\n  setEngineering(engineeringScaling) { //bool\r\n    this.options.scientificScale = engineeringScaling;\r\n    this.options.engineeringScale = engineeringScaling;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the closest engineering exponent from a scientific exponent\r\n   * @param {Number} scientificExponent - The exponent of 10 based on which the axis will be scaled\r\n   * @return {Number} The appropriate engineering exponent\r\n   * @memberof Axis\r\n   * @since 1.13.3\r\n   * @private\r\n   */\r\n  getEngineeringExponent(scientificExponent) {\r\n\r\n    if (scientificExponent > 0) {\r\n      scientificExponent -= (scientificExponent % 3);\r\n    } else {\r\n      scientificExponent -= (3 - (-scientificExponent) % 3) % 3;\r\n    }\r\n\r\n    return scientificExponent;\r\n  }\r\n\r\n  /**\r\n   * Enables log scaling\r\n   * @param {Boolean} logScale - ```true``` to enable the log scaling, ```false``` to disable it\r\n   * @return {Axis} The current axis\r\n   * @memberof Axis\r\n   * @since 1.13.3\r\n   */\r\n  setLogScale(log) {\r\n    this.options.logScale = log;\r\n    return this;\r\n  }\r\n\r\n  isZoomed() {\r\n    return !(this.options.currentAxisMin == this.getMinValue() || this.options.currentAxisMax == this.getMaxValue());\r\n  }\r\n\r\n  hasAxis() {\r\n    return false;\r\n  }\r\n\r\n  getType() {\r\n    return null;\r\n  }\r\n\r\n  useKatexForLabel(use = true) {\r\n    this.options.useKatexForLabel = use;\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\n  /**\r\n   *  @alias Axis#getVal\r\n   */\r\n  Axis.prototype.getValue = Axis.prototype.getVal;\r\n\r\n  /**\r\n   *  @alias Axis#getRelPx\r\n   */\r\n  Axis.prototype.getDeltaPx = Axis.prototype.getRelPx;\r\n\r\nEventMixin(Axis, \"axis\");\r\nexport default Axis;","import Axis from './graph.axis.js';\r\n\r\n/**\r\n * Generic constructor of a y axis\r\n * @augments Axis\r\n */\r\nclass AxisX extends Axis {\r\n  constructor( graph, topbottom, options = {} ) {\r\n    super( graph, topbottom, options );\r\n    this.top = topbottom == 'top';\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   *  Returns the position of the axis, used by refreshDrawingZone in core module\r\n   */\r\n  getAxisPosition() {\r\n    if ( !this.options.display ) {\r\n      return 0;\r\n    }\r\n\r\n    let size;\r\n\r\n    if ( this.options.tickLabelOffset == 0 ) {\r\n      // Normal mode, no offset\r\n      size = this.options.tickPosition == 1 ? 8 : 20;\r\n      size += this.graph.options.fontSize;\r\n    } else {\r\n      // With an offset, and ticks inside, axis position is actually 0. Otherwise, it's the heights of the ticks\r\n      size = this.options.tickPosition == 1 ? 0 : 12;\r\n    }\r\n\r\n    if ( this.getLabel() ) {\r\n      size += this.graph.options.fontSize;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   *  @returns {Boolean} always ```true```\r\n   */\r\n  isX() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   *  @returns {Boolean} always ```false```\r\n   */\r\n  isY() {\r\n    return false;\r\n  }\r\n\r\n  forceHeight( height ) {\r\n    this.options.forcedHeight = height;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   *  Used to set the x position of the axis\r\n   */\r\n  setShift( shift ) {\r\n    this.shift = shift;\r\n    if ( shift === undefined || isNaN( shift ) || !this.graph.getDrawingHeight() || isNaN( this.graph.getDrawingHeight() ) ) {\r\n      return;\r\n    }\r\n\r\n    this.group.setAttribute(\r\n      'transform',\r\n      `translate(0 ${this.floating\r\n        ? this.getShift()\r\n        : this.top\r\n          ? this.shift\r\n          : this.graph.getDrawingHeight() - this.shift\r\n      })`\r\n    );\r\n  }\r\n\r\n  /**\r\n   *  Caclulates the maximum tick height\r\n   *  @return {Number} The maximum tick height\r\n   */\r\n  getMaxSizeTick() {\r\n    return ( this.top ? -1 : 1 ) * ( this.options.tickPosition == 1 ? 10 : 10 );\r\n  }\r\n\r\n  /**\r\n   *  Draws a tick. Mostly used internally but it can be useful if you want to make your own axes\r\n   *  @param {Number} value - The value in axis unit to place the tick\r\n   *  @param {Number} level - The importance of the tick\r\n   *  @param {Object} options - Further options to be passed to ```setTickContent```\r\n   *  @param {Number} forcedPos - Forces the position of the tick (for axis dependency)\r\n   */\r\n  drawTick( value, level, options, forcedPos ) {\r\n    var self = this,\r\n      val;\r\n\r\n    val = forcedPos || this.getPos( value );\r\n\r\n    if ( val == undefined || isNaN( val ) ) {\r\n      return;\r\n    }\r\n\r\n    var tick = this.nextTick( level, ( tick ) => {\r\n      tick.setAttribute(\r\n        'y1',\r\n        ( self.top ? 1 : -1 ) * self.tickPx1 * self.tickScaling[ level ]\r\n      );\r\n      tick.setAttribute(\r\n        'y2',\r\n        ( self.top ? 1 : -1 ) * self.tickPx2 * self.tickScaling[ level ]\r\n      );\r\n\r\n      if ( level == 1 ) {\r\n        tick.setAttribute( 'stroke', self.getPrimaryTicksColor() );\r\n      } else {\r\n        tick.setAttribute( 'stroke', self.getSecondaryTicksColor() );\r\n      }\r\n    } );\r\n\r\n    //      tick.setAttribute( 'shape-rendering', 'crispEdges' );\r\n    tick.setAttribute( 'x1', val );\r\n    tick.setAttribute( 'x2', val );\r\n    this.nextGridLine( level == 1, val, val, 0, this.graph.getDrawingHeight() );\r\n\r\n    //  this.groupTicks.appendChild( tick );\r\n    if ( level == 1 ) {\r\n      var tickLabel = this.nextTickLabel( ( tickLabel ) => {\r\n        tickLabel.setAttribute(\r\n          'y',\r\n          ( self.top ? -1 : 1 ) *\r\n          ( ( self.options.tickPosition == 1 ? 8 : 20 ) + ( self.top ? 10 : 0 ) ) +\r\n          this.options.tickLabelOffset\r\n        );\r\n        tickLabel.setAttribute( 'text-anchor', 'middle' );\r\n        if ( self.getTicksLabelColor() !== 'black' ) {\r\n          tickLabel.setAttribute( 'fill', self.getTicksLabelColor() );\r\n        }\r\n        tickLabel.style.dominantBaseline = 'hanging';\r\n      } );\r\n\r\n      tickLabel.setAttribute( 'x', val );\r\n      this.setTickContent( tickLabel, value, options );\r\n    }\r\n    //    this.ticks.push( tick );\r\n\r\n    return [ tick, tickLabel ];\r\n  }\r\n\r\n  drawLabel() {\r\n    // Place label correctly\r\n\r\n    if ( this.getLabelColor() !== 'black' ) {\r\n      this.label.setAttribute( 'fill', this.getLabelColor() );\r\n    }\r\n\r\n    if ( this.options.labelFont ) {\r\n      this.label.setAttribute( 'font-family', this.options.labelFont );\r\n    }\r\n\r\n    this.label.setAttribute( 'text-anchor', 'middle' );\r\n    this.label.setAttribute( 'style', 'display: initial;' );\r\n    this.label.setAttribute(\r\n      'x',\r\n      Math.abs( this.getMaxPx() + this.getMinPx() ) / 2\r\n    );\r\n    this.label.setAttribute(\r\n      'y',\r\n      ( this.top ? -1 : 1 ) *\r\n      ( ( this.options.tickPosition == 1 ? 10 : 25 ) +\r\n        this.graph.options.fontSize )\r\n    );\r\n    this.labelTspan.textContent = this.getLabel();\r\n  }\r\n\r\n  draw() {\r\n    var tickWidth = super.draw( ...arguments );\r\n    this.drawSpecifics();\r\n\r\n    return tickWidth;\r\n  }\r\n  /**\r\n   *  Paints the label, the axis line and anything else specific to x axes\r\n   */\r\n  drawSpecifics() {\r\n    // Adjusts group shift\r\n    //this.group.setAttribute('transform', 'translate(0 ' + this.getShift() + ')');\r\n\r\n    this.drawLabel();\r\n\r\n    this.line.setAttribute( 'x1', this.getMinPx() );\r\n    this.line.setAttribute( 'x2', this.getMaxPx() );\r\n    this.line.setAttribute( 'y1', 0 );\r\n    this.line.setAttribute( 'y2', 0 );\r\n\r\n    this.line.setAttribute( 'stroke', this.getAxisColor() );\r\n\r\n    if ( !this.top ) {\r\n      this.labelTspan.style.dominantBaseline = 'hanging';\r\n      this.expTspan.style.dominantBaseline = 'hanging';\r\n      this.expTspanExp.style.dominantBaseline = 'hanging';\r\n\r\n      this.unitTspan.style.dominantBaseline = 'hanging';\r\n      //  this.preunitTspan.style.dominantBaseline = 'hanging';\r\n    }\r\n\r\n    var span = this.getSpan();\r\n    this.line.setAttribute(\r\n      'marker-start', !this.options.splitMarks || span[ 0 ] == 0 ?\r\n      '' :\r\n      `url(#horionzalsplit_${this.graph.getId()})`\r\n    );\r\n    this.line.setAttribute(\r\n      'marker-end', !this.options.splitMarks || span[ 1 ] == 1 ?\r\n      '' :\r\n      `url(#horionzalsplit_${this.graph.getId()})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  _drawLine( pos, line ) {\r\n    let px = this.getPx( pos );\r\n\r\n    if ( !line ) {\r\n      line = document.createElementNS( this.graph.ns, 'line' );\r\n    } else {\r\n      line.setAttribute( 'display', 'initial' );\r\n    }\r\n\r\n    line.setAttribute( 'x1', px );\r\n    line.setAttribute( 'x2', px );\r\n\r\n    line.setAttribute( 'y1', 0 );\r\n    line.setAttribute( 'y2', this.graph.drawingSpaceHeight );\r\n\r\n    line.setAttribute( 'stroke', 'black' );\r\n    this.group.appendChild( line );\r\n\r\n    return line;\r\n  }\r\n\r\n  _hideLine( line ) {\r\n    if ( !line ) {\r\n      return;\r\n    }\r\n    line.setAttribute( 'display', 'none' );\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  handleMouseMoveLocal( x ) {\r\n    // handleMouseMoveLocal( x, y, e )\r\n    x -= this.graph.getPaddingLeft();\r\n    this.mouseVal = this.getVal( x );\r\n  }\r\n\r\n  /**\r\n   *  Caches the minimum px and maximum px position of the axis. Includes axis spans and flipping. Mostly used internally\r\n   */\r\n  setMinMaxFlipped() {\r\n    var interval = this.maxPx - this.minPx;\r\n\r\n    if ( isNaN( interval ) ) {\r\n      return;\r\n    }\r\n\r\n    var maxPx =\r\n      interval * this.options.span[ 1 ] + this.minPx - this.options.marginMax;\r\n    var minPx =\r\n      interval * this.options.span[ 0 ] + this.minPx + this.options.marginMin;\r\n\r\n    this.minPxFlipped = this.isFlipped() ? maxPx : minPx;\r\n    this.maxPxFlipped = this.isFlipped() ? minPx : maxPx;\r\n  }\r\n\r\n  getZProj( zValue ) {\r\n    return zValue * this.graph.options.zAxis.shiftX;\r\n  }\r\n}\r\n\r\nexport default AxisX;","import Axis from './graph.axis.js';\r\n\r\n/**\r\n * Generic constructor of a y axis\r\n * @extends Axis\r\n */\r\nclass AxisY extends Axis {\r\n  constructor( graph, leftright, options ) {\r\n    super( graph, leftright, options );\r\n    this.leftright = leftright;\r\n    this.left = leftright == 'left';\r\n  }\r\n\r\n  forceWidth( width ) {\r\n    this.options.forcedWidth = width;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  setAxisPosition( shift ) {\r\n    this.shiftPosition = shift;\r\n  }\r\n\r\n  getAxisPosition() {\r\n    return this.shiftPosition || 0;\r\n  }\r\n\r\n  getAdditionalWidth() {\r\n    let pos = 0;\r\n    if ( this.getLabel() ) {\r\n      pos += this.graph.options.fontSize;\r\n    }\r\n\r\n    if ( this.isShown() ) {\r\n      pos += Math.abs( this.tickMargin );\r\n    }\r\n    return pos;\r\n  }\r\n\r\n  /**\r\n   *  @returns {Boolean} always ```false```\r\n   */\r\n  isX() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   *  @returns {Boolean} always ```true```\r\n   */\r\n  isY() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  resetTicksLength() {\r\n    this.longestTick = [ false, 0 ];\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  getMaxSizeTick() {\r\n    // Gives an extra margin of 5px\r\n    return this.longestTick && this.longestTick[ 0 ] ?\r\n      this.longestTick[ 0 ].getComputedTextLength() + 5 :\r\n      0; //(this.left ? 10 : 0);\r\n  }\r\n\r\n  draw() {\r\n    this.tickMargin = this.left ?\r\n      -5 - this.tickPx1 * this.tickScaling[ 1 ] :\r\n      2 - this.tickPx1 * this.tickScaling[ 1 ];\r\n    var tickWidth = super.draw( ...arguments );\r\n    tickWidth += this.getAdditionalWidth();\r\n    this.drawSpecifics( tickWidth );\r\n\r\n    this.fullwidthlabel = tickWidth;\r\n\r\n    return tickWidth;\r\n  }\r\n\r\n  equalizePosition( width ) {\r\n    this.placeLabel( this.left ? -width : width );\r\n\r\n    if ( this.getLabel() ) {\r\n      return width + this.graph.options.fontSize;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  drawTick( value, level, options, forcedPos ) {\r\n    let pos, tick, tickLabel;\r\n\r\n    pos = forcedPos || this.getPos( value );\r\n\r\n    if ( pos == undefined || isNaN( pos ) ) {\r\n      return;\r\n    }\r\n\r\n    tick = this.nextTick( level, ( tick ) => {\r\n      tick.setAttribute(\r\n        'x1',\r\n        ( this.left ? 1 : -1 ) * this.tickPx1 * this.tickScaling[ level ]\r\n      );\r\n      tick.setAttribute(\r\n        'x2',\r\n        ( this.left ? 1 : -1 ) * this.tickPx2 * this.tickScaling[ level ]\r\n      );\r\n\r\n      if ( level == 1 ) {\r\n        tick.setAttribute( 'stroke', this.getPrimaryTicksColor() );\r\n      } else {\r\n        tick.setAttribute( 'stroke', this.getSecondaryTicksColor() );\r\n      }\r\n    } );\r\n\r\n    tick.setAttribute( 'y1', pos );\r\n    tick.setAttribute( 'y2', pos );\r\n\r\n    this.nextGridLine( level == 1, 0, this.graph.getDrawingWidth(), pos, pos );\r\n\r\n    //  this.groupTicks.appendChild( tick );\r\n    if ( level == 1 ) {\r\n      tickLabel = this.nextTickLabel( ( tickLabel ) => {\r\n        tickLabel.setAttribute(\r\n          'x',\r\n          this.tickMargin + this.options.tickLabelOffset\r\n        );\r\n        if ( this.getTicksLabelColor() !== 'black' ) {\r\n          tickLabel.setAttribute( 'fill', this.getTicksLabelColor() );\r\n        }\r\n\r\n        if ( this.left ) {\r\n          tickLabel.setAttribute( 'text-anchor', 'end' );\r\n        } else {\r\n          tickLabel.setAttribute( 'text-anchor', 'start' );\r\n        }\r\n        tickLabel.style.dominantBaseline = 'central';\r\n      } );\r\n\r\n      tickLabel.setAttribute( 'y', pos );\r\n      this.setTickContent( tickLabel, value, options );\r\n\r\n      if ( String( tickLabel.textContent ).length >= this.longestTick[ 1 ] ) {\r\n        this.longestTick[ 0 ] = tickLabel;\r\n        this.longestTick[ 1 ] = String( tickLabel.textContent ).length;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawLabel() {\r\n    if ( this.getLabelColor() !== 'black' ) {\r\n      this.label.setAttribute( 'fill', this.getLabelColor() );\r\n    }\r\n\r\n    this.label.setAttribute( 'dominant-baseline', !this.left ? 'auto' : 'auto' );\r\n    this.labelTspan.textContent = this.getLabel();\r\n  }\r\n\r\n  placeLabel( y ) {\r\n    this.label.setAttribute(\r\n      'transform',\r\n      `translate(${y}, ${Math.abs( this.getMaxPx() + this.getMinPx() ) /\r\n      2}) rotate(-90)`\r\n    );\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  drawSpecifics() {\r\n    // Place label correctly\r\n    //this.label.setAttribute('x', (this.getMaxPx() - this.getMinPx()) / 2);\r\n    /*\r\n    if ( !this.left ) {\r\n\r\n      this.labelTspan.style.dominantBaseline = 'hanging';\r\n      this.expTspan.style.dominantBaseline = 'hanging';\r\n      this.expTspanExp.style.dominantBaseline = 'hanging';\r\n\r\n      this.unitTspan.style.dominantBaseline = 'hanging';\r\n      this.preunitTspan.style.dominantBaseline = 'hanging';\r\n    }\r\n*/\r\n    this.line.setAttribute( 'y1', this.getMinPx() );\r\n    this.line.setAttribute( 'y2', this.getMaxPx() );\r\n    this.line.setAttribute( 'x1', 0 );\r\n    this.line.setAttribute( 'x2', 0 );\r\n\r\n    this.line.setAttribute( 'stroke', this.getAxisColor() );\r\n\r\n    var span = this.getSpan();\r\n    this.line.setAttribute(\r\n      'marker-start', !this.options.splitMarks || span[ 0 ] == 0 ?\r\n      '' :\r\n      `url(#verticalsplit_${this.graph.getId()})`\r\n    );\r\n    this.line.setAttribute(\r\n      'marker-end', !this.options.splitMarks || span[ 1 ] == 1 ?\r\n      '' :\r\n      `url(#verticalsplit_${this.graph.getId()})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  setShift( shift ) {\r\n    this.shift = shift;\r\n\r\n    if ( !this.shift || !this.graph.getWidth() ) {\r\n      return;\r\n    }\r\n\r\n    let xshift = this.shift;\r\n    xshift = this.floating ?\r\n      xshift :\r\n      this.isLeft() ?\r\n      xshift :\r\n      this.graph.getWidth() -\r\n      this.graph.getPaddingRight() -\r\n      this.graph.getPaddingLeft() -\r\n      xshift;\r\n    this.group.setAttribute( 'transform', `translate( ${xshift} 0 )` );\r\n    this.drawLabel();\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  isLeft() {\r\n    return this.left;\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  isRight() {\r\n    return !this.left;\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  isFlipped() {\r\n    return !this.options.flipped;\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  _drawLine( pos, line ) {\r\n    let px = this.getPx( pos );\r\n\r\n    if ( !line ) {\r\n      line = document.createElementNS( this.graph.ns, 'line' );\r\n    } else {\r\n      line.setAttribute( 'display', 'initial' );\r\n    }\r\n\r\n    line.setAttribute( 'y1', px );\r\n    line.setAttribute( 'y2', px );\r\n\r\n    line.setAttribute( 'x1', 0 );\r\n    line.setAttribute( 'x2', this.graph.drawingSpaceWidth );\r\n\r\n    line.setAttribute( 'stroke', 'black' );\r\n    this.group.appendChild( line );\r\n\r\n    return line;\r\n  }\r\n\r\n  _hideLine( line ) {\r\n    if ( !line ) {\r\n      return;\r\n    }\r\n\r\n    line.setAttribute( 'display', 'none' );\r\n  }\r\n\r\n  /**\r\n   *  @private\r\n   */\r\n  handleMouseMoveLocal( x, y ) {\r\n    y -= this.graph.getPaddingTop();\r\n    this.mouseVal = this.getVal( y );\r\n  }\r\n\r\n  /**\r\n   * Scales the axis with respect to the series contained in an x axis\r\n   * @param {Axis} [ axis = graph.getXAxis() ] - The X axis to use as a reference\r\n   * @param {Serie} [ excludeSerie ] - A serie to exclude\r\n   * @param {Number} [ start = xaxis.getCurrentMin() ] - The start of the boundary\r\n   * @param {Number} [ end = xaxis.getCurrentMax() ] - The end of the boundary\r\n   * @param {Boolean} [ min = true ] - Adapt the min\r\n   * @param {Boolean} [ max = true ] - Adapt the max\r\n   * @returns {Axis} The current axis\r\n   */\r\n  scaleToFitAxis( axis, excludeSerie, start, end, min, max ) {\r\n    //console.log( axis instanceof GraphAxis );\r\n    if ( !axis || !axis.isX() ) {\r\n      axis = this.graph.getXAxis();\r\n    }\r\n\r\n    if ( isNaN( start ) ) {\r\n      start = axis.getCurrentMin();\r\n    }\r\n\r\n    if ( isNaN( end ) ) {\r\n      end = axis.getCurrentMax();\r\n    }\r\n\r\n    if ( min === undefined ) {\r\n      min = true;\r\n    }\r\n\r\n    if ( max === undefined ) {\r\n      max = true;\r\n    }\r\n\r\n    if ( typeof excludeSerie == 'number' ) {\r\n      end = start;\r\n      start = excludeSerie;\r\n      excludeSerie = false;\r\n    }\r\n\r\n    var maxV = -Infinity,\r\n      minV = Infinity,\r\n      j = 0;\r\n\r\n    for ( var i = 0, l = this.graph.series.length; i < l; i++ ) {\r\n      if ( !this.graph.series[ i ].isShown() ) {\r\n        continue;\r\n      }\r\n\r\n      if ( this.graph.series[ i ] == excludeSerie ) {\r\n        continue;\r\n      }\r\n\r\n      if ( !( this.graph.series[ i ].getXAxis() == axis ) ||\r\n        this.graph.series[ i ].getYAxis() !== this\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      j++;\r\n\r\n      maxV = max ? Math.max( maxV, this.graph.series[ i ].getMax( start, end ) ) : 0;\r\n      minV = min ? Math.min( minV, this.graph.series[ i ].getMin( start, end ) ) : 0;\r\n    }\r\n\r\n    if ( j == 0 ) {\r\n      this.setMinMaxToFitSeries(); // No point was found\r\n    } else {\r\n      // If we wanted originally to resize min and max. Otherwise we use the current value\r\n      minV = min ? minV : this.getCurrentMin();\r\n      maxV = max ? maxV : this.getCurrentMax();\r\n\r\n      var interval = maxV - minV;\r\n\r\n      minV -= this.options.axisDataSpacing.min * interval;\r\n      maxV += this.options.axisDataSpacing.max * interval;\r\n\r\n      this._doZoomVal( minV, maxV );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Caches the minimum px and maximum px position of the axis. Includes axis spans and flipping. Mostly used internally\r\n   *  @return {Axis} The current axis instance\r\n   */\r\n  setMinMaxFlipped() {\r\n    var interval = this.maxPx - this.minPx;\r\n\r\n    if ( isNaN( interval ) ) {\r\n      return;\r\n    }\r\n\r\n    var maxPx =\r\n      this.maxPx - interval * this.options.span[ 0 ] - this.options.marginMin;\r\n    var minPx =\r\n      this.maxPx - interval * this.options.span[ 1 ] + this.options.marginMax;\r\n\r\n    this.minPxFlipped = this.isFlipped() ? maxPx : minPx;\r\n    this.maxPxFlipped = this.isFlipped() ? minPx : maxPx;\r\n  }\r\n\r\n  getZProj( zValue ) {\r\n    return zValue * this.graph.options.zAxis.shiftY;\r\n  }\r\n}\r\n\r\nexport default AxisY;","import AxisX from './graph.axis.x.js';\r\n\r\n/**\r\n * Generic constructor of a y axis\r\n * @class AxisXBar\r\n * @augments Axis\r\n */\r\nclass AxisXBar extends AxisX {\r\n  constructor( graph, topbottom, options = {} ) {\r\n    super( graph, topbottom, options );\r\n  }\r\n\r\n  /**\r\n   * @param {Object[]} categories - Categories array\r\n   * @param {(String|Number)} categories[].title - The title of the category (to be dispalyed)\r\n   * @param {(String|Number)} categories[].name - The name of the category (to indentify series)\r\n   * @returns {AxisBar} The current axis instance\r\n   */\r\n  set categories( categories ) {\r\n    this._barCategories = categories;\r\n    return this;\r\n  }\r\n\r\n  draw() {\r\n    var self = this,\r\n      tickLabel,\r\n      elements = this._barCategories;\r\n\r\n    if ( !this.series || this.series.length == 0 ) {\r\n      this.autoSeries();\r\n    }\r\n\r\n    this.forceMin( 0 );\r\n    this.forceMax( 1 );\r\n\r\n    this.cacheCurrentMin();\r\n    this.cacheCurrentMax();\r\n    this.cacheInterval();\r\n\r\n    if ( !elements ) {\r\n      return;\r\n    }\r\n\r\n    if ( !Array.isArray( elements ) ) {\r\n      elements = [ elements ];\r\n    }\r\n\r\n    // this.drawInit();\r\n\r\n    //var widthPerElement = width / elements.length;\r\n    for ( var i = 0; i <= elements.length; i++ ) {\r\n      this.drawTick( i / elements.length, 2 );\r\n\r\n      if ( i < elements.length ) {\r\n        tickLabel = this.nextTickLabel( function( tickLabel ) {\r\n          tickLabel.setAttribute(\r\n            'y',\r\n            ( self.top ? -1 : 1 ) *\r\n            ( ( self.options.tickPosition == 1 ? 8 : 20 ) + ( self.top ? 10 : 0 ) )\r\n          );\r\n          tickLabel.setAttribute( 'text-anchor', 'middle' );\r\n          if ( self.getTicksLabelColor() !== 'black' ) {\r\n            tickLabel.setAttribute( 'fill', self.getTicksLabelColor() );\r\n          }\r\n          tickLabel.style.dominantBaseline = 'hanging';\r\n        } );\r\n\r\n        tickLabel.setAttribute( 'x', this.getPos( ( i + 0.5 ) / elements.length ) );\r\n        tickLabel.textContent = elements[ i ].title;\r\n      }\r\n    }\r\n\r\n    this.drawSpecifics();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the series automatically\r\n   * @returns {AxisBar} The current axis instance\r\n   */\r\n  autoSeries() {\r\n    let series = [];\r\n    for ( let serie of this.graph.series ) {\r\n      if ( serie.getXAxis() == this ) {\r\n        series.push( serie );\r\n      }\r\n    }\r\n    this.setSeries( ...series );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the series that should belong to the axis\r\n   * @param {...(Series|Number|String)} series - List of series identified either by their instance, or their index (string or number)\r\n   * @returns {AxisBar} The current axis instance\r\n   */\r\n  setSeries() {\r\n    var self = this;\r\n    this.series = arguments;\r\n\r\n    Array.prototype.map.call( this.series, function( serie, index ) {\r\n      if ( !( typeof serie == 'object' ) ) {\r\n        serie = self.graph.getSerie( serie );\r\n      }\r\n\r\n      if ( serie.setCategoryConfig ) {\r\n        serie.setCategoryConfig( index, self._barCategories, self.series.length );\r\n      }\r\n    } );\r\n\r\n    this._getUsedCategories();\r\n\r\n    return this;\r\n  }\r\n\r\n  _getUsedCategories() {\r\n    let categories = {},\r\n      total = 0;\r\n\r\n    Array.prototype.map.call( this.series, ( serie ) => {\r\n      let usedCategories = serie.getUsedCategories();\r\n      for ( let cat of usedCategories ) {\r\n        if ( !categories.hasOwnProperty( cat ) ) {\r\n          categories[ cat ] = 1;\r\n          total += 1;\r\n        }\r\n\r\n        categories[ cat ]++;\r\n        total++;\r\n      }\r\n    } );\r\n    let accumulator = 0;\r\n    for ( let i in categories ) {\r\n      let temp = categories[ i ];\r\n      categories[ i ] = accumulator;\r\n      accumulator += temp;\r\n    }\r\n\r\n    let dispatchedCategories = {};\r\n\r\n    Array.prototype.map.call( this.series, ( serie ) => {\r\n      let scategories = serie.getUsedCategories(),\r\n        indices = {};\r\n\r\n      scategories.forEach( ( cat ) => {\r\n        dispatchedCategories[ cat ] = dispatchedCategories[ cat ] || 0.5;\r\n        indices[ cat ] = ( categories[ cat ] + dispatchedCategories[ cat ] ) / total;\r\n        dispatchedCategories[ cat ]++;\r\n      } );\r\n\r\n      serie.setDataIndices( indices, total );\r\n    } );\r\n  }\r\n\r\n  getType() {\r\n    return 'category';\r\n  }\r\n}\r\n\r\nexport default AxisXBar;","import Axis from './graph.axis.js';\r\nimport * as util from './graph.util.js';\r\n\r\nvar axisFormat = [\r\n\r\n  {\r\n\r\n    threshold: 20,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1, // 1 minute\r\n        unit: 'i',\r\n        format: 'HH\"h\"MM (dd/mm/yy)'\r\n      },\r\n\r\n      2: { // 10 seconds\r\n        increment: 1,\r\n        unit: 's',\r\n        format: 'MM:ss\"s\"'\r\n      }\r\n    }\r\n  },\r\n\r\n  {\r\n\r\n    threshold: 50,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1, // 1 minute\r\n        unit: 'i',\r\n        format: 'HH\"h\"MM (dd/mm/yy)'\r\n      },\r\n\r\n      2: { // 2 seconds\r\n        increment: 2,\r\n        unit: 's',\r\n        format: 'MM:ss\"s\"'\r\n      }\r\n    }\r\n  },\r\n\r\n  {\r\n\r\n    threshold: 100,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1, // 1 minute\r\n        unit: 'i',\r\n        format: 'HH\"h\"MM (dd/mm/yy)'\r\n      },\r\n\r\n      2: { // 5 seconds\r\n        increment: 5,\r\n        unit: 's',\r\n        format: 'MM:ss\"s\"'\r\n      }\r\n    }\r\n  },\r\n\r\n  {\r\n\r\n    threshold: 600,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 10, // 1 minute\r\n        unit: 'i',\r\n        format: 'HH\"h\"MM (dd/mm/yy)'\r\n      },\r\n\r\n      2: { // 10 seconds\r\n        increment: 30,\r\n        unit: 's',\r\n        format: 'MM:ss\"s\"'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 1000,\r\n    increments: {\r\n\r\n      1: { // 1h\r\n        increment: 1,\r\n        unit: 'h',\r\n        format: 'HH\"h\"MM (dd/mm/yy)'\r\n      },\r\n\r\n      2: { // 10 minutes\r\n        increment: 10,\r\n        unit: 'i',\r\n        format: 'MM\"min\"'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 1500,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd/mm/yyyy'\r\n      },\r\n\r\n      2: {\r\n        increment: 1,\r\n        unit: 'i',\r\n        format: 'H\"h\"MM'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 3000,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd/mm/yyyy'\r\n      },\r\n\r\n      2: {\r\n        increment: 2,\r\n        unit: 'i',\r\n        format: 'H\"h\"MM'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 8000,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd/mm/yyyy'\r\n      },\r\n\r\n      2: {\r\n        increment: 10,\r\n        unit: 'i',\r\n        format: 'H\"h\"MM'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 26400,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd/mm/yyyy'\r\n      },\r\n\r\n      2: {\r\n        increment: 20,\r\n        unit: 'i',\r\n        format: 'H\"h\"MM'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 86400,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd/mm/yyyy'\r\n      },\r\n\r\n      2: {\r\n        increment: 1,\r\n        unit: 'h',\r\n        format: 'H\"h\"MM'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 200000,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'd',\r\n        format: 'dd/mm/yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 2, // One day on the first axis\r\n        unit: 'h',\r\n        format: 'H\"h\"MM'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 400000,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'd',\r\n        format: 'dd/mm/yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 6, // One day on the first axis\r\n        unit: 'h',\r\n        format: 'H\"h\"MM'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 1400000,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'd',\r\n        format: 'dd/mm/yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 12, // One day on the first axis\r\n        unit: 'h',\r\n        format: 'HH\"h\"MM'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 6400000,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'm',\r\n        format: 'mmmm yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 1, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 12400000,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'm',\r\n        format: 'mmmm yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 2, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 86400000 * 0.5,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'm',\r\n        format: 'mmmm yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 7, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One day\r\n\r\n    threshold: 86400000 * 0.8,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'm',\r\n        format: 'mmmm yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 15, // One day on the first axis\r\n        unit: 'd',\r\n        format: 'dd'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One month\r\n\r\n    threshold: 86400000 * 1,\r\n    increments: {\r\n\r\n      1: {\r\n        increment: 1,\r\n        unit: 'y',\r\n        format: 'yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 3, // One day on the first axis\r\n        unit: 'm',\r\n        format: 'mm/yyyy'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One month\r\n\r\n    threshold: 86400000 * 2,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'y',\r\n        format: 'yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 4, // One day on the first axis\r\n        unit: 'm',\r\n        format: 'mm/yyyy'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One month\r\n\r\n    threshold: 86400000 * 10,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'y',\r\n        format: 'yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 6, // One day on the first axis\r\n        unit: 'm',\r\n        format: 'mm/yyyy'\r\n      }\r\n    }\r\n  },\r\n\r\n  { // One month\r\n\r\n    threshold: 86400000 * 12,\r\n    increments: {\r\n\r\n      1: {\r\n\r\n        increment: 1,\r\n        unit: 'y',\r\n        format: 'yyyy'\r\n      },\r\n\r\n      2: {\r\n\r\n        increment: 1, // One day on the first axis\r\n        unit: 'y',\r\n        format: 'yyyy'\r\n      }\r\n    }\r\n  },\r\n\r\n];\r\n\r\n/*\r\n * Date Format 1.2.3\r\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\r\n * MIT license\r\n *\r\n * Includes enhancements by Scott Trenda <scott.trenda.net>\r\n * and Kris Kowal <cixar.com/~kris.kowal/>\r\n *\r\n * Accepts a date, a mask, or a date and a mask.\r\n * Returns a formatted version of the given date.\r\n * The date defaults to the current date/time.\r\n * The mask defaults to dateFormat.masks.default.\r\n */\r\n\r\nvar dateFormat = ( function() {\r\n  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[WLloSZ]|\"[^\"]*\"|'[^']*'/g,\r\n    timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\r\n    timezoneClip = /[^-+\\dA-Z]/g,\r\n    pad = function( val, len ) {\r\n      val = String( val );\r\n      len = len || 2;\r\n      while ( val.length < len ) val = `0${ val}`;\r\n      return val;\r\n    },\r\n    getWeek = function( d, f ) {\r\n      var onejan = new Date( d[ `${f }FullYear` ](), 0, 1 );\r\n      return Math.ceil( ( ( ( d - onejan ) / 86400000 ) + onejan[ `${f }Day` ]() + 1 ) / 7 );\r\n    };\r\n\r\n  // Regexes and supporting functions are cached through closure\r\n  return function( date, mask, utc ) {\r\n    var dF = dateFormat;\r\n\r\n    // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\r\n    if ( arguments.length == 1 && Object.prototype.toString.call( date ) == '[object String]' && !/\\d/.test( date ) ) {\r\n      mask = date;\r\n      date = undefined;\r\n    }\r\n\r\n    // Passing date through Date applies Date.parse, if necessary\r\n    date = date ? new Date( date ) : new Date();\r\n    if ( isNaN( date ) ) throw SyntaxError( `invalid date:${ date}` );\r\n\r\n    mask = String( dF.masks[ mask ] || mask || dF.masks.default );\r\n\r\n    // Allow setting the utc argument via the mask\r\n    if ( mask.slice( 0, 4 ) == 'UTC:' ) {\r\n      mask = mask.slice( 4 );\r\n      utc = true;\r\n    }\r\n\r\n    var _ = utc ? 'getUTC' : 'get',\r\n      d = date[ `${_ }Date` ](),\r\n      D = date[ `${_ }Day` ](),\r\n      m = date[ `${_ }Month` ](),\r\n      y = date[ `${_ }FullYear` ](),\r\n      H = date[ `${_ }Hours` ](),\r\n      M = date[ `${_ }Minutes` ](),\r\n      s = date[ `${_ }Seconds` ](),\r\n      L = date[ `${_ }Milliseconds` ](),\r\n      o = utc ? 0 : date.getTimezoneOffset(),\r\n      flags = {\r\n        d: d,\r\n        dd: pad( d ),\r\n        ddd: dF.i18n.dayNames[ D ],\r\n        dddd: dF.i18n.dayNames[ D + 7 ],\r\n        m: m + 1,\r\n        mm: pad( m + 1 ),\r\n        mmm: dF.i18n.monthNames[ m ],\r\n        mmmm: dF.i18n.monthNames[ m + 12 ],\r\n        yy: String( y ).slice( 2 ),\r\n        yyyy: y,\r\n        h: H % 12 || 12,\r\n        hh: pad( H % 12 || 12 ),\r\n        H: H,\r\n        HH: pad( H ),\r\n        M: M,\r\n        MM: pad( M ),\r\n        s: s,\r\n        ss: pad( s ),\r\n        l: pad( L, 3 ),\r\n        L: pad( L > 99 ? Math.round( L / 10 ) : L ),\r\n        t: H < 12 ? 'a' : 'p',\r\n        tt: H < 12 ? 'am' : 'pm',\r\n        T: H < 12 ? 'A' : 'P',\r\n        TT: H < 12 ? 'AM' : 'PM',\r\n        Z: utc ? 'UTC' : ( String( date ).match( timezone ) || [ '' ] ).pop().replace( timezoneClip, '' ),\r\n        o: ( o > 0 ? '-' : '+' ) + pad( Math.floor( Math.abs( o ) / 60 ) * 100 + Math.abs( o ) % 60, 4 ),\r\n        S: [ 'th', 'st', 'nd', 'rd' ][ d % 10 > 3 ? 0 : ( d % 100 - d % 10 != 10 ) * d % 10 ],\r\n        W: getWeek( date, _ ),\r\n      };\r\n\r\n    return mask.replace( token, function( $0 ) {\r\n      return $0 in flags ? flags[ $0 ] : $0.slice( 1, $0.length - 1 );\r\n    } );\r\n  };\r\n} )();\r\n\r\n// Some common format strings\r\ndateFormat.masks = {\r\n  'default': 'ddd mmm dd yyyy HH:MM:ss',\r\n  shortDate: 'm/d/yy',\r\n  mediumDate: 'mmm d, yyyy',\r\n  longDate: 'mmmm d, yyyy',\r\n  fullDate: 'dddd, mmmm d, yyyy',\r\n  shortTime: 'h:MM TT',\r\n  mediumTime: 'h:MM:ss TT',\r\n  longTime: 'h:MM:ss TT Z',\r\n  isoDate: 'yyyy-mm-dd',\r\n  isoTime: 'HH:MM:ss',\r\n  isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\r\n  isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\r\n};\r\n\r\n// Internationalization strings\r\ndateFormat.i18n = {\r\n  dayNames: [\r\n    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\r\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\r\n  ],\r\n  monthNames: [\r\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n  ]\r\n};\r\n\r\n/* END DATE FORMAT */\r\n\r\nfunction getClosestIncrement( value, basis ) {\r\n  return Math.round( value / basis ) * basis;\r\n}\r\n\r\nfunction roundDate( date, format ) {\r\n\r\n  switch ( format.unit ) {\r\n\r\n    case 's': // Round at n hour\r\n\r\n      date.setSeconds( getClosestIncrement( date.getSeconds(), format.increment ) );\r\n      date.setMilliseconds( 0 );\r\n\r\n      break;\r\n\r\n    case 'i': // Round at n hour\r\n\r\n      date.setMinutes( getClosestIncrement( date.getMinutes(), format.increment ) );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n\r\n      break;\r\n\r\n    case 'h': // Round at n hour\r\n\r\n      date.setHours( getClosestIncrement( date.getHours(), format.increment ) );\r\n\r\n      date.setMinutes( 0 );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n\r\n      break;\r\n\r\n    case 'd':\r\n\r\n      date.setMinutes( 0 );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n      date.setHours( 0 );\r\n\r\n      date.setDate( getClosestIncrement( date.getDate(), format.increment ) );\r\n\r\n      break;\r\n\r\n    case 'm':\r\n\r\n      date.setMinutes( 0 );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n      date.setHours( 0 );\r\n      date.setDate( 1 );\r\n\r\n      date.setMonth( getClosestIncrement( date.getMonth(), format.increment ) );\r\n\r\n      break;\r\n\r\n    case 'y':\r\n\r\n      date.setMinutes( 0 );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n      date.setHours( 0 );\r\n      date.setDate( 1 );\r\n      date.setMonth( 0 );\r\n\r\n      //date.setYear( getClosest( date.getDate(), format.increment ) );\r\n\r\n      break;\r\n\r\n    default:\r\n      {\r\n        throw new Error( 'Date format not recognized' );\r\n      }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\nfunction incrementDate( date, format ) {\r\n\r\n  switch ( format.unit ) {\r\n\r\n    case 's':\r\n\r\n      date.setSeconds( date.getSeconds() + format.increment );\r\n      date.setMilliseconds( 0 );\r\n\r\n      break;\r\n\r\n    case 'i':\r\n\r\n      date.setMinutes( date.getMinutes() + format.increment );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n\r\n      break;\r\n\r\n    case 'h': // Round at n hour\r\n\r\n      date.setHours( date.getHours() + format.increment );\r\n      date.setMinutes( 0 );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n\r\n      break;\r\n\r\n    case 'd':\r\n\r\n      date.setDate( date.getDate() + format.increment );\r\n      date.setMinutes( 0 );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n      date.setHours( 0 );\r\n\r\n      break;\r\n\r\n    case 'm':\r\n\r\n      date.setMonth( date.getMonth() + format.increment );\r\n      date.setMinutes( 0 );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n      date.setHours( 0 );\r\n      date.setDate( 1 );\r\n\r\n      break;\r\n\r\n    case 'y':\r\n\r\n      date.setFullYear( date.getFullYear() + format.increment );\r\n\r\n      date.setMinutes( 0 );\r\n      date.setSeconds( 0 );\r\n      date.setMilliseconds( 0 );\r\n      date.setHours( 0 );\r\n      date.setDate( 1 );\r\n      date.setMonth( 0 );\r\n\r\n      break;\r\n\r\n    default:\r\n      {\r\n        throw new Error( 'Date format not recognized' );\r\n      }\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\nfunction getGroup( axis, level, number ) {\r\n\r\n  if ( axis.groups[ level ][ number ] ) {\r\n    axis.groups[ level ][ number ].group.setAttribute( 'display', 'block' );\r\n    return axis.groups[ level ][ number ];\r\n  }\r\n\r\n  var g = {\r\n\r\n    group: document.createElementNS( axis.graph.ns, 'g' ),\r\n    text: document.createElementNS( axis.graph.ns, 'text' )\r\n  };\r\n\r\n  var line = document.createElementNS( axis.graph.ns, 'line' );\r\n\r\n  line.setAttribute( 'stroke', 'black' );\r\n  line.setAttribute( 'y1', 0 );\r\n  switch ( level ) {\r\n\r\n    case 2:\r\n\r\n      line.setAttribute( 'y2', 6 );\r\n      g.text.setAttribute( 'y', 15 );\r\n\r\n      g.line = line;\r\n\r\n      g.group.appendChild( g.line );\r\n      break;\r\n\r\n    default:\r\n    case 1:\r\n\r\n      line.setAttribute( 'y2', 20 );\r\n      g.text.setAttribute( 'y', 10 );\r\n\r\n      g.line1 = line;\r\n      g.line2 = line.cloneNode();\r\n\r\n      g.group.appendChild( g.line1 );\r\n      g.group.appendChild( g.line2 );\r\n\r\n      break;\r\n  }\r\n\r\n  g.text.setAttribute( 'text-anchor', 'middle' );\r\n  g.text.setAttribute( 'dominant-baseline', 'middle' );\r\n\r\n  g.group.appendChild( g.text );\r\n\r\n  axis.getWrapper( level ).appendChild( g.group );\r\n\r\n  return axis.groups[ level ][ number ] = g;\r\n}\r\n\r\nfunction hideGroups( axis, level, from ) {\r\n\r\n  for ( ; from < axis.groups[ level ].length; from++ ) {\r\n\r\n    hideGroup( axis.groups[ level ][ from ] );\r\n  }\r\n}\r\n\r\nfunction hideGroup( group ) {\r\n  group.group.setAttribute( 'display', 'none' );\r\n}\r\n\r\nfunction getDateText( date, format ) {\r\n\r\n  return dateFormat( date, format );\r\n}\r\n\r\nfunction renderGroup( level, group, text, minPx, maxPx, x1, x2 ) {\r\n\r\n  switch ( level ) {\r\n\r\n    case 2:\r\n\r\n      if ( x1 < minPx || x1 > maxPx ) {\r\n\r\n        hideGroup( group );\r\n        return;\r\n      }\r\n\r\n      group.line.setAttribute( 'x1', x1 );\r\n      group.line.setAttribute( 'x2', x1 );\r\n      group.text.setAttribute( 'x', x1 );\r\n      group.text.textContent = text;\r\n\r\n      break;\r\n\r\n    default:\r\n    case 1:\r\n\r\n      var x1B = Math.max( minPx, Math.min( maxPx, x1 ) ),\r\n        x2B = Math.max( minPx, Math.min( maxPx, x2 ) );\r\n\r\n      if ( isNaN( x2B ) || isNaN( x1B ) ) {\r\n        return;\r\n      }\r\n\r\n      group.line1.setAttribute( 'x1', x1B );\r\n      group.line2.setAttribute( 'x1', x2B );\r\n\r\n      group.line1.setAttribute( 'x2', x1B );\r\n      group.line2.setAttribute( 'x2', x2B );\r\n\r\n      group.text.setAttribute( 'x', ( x1B + x2B ) / 2 );\r\n\r\n      while ( text.length * 8 > x2B - x1B ) {\r\n\r\n        text = `${text.substr( 0, text.length - 2 ) }.`;\r\n\r\n        if ( text.length == 1 ) {\r\n          text = '';\r\n          break;\r\n        }\r\n      }\r\n\r\n      group.text.textContent = text;\r\n      break;\r\n  }\r\n}\r\n\r\nclass GraphTimeAxis extends Axis {\r\n\r\n  constructor() {\r\n\r\n    super( ...arguments );\r\n  }\r\n\r\n  init( graph, options ) {\r\n\r\n    super.init( graph, options );\r\n\r\n    this.wrapper = {\r\n      1: document.createElementNS( graph.ns, 'g' ),\r\n      2: document.createElementNS( graph.ns, 'g' )\r\n    };\r\n    this.groups = {\r\n      1: [],\r\n      2: []\r\n    };\r\n\r\n    var rect = document.createElementNS( graph.ns, 'rect' );\r\n    rect.setAttribute( 'fill', '#c0c0c0' );\r\n    rect.setAttribute( 'stroke', '#808080' );\r\n    rect.setAttribute( 'height', '20' );\r\n    rect.setAttribute( 'x', '0' );\r\n    rect.setAttribute( 'y', '0' );\r\n\r\n    this.rect = rect;\r\n\r\n    this.wrapper[ 1 ].appendChild( this.rect );\r\n\r\n    //    this.init( graph, options );\r\n\r\n    this.group.appendChild( this.wrapper[ 1 ] );\r\n    this.group.appendChild( this.wrapper[ 2 ] );\r\n\r\n    this.wrapper[ 1 ].setAttribute( 'transform', 'translate( 0, 25 )' );\r\n    this.wrapper[ 2 ].setAttribute( 'transform', 'translate( 0, 00 )' );\r\n  }\r\n\r\n  draw() { // Redrawing of the axis\r\n\r\n    //this.drawInit();\r\n\r\n    this.cacheCurrentMax();\r\n    this.cacheCurrentMin();\r\n\r\n    if ( this.currentAxisMin == undefined || this.currentAxisMax == undefined ) {\r\n      this.setMinMaxToFitSeries( true ); // We reset the min max as a function of the series\r\n\r\n    }\r\n\r\n    this.line.setAttribute( 'x1', this.getMinPx() );\r\n    this.line.setAttribute( 'x2', this.getMaxPx() );\r\n    this.line.setAttribute( 'y1', 0 );\r\n    this.line.setAttribute( 'y2', 0 );\r\n\r\n    var widthPx = this.maxPx - this.minPx;\r\n    var widthTime = this.getCurrentInterval();\r\n\r\n    var timePerPx = widthTime / widthPx;\r\n\r\n    var maxVal = this.getCurrentMax();\r\n    var minVal = this.getCurrentMin();\r\n\r\n    this.rect.setAttribute( 'width', widthPx );\r\n    this.rect.setAttribute( 'x', this.minPx );\r\n\r\n    if ( !maxVal || !minVal ) {\r\n      return 0;\r\n    }\r\n\r\n    var currentFormat;\r\n\r\n    for ( i = 0; i < axisFormat.length; i++ ) {\r\n\r\n      if ( axisFormat[ i ].threshold > timePerPx ) {\r\n        currentFormat = axisFormat[ i ];\r\n\r\n        break;\r\n      }\r\n\r\n    }\r\n\r\n    if ( !currentFormat ) {\r\n      currentFormat = axisFormat[ axisFormat.length - 1 ];\r\n    }\r\n\r\n    var xVal1,\r\n      xVal2,\r\n      level = 0,\r\n      dateFirst,\r\n      currentDate,\r\n      text,\r\n      group,\r\n      i;\r\n\r\n    for ( level = 1; level <= 2; level++ ) {\r\n\r\n      if ( !util.isNumeric( minVal ) ) {\r\n        hideGroups( this, level, 0 );\r\n        break;\r\n      }\r\n\r\n      dateFirst = new Date( minVal );\r\n\r\n      currentDate = roundDate( dateFirst, currentFormat.increments[ level ] );\r\n\r\n      i = 0;\r\n\r\n      do {\r\n        /** @ignore */\r\n        text = getDateText( currentDate, currentFormat.increments[ level ].format );\r\n        group = getGroup( this, level, i );\r\n\r\n        xVal1 = this.getPx( currentDate.getTime() );\r\n        currentDate = incrementDate( currentDate, currentFormat.increments[ level ] );\r\n        xVal2 = this.getPx( currentDate.getTime() );\r\n\r\n        renderGroup( level, group, text, this.getMinPx(), this.getMaxPx(), xVal1, xVal2 );\r\n\r\n        i++;\r\n        if ( i > 100 ) {\r\n          break;\r\n        }\r\n      } while ( currentDate.getTime() < maxVal );\r\n\r\n      hideGroups( this, level, i );\r\n    }\r\n\r\n  }\r\n\r\n  isX() {\r\n    return true;\r\n  }\r\n\r\n  getWrapper( level ) {\r\n    return this.wrapper[ level ];\r\n  }\r\n\r\n  setShift( shift ) {\r\n    this.shift = shift;\r\n    this.group.setAttribute( 'transform', `translate(0 ${ this.top ? this.shift : ( this.graph.getDrawingHeight() - this.shift ) })` );\r\n  }\r\n\r\n  getAxisPosition() {\r\n    return 60;\r\n  }\r\n\r\n  setMinMaxFlipped() {\r\n\r\n    var interval = this.maxPx - this.minPx;\r\n    var maxPx = interval * this.options.span[ 1 ] + this.minPx;\r\n    var minPx = interval * this.options.span[ 0 ] + this.minPx;\r\n\r\n    this.minPxFlipped = this.isFlipped() ? maxPx : minPx;\r\n    this.maxPxFlipped = this.isFlipped() ? minPx : maxPx;\r\n  }\r\n\r\n}\r\n\r\nexport default GraphTimeAxis;","import * as util from '../graph.util.js';\r\n\r\nvar ErrorBarMixin = {\r\n  /*\r\n    doErrorDraw: function( orientation, error, originVal, originPx, xpx, ypx ) {\r\n\r\n      if ( !( error instanceof Array ) ) {\r\n        error = [ error ];\r\n      }\r\n\r\n      var functionName = orientation == 'y' ? 'getY' : 'getX';\r\n      var bars = orientation == 'y' ? [ 'top', 'bottom' ] : [ 'left', 'right' ];\r\n      var j;\r\n\r\n      if ( isNaN( xpx ) || isNaN( ypx ) ) {\r\n        return;\r\n      }\r\n\r\n      for ( var i = 0, l = error.length; i < l; i++ ) {\r\n\r\n        if ( error[ i ] instanceof Array ) { // TOP\r\n\r\n          j = bars[ 0 ];\r\n          this.errorstyles[ i ].paths[ j ] += \" M \" + xpx + \" \" + ypx;\r\n          this.errorstyles[ i ].paths[ j ] += this.makeError( orientation, i, this[ functionName ]( originVal + error[ i ][ 0 ] ), originPx, j );\r\n\r\n          j = bars[ 1 ];\r\n          this.errorstyles[ i ].paths[ j ] += \" M \" + xpx + \" \" + ypx;\r\n          this.errorstyles[ i ].paths[ j ] += this.makeError( orientation, i, this[ functionName ]( originVal - error[ i ][ 1 ] ), originPx, j );\r\n\r\n        } else {\r\n\r\n          j = bars[ 0 ];\r\n\r\n          this.errorstyles[ i ].paths[ j ] += \" M \" + xpx + \" \" + ypx;\r\n          this.errorstyles[ i ].paths[ j ] += this.makeError( orientation, i, this[ functionName ]( originVal + error[ i ] ), originPx, j );\r\n          j = bars[ 1 ];\r\n          this.errorstyles[ i ].paths[ j ] += \" M \" + xpx + \" \" + ypx;\r\n          this.errorstyles[ i ].paths[ j ] += this.makeError( orientation, i, this[ functionName ]( originVal - error[ i ] ), originPx, j );\r\n        }\r\n      }\r\n    },\r\n  */\r\n\r\n  /*\r\n    makeError: function( orientation, type, coord, origin, quadOrientation ) {\r\n\r\n      var method;\r\n      switch ( this.errorstyles[ level ].type ) {\r\n        case 'bar':\r\n          method = \"makeBar\";\r\n          break;\r\n\r\n        case 'box':\r\n          method = \"makeBox\";\r\n          break;\r\n      }\r\n\r\n      return this[ method + orientation.toUpperCase() ]( coord, origin, this.errorstyles[ level ][ quadOrientation ] );\r\n\r\n    },*/\r\n\r\n  makeBarY: function( coordY, origin, style ) {\r\n    if ( !coordY || style === undefined ) {\r\n      return;\r\n    }\r\n    var width = !util.isNumeric( style.width ) ? 10 : style.width;\r\n    return ` V ${coordY} m -${width / 2} 0 h ${width} m -${width /\r\n      2} 0 V ${origin} `;\r\n  },\r\n\r\n  makeBoxY: function( coordY, origin, style ) {\r\n    if ( !coordY || style === undefined ) {\r\n      return;\r\n    }\r\n    return ` m 5 0 V ${coordY} h -10 V ${origin} m 5 0 `;\r\n  },\r\n\r\n  makeBarX: function( coordX, origin, style ) {\r\n    if ( !coordX || style === undefined ) {\r\n      return;\r\n    }\r\n    var height = !util.isNumeric( style.width ) ? 10 : style.width;\r\n    return ` H ${coordX} m 0 -${height / 2} v ${height} m 0 -${height /\r\n      2} H ${origin} `;\r\n  },\r\n\r\n  makeBoxX: function( coordX, origin, style ) {\r\n    if ( !coordX || style === undefined ) {\r\n      return;\r\n    }\r\n    return ` v 5 H ${coordX} v -10 H ${origin} v 5 `;\r\n  },\r\n  /*\r\n    check: function( index, valY, valX ) {\r\n\r\n      var dx, dy;\r\n\r\n      if ( ( this.getType() == Graph.SERIE_LINE || this.getType() == Graph.SERIE_SCATTER ) ) {\r\n\r\n        if ( !( dx = this.data[ index * 2 ] ) || !( dy = this.data[ index * 2 + 1 ] ) ) { //\r\n          return;\r\n        }\r\n      }\r\n\r\n      if ( dx === undefined ) {\r\n        return;\r\n      }\r\n\r\n      for ( var i = 0, l = valY.length; i < l; i++ ) {\r\n\r\n        if ( Array.isArray( valY[ i ] ) ) {\r\n\r\n          if ( !isNaN( valY[ i ][ 0 ] ) ) {\r\n            this._checkY( dy + valY[ i ][ 0 ] );\r\n          }\r\n\r\n          if ( !isNaN( valY[ i ][ 1 ] ) ) {\r\n            this._checkY( dy - valY[ i ][ 1 ] );\r\n          }\r\n\r\n        } else {\r\n\r\n          if ( !isNaN( valY[ i ] ) ) {\r\n            this._checkY( dy + valY[ i ] );\r\n            this._checkY( dy - valY[ i ] );\r\n          }\r\n        }\r\n      }\r\n\r\n      for ( var i = 0, l = valX.length; i < l; i++ ) {\r\n\r\n        if ( Array.isArray( valX[ i ] ) ) {\r\n\r\n          if ( !isNaN( valX[ i ][ 0 ] ) ) {\r\n            this._checkX( dx - valX[ i ][ 0 ] );\r\n          }\r\n\r\n          if ( !isNaN( valX[ i ][ 1 ] ) ) {\r\n            this._checkX( dx + valX[ i ][ 1 ] );\r\n          }\r\n\r\n        } else {\r\n\r\n          if ( !isNaN( valY[ i ] ) ) {\r\n            this._checkX( dx - valX[ i ] );\r\n            this._checkX( dx + valX[ i ] );\r\n          }\r\n        }\r\n      }\r\n\r\n    },\r\n  */\r\n\r\n  /**\r\n   *\r\n   *  @example serie.setErrorBarStyle( [ { type: 'bar', x: {} }, { type: 'box', top: { strokeColor: 'green', fillColor: 'olive' }, bottom: { strokeColor: 'red', fillColor: \"#800000\" }  } ] );\r\n   */\r\n  setErrorBarStyle: function( errorstyle ) {\r\n    this.errorbarStyle = this._setErrorStyle( errorstyle );\r\n\r\n    return this;\r\n  },\r\n\r\n  setErrorBoxStyle: function( errorstyle ) {\r\n    this.errorboxStyle = this._setErrorStyle( errorstyle );\r\n    return this;\r\n  },\r\n\r\n  _setErrorStyle( errorstyles = {} ) {\r\n    var styles = [];\r\n    var pairs = [\r\n      [ 'y', 'top', 'bottom' ],\r\n      [ 'x', 'left', 'right' ]\r\n    ];\r\n\r\n    var makePath = ( style ) => {\r\n      style.dom = document.createElementNS( this.graph.ns, 'path' );\r\n      style.dom.setAttribute( 'fill', style.fillColor || 'none' );\r\n      style.dom.setAttribute( 'stroke', style.strokeColor || 'black' );\r\n      style.dom.setAttribute( 'stroke-opacity', style.strokeOpacity || 1 );\r\n      style.dom.setAttribute( 'fill-opacity', style.fillOpacity || 1 );\r\n      style.dom.setAttribute( 'stroke-width', style.strokeWidth || 1 );\r\n\r\n      this.groupMain.appendChild( style.dom );\r\n    };\r\n    // i is bar or box\r\n\r\n    var styles = {};\r\n\r\n    if ( typeof errorstyles == 'string' ) {\r\n      errorstyles = {};\r\n    }\r\n\r\n    for ( var j = 0, l = pairs.length; j < l; j++ ) {\r\n      if ( errorstyles.all ) {\r\n        errorstyles[ pairs[ j ][ 1 ] ] = util.extend( true, {}, errorstyles.all );\r\n        errorstyles[ pairs[ j ][ 2 ] ] = util.extend( true, {}, errorstyles.all );\r\n      }\r\n\r\n      if ( errorstyles[ pairs[ j ][ 0 ] ] ) {\r\n        //.x, .y\r\n\r\n        errorstyles[ pairs[ j ][ 1 ] ] = util.extend(\r\n          true, {},\r\n          errorstyles[ pairs[ j ][ 0 ] ]\r\n        );\r\n        errorstyles[ pairs[ j ][ 2 ] ] = util.extend(\r\n          true, {},\r\n          errorstyles[ pairs[ j ][ 0 ] ]\r\n        );\r\n      }\r\n\r\n      for ( var k = 1; k <= 2; k++ ) {\r\n        if ( errorstyles[ pairs[ j ][ k ] ] ) {\r\n          styles[ pairs[ j ][ k ] ] = errorstyles[ pairs[ j ][ k ] ];\r\n          makePath( styles[ pairs[ j ][ k ] ] );\r\n        }\r\n      }\r\n    }\r\n    return styles;\r\n  },\r\n\r\n  errorDrawInit: function() {\r\n    var error;\r\n    //  var pathError = \"M 0 0 \";\r\n\r\n    if ( this.errorboxStyle ) {\r\n      this.errorboxStyle.paths = {\r\n        top: '',\r\n        bottom: '',\r\n        left: '',\r\n        right: ''\r\n      };\r\n    }\r\n\r\n    if ( this.errorbarStyle ) {\r\n      this.errorbarStyle.paths = {\r\n        top: '',\r\n        bottom: '',\r\n        left: '',\r\n        right: ''\r\n      };\r\n    }\r\n  },\r\n\r\n  errorAddPoint: function( index, dataX, dataY, xpx, ypx ) {\r\n    /* eslint-disable no-cond-assign */\r\n    let error;\r\n\r\n    if ( this.errorbarStyle ) {\r\n      if ( ( error = this.waveform.getErrorBarXBelow( index ) ) ) {\r\n        this.errorbarStyle.paths.left += ` M ${xpx} ${ypx}`;\r\n        this.errorbarStyle.paths.left += this.makeBarX(\r\n          this.getX( dataX - error ),\r\n          xpx,\r\n          this.errorbarStyle.left\r\n        );\r\n      }\r\n\r\n      if ( ( error = this.waveform.getErrorBarXAbove( index ) ) ) {\r\n        this.errorbarStyle.paths.right += ` M ${xpx} ${ypx}`;\r\n        this.errorbarStyle.paths.right += this.makeBarX(\r\n          this.getX( dataX + error ),\r\n          xpx,\r\n          this.errorbarStyle.right\r\n        );\r\n      }\r\n\r\n      if ( ( error = this.waveform.getErrorBarYBelow( index ) ) ) {\r\n        this.errorbarStyle.paths.bottom += ` M ${xpx} ${ypx}`;\r\n        this.errorbarStyle.paths.bottom += this.makeBarY(\r\n          this.getY( dataY - error ),\r\n          ypx,\r\n          this.errorbarStyle.bottom\r\n        );\r\n      }\r\n\r\n      if ( ( error = this.waveform.getErrorBarYAbove( index ) ) ) {\r\n        this.errorbarStyle.paths.top += ` M ${xpx} ${ypx}`;\r\n        this.errorbarStyle.paths.top += this.makeBarY(\r\n          this.getY( dataY + error ),\r\n          ypx,\r\n          this.errorbarStyle.top\r\n        );\r\n      }\r\n    }\r\n\r\n    if ( this.errorboxStyle ) {\r\n      if ( ( error = this.waveform.getErrorBoxXBelow( index ) ) ) {\r\n        this.errorboxStyle.paths.left += ` M ${xpx} ${ypx}`;\r\n        this.errorboxStyle.paths.left += this.makeBoxX(\r\n          this.getX( dataX - error ),\r\n          xpx,\r\n          this.errorboxStyle.left\r\n        );\r\n      }\r\n\r\n      if ( ( error = this.waveform.getErrorBoxXAbove( index ) ) ) {\r\n        this.errorboxStyle.paths.right += ` M ${xpx} ${ypx}`;\r\n        this.errorboxStyle.paths.right += this.makeBoxX(\r\n          this.getX( dataX + error ),\r\n          xpx,\r\n          this.errorboxStyle.right\r\n        );\r\n      }\r\n\r\n      if ( ( error = this.waveform.getErrorBoxYBelow( index ) ) ) {\r\n        this.errorboxStyle.paths.bottom += ` M ${xpx} ${ypx}`;\r\n        this.errorboxStyle.paths.bottom += this.makeBoxY(\r\n          this.getY( dataY - error ),\r\n          ypx,\r\n          this.errorboxStyle.bottom\r\n        );\r\n      }\r\n\r\n      if ( ( error = this.waveform.getErrorBoxYAbove( index ) ) ) {\r\n        this.errorboxStyle.paths.top += ` M ${xpx} ${ypx}`;\r\n        this.errorboxStyle.paths.top += this.makeBoxY(\r\n          this.getY( dataY + error ),\r\n          ypx,\r\n          this.errorboxStyle.top\r\n        );\r\n      }\r\n    }\r\n    /* eslint-enable */\r\n  },\r\n\r\n  errorAddPointBarChart: function( j, posY, xpx, ypx ) {\r\n    var error;\r\n    if ( this.error && ( error = this.error[ j ] ) ) {\r\n      this.doErrorDraw( 'y', error, posY, ypx, xpx, ypx );\r\n    }\r\n  },\r\n\r\n  errorDraw: function() {\r\n    if ( this.errorbarStyle ) {\r\n      for ( var j in this.errorbarStyle.paths ) {\r\n        if ( this.errorbarStyle[ j ] && this.errorbarStyle[ j ].dom ) {\r\n          this.errorbarStyle[ j ].dom.setAttribute(\r\n            'd',\r\n            this.errorbarStyle.paths[ j ]\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if ( this.errorboxStyle ) {\r\n      for ( var j in this.errorboxStyle.paths ) {\r\n        if ( this.errorboxStyle[ j ] && this.errorboxStyle[ j ].dom ) {\r\n          this.errorboxStyle[ j ].dom.setAttribute(\r\n            'd',\r\n            this.errorboxStyle.paths[ j ]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default ErrorBarMixin;","import * as util from '../graph.util.js';\r\nimport EventMixing from '../mixins/graph.mixin.event_graph.js';\r\n\r\nimport {\r\n  Waveform\r\n} from '../util/waveform.js';\r\n\r\nconst defaultOptions = {\r\n  redrawShapesAfterDraw: false\r\n};\r\n\r\n/**\r\n * Serie class to be extended\r\n * @static\r\n */\r\nclass Serie {\r\n  constructor(graph, name, options, defaultInherited) {\r\n    this.options = util.extend(\r\n      true, {},\r\n      defaultOptions,\r\n      defaultInherited,\r\n      options\r\n    );\r\n    this.graph = graph;\r\n    this.name = name;\r\n    this.groupMain = document.createElementNS(this.graph.ns, 'g');\r\n\r\n    this._symbolLegendContainer = document.createElementNS(this.graph.ns, 'g');\r\n  }\r\n\r\n  postInit() { }\r\n\r\n  draw() { }\r\n\r\n  beforeDraw() { }\r\n\r\n  afterDraw() {\r\n    if (this.options.redrawShapesAfterDraw) {\r\n      this.graph.getShapesOfSerie(this).forEach((shape) => {\r\n        shape.redraw();\r\n      });\r\n    }\r\n\r\n    this.emit('draw');\r\n  }\r\n\r\n  /**\r\n   * Sets data to the serie\r\n   * @memberof Serie\r\n   * @param {(Object|Array|Array[])} data - The data of the serie\r\n   * @param {Boolean} [ oneDimensional=false ] - In some cases you may need to force the 1D type. This is required when one uses an array or array to define the data (see examples)\r\n   * @param{String} [ type=float ] - Specify the type of the data. Use <code>int</code> to save memory (half the amount of bytes allocated to the data).\r\n   * @example serie.setData( [ [ x1, y1 ], [ x2, y2 ], ... ] );\r\n   * @example serie.setData( [ x1, y1, x2, y2, ... ] ); // Faster\r\n   * @example serie.setData( [ [ x1, y1, x2, y2, ..., xn, yn ] , [ xm, ym, x(m + 1), y(m + 1), ...] ], true ) // 1D array with a gap in the middle\r\n   * @example serie.setData( { x: x0, dx: spacing, y: [ y1, y2, y3, y4 ] } ); // Data with equal x separation. Fastest way\r\n   */\r\n  setData(data, oneDimensional, type) {\r\n    if (data instanceof Waveform) {\r\n      return this.setWaveform(data);\r\n    }\r\n\r\n    throw 'Setting data other than waveforms in not supported by default. You must implemented this method in the inherited class.';\r\n  }\r\n\r\n  _addData(type, howmany) {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Removes all the data from the serie, without redrawing\r\n   * @returns {Serie} The current serie\r\n   */\r\n  clearData() {\r\n    this.setData(new Waveform());\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the data in its current form\r\n   * @returns {Array.<(Float64Array|Int32Array)>} An array containing the data chunks. Has only one member if the data has no gaps\r\n   * @memberof Serie\r\n   */\r\n  getData() {\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Sets the options of the serie (no extension of default options)\r\n   * @param {Object} options - The options of the serie\r\n   * @memberof Serie\r\n   */\r\n  setOptions(options) {\r\n    this.options = options || {};\r\n  }\r\n\r\n  /**\r\n   * Sets the options of the serie (no extension of default options)\r\n   * @param {String} name - The option name\r\n   * @param value - The option value\r\n   * @memberof Serie\r\n   * @example serie.setOption('selectableOnClick', true );\r\n   */\r\n  setOption(name, value) {\r\n    this.options[name] = value;\r\n  }\r\n\r\n  /**\r\n   * Removes the serie from the graph. The method doesn't perform any axis autoscaling or repaint of the graph. This should be done manually.\r\n   * @return {Serie} The current serie instance\r\n   * @memberof Serie\r\n   */\r\n  kill(noLegendUpdate) {\r\n    this.graph.removeSerieFromDom(this);\r\n    this.graph._removeSerie(this);\r\n\r\n    if (this.graph.legend && !noLegendUpdate) {\r\n      this.graph.legend.update();\r\n    }\r\n\r\n    this.graph = undefined;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Hides the serie\r\n   * @memberof Serie\r\n   * @param {Boolean} [ hideShapes = false ] - <code>true</code> to hide the shapes associated to the serie\r\n   * @returns {Serie} The current serie\r\n   */\r\n  hide(hideShapes = this.options.bindShapesToDisplayState, mute = false) {\r\n    this.hidden = true;\r\n    this.groupMain.setAttribute('display', 'none');\r\n\r\n    this.getSymbolForLegend().setAttribute('opacity', 0.5);\r\n    this.getTextForLegend().setAttribute('opacity', 0.5);\r\n\r\n    this.hideImpl();\r\n\r\n    if (hideShapes) {\r\n      var shapes = this.graph.getShapesOfSerie(this);\r\n      for (var i = 0, l = shapes.length; i < l; i++) {\r\n        shapes[i].hide();\r\n      }\r\n    }\r\n\r\n    if (!mute) {\r\n      this.emit('hide');\r\n    }\r\n\r\n    if (\r\n      this.getXAxis().doesHideWhenNoSeriesShown() ||\r\n      this.getYAxis().doesHideWhenNoSeriesShown()\r\n    ) {\r\n      this.graph.draw(true);\r\n    }\r\n\r\n    if (\r\n      this.graph.hasPlugin('peakPicking') &&\r\n      this.graph.getPlugin('peakPicking').getSerie() == this\r\n    ) {\r\n      this.graph.getPlugin('peakPicking').hidePeakPicking();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows the serie\r\n   * @memberof Serie\r\n   * @param {Boolean} [showShapes=false] - <code>true</code> to show the shapes associated to the serie\r\n   * @returns {Serie} The current serie\r\n   */\r\n  show(showShapes = this.options.bindShapesToDisplayState, mute = false) {\r\n    this.hidden = false;\r\n    this.groupMain.setAttribute('display', 'block');\r\n\r\n    this.getSymbolForLegend().setAttribute('opacity', 1);\r\n    this.getTextForLegend().setAttribute('opacity', 1);\r\n\r\n    this.showImpl();\r\n\r\n    this.draw(true);\r\n\r\n    if (showShapes) {\r\n      var shapes = this.graph.getShapesOfSerie(this);\r\n      for (var i = 0, l = shapes.length; i < l; i++) {\r\n        shapes[i].show();\r\n      }\r\n    }\r\n\r\n    if (!mute) {\r\n      this.emit('show');\r\n    }\r\n\r\n    if (\r\n      this.getXAxis().doesHideWhenNoSeriesShown() ||\r\n      this.getYAxis().doesHideWhenNoSeriesShown()\r\n    ) {\r\n      this.graph.draw(true);\r\n    }\r\n\r\n    if (\r\n      this.graph.hasPlugin('peakPicking') &&\r\n      this.graph.getPlugin('peakPicking').getSerie() == this\r\n    ) {\r\n      this.graph.getPlugin('peakPicking').showPeakPicking();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  hideImpl() { }\r\n  showImpl() { }\r\n\r\n  /**\r\n   * Toggles the display of the serie (effectively, calls <code>.show()</code> and <code>.hide()</code> alternatively on each call)\r\n   * @memberof Serie\r\n   * @param {Boolean} [hideShapes=false] - <code>true</code> to hide the shapes associated to the serie\r\n   * @returns {Serie} The current serie\r\n   */\r\n  toggleDisplay() {\r\n    if (!this.isShown()) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Determines if the serie is currently visible\r\n   * @memberof Serie\r\n   * @returns {Boolean} The current visibility status of the serie\r\n   */\r\n  isShown() {\r\n    return !this.hidden;\r\n  }\r\n\r\n  /**\r\n   * Checks that axes assigned to the serie have been defined and have proper values\r\n   * @memberof Serie\r\n   */\r\n  axisCheck() {\r\n    if (!this.getXAxis() || !this.getYAxis()) {\r\n      throw 'No axis exist for this serie. Check that they were properly assigned';\r\n    }\r\n\r\n    if (\r\n      isNaN(this.getXAxis().getCurrentMin()) ||\r\n      isNaN(this.getXAxis().getCurrentMax()) ||\r\n      isNaN(this.getYAxis().getCurrentMin()) ||\r\n      isNaN(this.getYAxis().getCurrentMax())\r\n    ) {\r\n      throw 'Axis min and max values are not defined. Try autoscaling';\r\n    }\r\n  }\r\n  /**\r\n   * Returns the x position of a certain value in pixels position, based on the serie's axis\r\n   * @memberof Serie\r\n   * @param {Number} val - Value to convert to pixels position\r\n   * @returns {Number} The x position in px corresponding to the x value\r\n   */\r\n  getX(val) {\r\n    return (val = this.getXAxis().getPx(val)) - (val % 0.2);\r\n  }\r\n\r\n  /**\r\n   * Returns the y position of a certain value in pixels position, based on the serie's axis\r\n   * @memberof Serie\r\n   * @param {Number} val - Value to convert to pixels position\r\n   * @returns {Number} The y position in px corresponding to the y value\r\n   */\r\n  getY(val) {\r\n    return (val = this.getYAxis().getPx(val)) - (val % 0.2);\r\n  }\r\n\r\n  /**\r\n   * Returns the selection state of the serie. Generic for most serie types\r\n   * @memberof Serie\r\n   * @returns {Boolean} <code>true</code> if the serie is selected, <code>false</code> otherwise\r\n   */\r\n  isSelected() {\r\n    return this.selected || this.selectionType !== 'unselected';\r\n  }\r\n\r\n  _checkX(val) {\r\n    this.minX = Math.min(this.minX, val);\r\n    this.maxX = Math.max(this.maxX, val);\r\n  }\r\n\r\n  _checkY(val) {\r\n    this.minY = Math.min(this.minY, val);\r\n    this.maxY = Math.max(this.maxY, val);\r\n  }\r\n\r\n  /**\r\n   * Getter for the serie name\r\n   * @memberof Serie\r\n   * @returns {String} The serie name\r\n   */\r\n  getName() {\r\n    return this.name;\r\n  }\r\n\r\n  /* AXIS */\r\n\r\n  /**\r\n   * Assigns axes automatically, based on {@link Graph#getXAxis} and {@link Graph#getYAxis}.\r\n   * @memberof Serie\r\n   * @returns {Serie} The current serie\r\n   */\r\n  autoAxis() {\r\n    if (this.isFlipped()) {\r\n      this.setXAxis(this.graph.getYAxis());\r\n      this.setYAxis(this.graph.getXAxis());\r\n    } else {\r\n      this.setXAxis(this.graph.getXAxis());\r\n      this.setYAxis(this.graph.getYAxis());\r\n    }\r\n\r\n    // After axes have been assigned, the graph axes should update their min/max\r\n    this.graph.updateDataMinMaxAxes();\r\n    return this;\r\n  }\r\n\r\n  autoAxes() {\r\n    return this.autoAxis(...arguments);\r\n  }\r\n\r\n  /**\r\n   * Assigns an x axis to the serie\r\n   * @memberof Serie\r\n   * @param {Axis|Number} axis - The axis to use as an x axis. If an integer, {@link Graph#getXAxis} or {@link Graph#getYAxis} will be used\r\n   * @returns {Serie} The current serie\r\n   * @example serie.setXAxis( graph.getTopAxis( 1 ) ); // Assigns the second top axis to the serie\r\n   */\r\n  setXAxis(axis) {\r\n    if (typeof axis == 'number') {\r\n      this.xaxis = this.isFlipped() ?\r\n        this.graph.getYAxis(axis) :\r\n        this.graph.getXAxis(axis);\r\n    } else {\r\n      this.xaxis = axis;\r\n    }\r\n\r\n    this.graph.updateDataMinMaxAxes();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Assigns an y axis to the serie\r\n   * @memberof Serie\r\n   * @param {Axis|Number} axis - The axis to use as an y axis. If an integer, {@link Graph#getXAxis} or {@link Graph#getYAxis} will be used\r\n   * @returns {Serie} The current serie\r\n   * @example serie.setYAxis( graph.getLeftAxis( 4 ) ); // Assigns the 5th left axis to the serie\r\n   */\r\n  setYAxis(axis) {\r\n    if (typeof axis == 'number') {\r\n      this.xaxis = this.isFlipped() ?\r\n        this.graph.getXAxis(axis) :\r\n        this.graph.getYAxis(axis);\r\n    } else {\r\n      this.yaxis = axis;\r\n    }\r\n\r\n    this.graph.updateDataMinMaxAxes();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Assigns two axes to the serie\r\n   * @param {GraphAxis} axis1 - First axis to assign to the serie (x or y)\r\n   * @param {GraphAxis} axis2 - Second axis to assign to the serie (y or x)\r\n   * @returns {Serie} The current serie\r\n   * @memberof Serie\r\n   */\r\n  setAxes() {\r\n    for (var i = 0; i < 2; i++) {\r\n      if (arguments[i]) {\r\n        this[arguments[i].isX() ? 'setXAxis' : 'setYAxis'](arguments[i]);\r\n      }\r\n    }\r\n\r\n    this.graph.updateDataMinMaxAxes();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {GraphAxis} The x axis assigned to the serie\r\n   * @memberof Serie\r\n   */\r\n  getXAxis() {\r\n    return this.xaxis;\r\n  }\r\n\r\n  /**\r\n   * @returns {GraphAxis} The y axis assigned to the serie\r\n   * @memberof Serie\r\n   */\r\n  getYAxis() {\r\n    return this.yaxis;\r\n  }\r\n\r\n  /* */\r\n\r\n  /* DATA MIN MAX */\r\n\r\n  /**\r\n   * @returns {Number} Lowest x value of the serie's data\r\n   * @memberof Serie\r\n   */\r\n  getMinX() {\r\n    return this.minX;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} Highest x value of the serie's data\r\n   * @memberof Serie\r\n   */\r\n  getMaxX() {\r\n    return this.maxX;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} Lowest y value of the serie's data\r\n   * @memberof Serie\r\n   */\r\n  getMinY() {\r\n    return this.minY;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} Highest y value of the serie's data\r\n   * @memberof Serie\r\n   */\r\n  getMaxY() {\r\n    return this.maxY;\r\n  }\r\n\r\n  getWaveform() {\r\n    return this.waveform;\r\n  }\r\n\r\n  getWaveforms() {\r\n    return [this.waveform];\r\n  }\r\n\r\n  setWaveform(waveform) {\r\n    if (!(waveform instanceof Waveform)) {\r\n      console.trace();\r\n      console.error(waveform);\r\n      throw new Error(\r\n        'Cannot assign waveform to serie. Waveform is not of the proper Waveform instance'\r\n      );\r\n    }\r\n\r\n    this.waveform = waveform;\r\n    this.dataHasChanged();\r\n    this.graph.updateDataMinMaxAxes();\r\n\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Computes and returns a line SVG element with the same line style as the serie, or width 20px\r\n   * @returns {SVGElement}\r\n   * @memberof Serie\r\n   */\r\n  getSymbolForLegend() {\r\n    if (!this.lineForLegend) {\r\n      var line = document.createElementNS(this.graph.ns, 'line');\r\n      this.applyLineStyle(line);\r\n\r\n      line.setAttribute('x1', 5);\r\n      line.setAttribute('x2', 25);\r\n      line.setAttribute('y1', 0);\r\n      line.setAttribute('y2', 0);\r\n\r\n      line.setAttribute('cursor', 'pointer');\r\n\r\n      this.lineForLegend = line;\r\n    }\r\n\r\n    return this.lineForLegend;\r\n  }\r\n\r\n  _getSymbolForLegendContainer() {\r\n    return this._symbolLegendContainer;\r\n  }\r\n\r\n  /**\r\n   * Explicitely applies the line style to the SVG element returned by {@link Serie#getSymbolForLegend}\r\n   * @see Serie#getSymbolForLegend\r\n   * @returns {SVGElement}\r\n   * @memberof Serie\r\n   */\r\n  setLegendSymbolStyle() {\r\n    this.applyLineStyle(this.getSymbolForLegend());\r\n  }\r\n\r\n  /**\r\n   * @alias Serie#setLegendSymbolStyle\r\n   * @memberof Serie\r\n   */\r\n  updateStyle() {\r\n    this.setLegendSymbolStyle();\r\n    this.graph.updateLegend();\r\n  }\r\n\r\n  /**\r\n   * Computes and returns a text SVG element with the label of the serie as a text, translated by 35px\r\n   * @returns {SVGElement}\r\n   * @memberof Serie\r\n   * @see Serie#getLabel\r\n   */\r\n  getTextForLegend() {\r\n    if (!this.textForLegend) {\r\n      var text = document.createElementNS(this.graph.ns, 'text');\r\n      text.setAttribute('cursor', 'pointer');\r\n      text.textContent = this.getLabel();\r\n\r\n      this.textForLegend = text;\r\n    }\r\n\r\n    return this.textForLegend;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} The current index of the serie\r\n   * @memberof Serie\r\n   */\r\n  getIndex() {\r\n    return this.graph.series.indexOf(this);\r\n  }\r\n\r\n  /**\r\n   * @returns {String} The label or, alternatively - the name of the serie\r\n   * @memberof Serie\r\n   */\r\n  getLabel() {\r\n    return this.options.label || this.name;\r\n  }\r\n\r\n  /**\r\n   * Sets the label of the serie. Note that this does not automatically updates the legend\r\n   * @param {String} label - The new label of the serie\r\n   * @returns {Serie} The current serie\r\n   * @memberof Serie\r\n   */\r\n  setLabel(label) {\r\n    this.options.label = label;\r\n\r\n    if (this.textForLegend) {\r\n      this.textForLegend.textContent = label;\r\n    }\r\n\r\n    this.graph.requireLegendUpdate();\r\n    return this;\r\n  }\r\n\r\n  /* FLIP */\r\n\r\n  /**\r\n   * Assigns the flipping value of the serie. A flipped serie will have inverted axes. However this method does not automatically re-assigns the axes of the serie. Call {@link Serie#autoAxis} to re-assign the axes automatically, or any other axis setting method.\r\n   * @param {Boolean} [flipped=false] - <code>true</code> to flip the serie\r\n   * @returns {Serie} The current serie\r\n   * @memberof Serie\r\n   */\r\n  setFlip(flipped) {\r\n    this.options.flip = flipped;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} <code>true</code> if the serie is flipped, <code>false</code> otherwise\r\n   * @memberof Serie\r\n   */\r\n  getFlip() {\r\n    return this.options.flip;\r\n  }\r\n\r\n  /**\r\n   * @alias Serie#getFlip\r\n   * @memberof Serie\r\n   */\r\n  isFlipped() {\r\n    return this.options.flip;\r\n  }\r\n\r\n  /**\r\n   * Sets the layer onto which the serie should be displayed. This method does not trigger a graph redraw.\r\n   * @memberof Serie\r\n   * @param {Number} layerIndex=1 - The index of the layer into which the serie will be drawn\r\n   * @returns {Serie} The current serie\r\n   */\r\n  setLayer(layerIndex) {\r\n    let newLayer = parseInt(layerIndex) || 1;\r\n\r\n    if (newLayer !== this.options.layer) {\r\n      this.options.layer = newLayer;\r\n      this.graph.appendSerieToDom(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the layer onto which the serie should be displayed. This method does not trigger a graph redraw.\r\n   * @memberof Serie\r\n   * @returns {Nunber} The index of the layer into which the serie will be drawn\r\n   */\r\n  getLayer() {\r\n    return this.options.layer || 1;\r\n  }\r\n\r\n  setStyle(style, selectionType = 'unselected') {\r\n    this.styles[selectionType] = style;\r\n    this.styleHasChanged(selectionType);\r\n  }\r\n\r\n  /**\r\n   * Notifies jsGraph that the style of the serie has changed and needs to be redrawn on the next repaint\r\n   * @param {String} selectionType - The selection for which the style may have changed\r\n   * @returns {Serie} The current serie\r\n   * @memberof Serie\r\n   */\r\n  styleHasChanged(selectionType = 'unselected') {\r\n    this._changedStyles = this._changedStyles || {};\r\n\r\n    if (selectionType === false) {\r\n      for (var i in this._changedStyles) {\r\n        this._changedStyles[i] = false;\r\n      }\r\n    } else {\r\n      this._changedStyles[selectionType || 'unselected'] = true;\r\n    }\r\n\r\n    this.graph.requireLegendUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks if the style has changed for a selection type\r\n   * @param {String} selectionType - The selection for which the style may have changed\r\n   * @returns {Boolean} <code>true</code> if the style has changed\r\n   * @private\r\n   * @memberof Serie\r\n   */\r\n  hasStyleChanged(selectionType) {\r\n    this._changedStyles = this._changedStyles || {};\r\n    return this._changedStyles[selectionType || 'unselected'];\r\n  }\r\n\r\n  /**\r\n   * Notifies jsGraph that the data of the serie has changed\r\n   * @returns {Serie} The current serie\r\n   * @memberof Serie\r\n   */\r\n  dataHasChanged(arg) {\r\n    this._dataHasChanged = arg === undefined || arg;\r\n\r\n    if (this.waveform) {\r\n      this.minX = this.waveform.getXMin();\r\n      this.maxX = this.waveform.getXMax();\r\n      this.minY = this.waveform.getMin();\r\n      this.maxY = this.waveform.getMax();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks if the data has changed\r\n   * @returns {Boolean} <code>true</code> if the data has changed\r\n   * @private\r\n   * @memberof Serie\r\n   */\r\n  hasDataChanged() {\r\n    return this._dataHasChanged;\r\n  }\r\n\r\n  /**\r\n   * Set a key/value arbitrary information to the serie. It is particularly useful if you have this serie has a reference through an event for instance, and you want to retrieve data associated to it\r\n   * @param {String} prop - The property\r\n   * @param value - The value\r\n   * @returns {Serie} The current serie\r\n   * @see Serie#getInfo\r\n   * @memberof Serie\r\n   */\r\n  setInfo(prop, value) {\r\n    this.infos = this.infos || {};\r\n    this.infos[prop] = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Retrives an information value from its key\r\n   * @param {String} prop - The property\r\n   * @returns The value associated to the prop parameter\r\n   * @see Serie#setInfo\r\n   * @memberof Serie\r\n   */\r\n  getInfo(prop, value) {\r\n    return (this.infos || {})[prop];\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @memberof Serie\r\n   */\r\n  setAdditionalData(data) {\r\n    this.additionalData = data;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @memberof Serie\r\n   */\r\n  getAdditionalData() {\r\n    return this.additionalData;\r\n  }\r\n\r\n  /**\r\n   * Flags the serie as selected\r\n   * @returns {Serie} The current serie\r\n   * @memberof Serie\r\n   */\r\n  select(selectName) {\r\n    if (selectName == 'unselected') {\r\n      return this;\r\n    }\r\n    this.selected = true;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Flags the serie as unselected\r\n   * @returns {Serie} The current serie\r\n   * @memberof Serie\r\n   */\r\n  unselect() {\r\n    this.selected = false;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Allows mouse tracking of the serie\r\n   * @memberof Serie\r\n   * @returns {Serie} The current serie\r\n   * @param {Function} hoverCallback - Function to be called when the mouse enters the serie area\r\n   * @param {Function} outCallback - Function to be called when the mouse exits the serie area\r\n   * @private\r\n   */\r\n  enableTracking(hoverCallback, outCallback) {\r\n    this._tracker = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Disables mouse tracking of the serie\r\n   * @memberof Serie\r\n   * @returns {Serie} The current serie\r\n   * @private\r\n   */\r\n  disableTracking() {\r\n    if (this._trackerDom) {\r\n      this._trackerDom.remove();\r\n      this._trackerDom = null;\r\n    }\r\n\r\n    this._tracker = false;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Allows mouse tracking of the serie\r\n   *  @memberof Serie\r\n   *  @param {Object} options - The tracking line options\r\n   *  @returns {Serie} The current serie\r\n   */\r\n  allowTrackingLine(options) {\r\n    options = options || {};\r\n    this.graph.addSerieToTrackingLine(this, options);\r\n  }\r\n\r\n  getMarkerForLegend() {\r\n    return false;\r\n  }\r\n\r\n  get type() {\r\n    return this._type;\r\n  }\r\n\r\n  getType() {\r\n    return this._type;\r\n  }\r\n\r\n  excludeFromLegend() {\r\n    this._excludedFromLegend = true;\r\n    return this;\r\n  }\r\n\r\n  includeInLegend() {\r\n    this._excludedFromLegend = false;\r\n    return this;\r\n  }\r\n\r\n  setDataIndices(categories, nb) {\r\n    this.categoryIndices = categories;\r\n    this.nbCategories = nb;\r\n  }\r\n\r\n  hasErrors() {\r\n    if (!this.waveform) {\r\n      return false;\r\n    }\r\n\r\n    return this.waveform.hasErrorBars();\r\n  }\r\n}\r\n\r\nEventMixing(Serie, 'serie');\r\n\r\nexport default Serie;","import * as util from '../graph.util.js';\r\nimport ErrorBarMixin from '../mixins/graph.mixin.errorbars.js';\r\n\r\nimport Serie from './graph.serie.js';\r\n\r\nconst defaults = {};\r\n\r\nvar type = 'scatter';\r\n\r\nconst defaultOptions = {\r\n  markers: true,\r\n\r\n  markerStyles: {\r\n    unselected: {\r\n      default: {\r\n        shape: 'circle',\r\n        cx: 0,\r\n        cy: 0,\r\n        r: 3,\r\n        stroke: 'transparent',\r\n        fill: 'black'\r\n      }\r\n    },\r\n\r\n    selected: {\r\n      default: {\r\n        r: 4\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @static\r\n * @augments Serie\r\n * @example graph.newSerie( name, options, \"scatter\" );\r\n * @see Graph#newSerie\r\n */\r\nclass SerieScatter extends Serie {\r\n  constructor( graph, name, options, defaultInherited ) {\r\n    super(\r\n      graph,\r\n      name,\r\n      options,\r\n      util.extend( true, {}, defaultOptions, defaultInherited )\r\n    );\r\n\r\n    this._type = type;\r\n    util.mapEventEmission( this.options, this );\r\n\r\n    this.shapes = []; // Stores all shapes\r\n    this.shapesDetails = [];\r\n    this.shapes = [];\r\n    this.keys = [];\r\n\r\n    this.groupMarkers = document.createElementNS( this.graph.ns, 'g' );\r\n    this.groupMain.appendChild( this.groupMarkers );\r\n\r\n    //    this.selectedStyleGeneral = {};\r\n    //    this.selectedStyleModifiers = {};\r\n\r\n    this.groupMarkers.addEventListener(\r\n      'mouseenter',\r\n      ( e ) => {\r\n        var id = parseInt( e.target.parentElement.getAttribute( 'data-shapeid' ) );\r\n        if ( isNaN( id ) ) {\r\n          return;\r\n        }\r\n\r\n        if ( this.options.selectMarkerOnHover ) {\r\n          this.selectMarker( id, 'selected' );\r\n        }\r\n\r\n        this.emit(\r\n          'mouseOverMarker',\r\n          id,\r\n          this.waveform.getX( id ),\r\n          this.waveform.getY( id )\r\n        );\r\n      },\r\n      true\r\n    );\r\n\r\n    this.groupMarkers.addEventListener( 'mouseout', ( e ) => {\r\n      var id = parseInt( e.target.parentElement.getAttribute( 'data-shapeid' ) );\r\n      if ( isNaN( id ) ) {\r\n        return;\r\n      }\r\n\r\n      if ( this.options.selectMarkerOnHover ) {\r\n        this.selectMarker( id, 'unselected' );\r\n      }\r\n\r\n      this.emit(\r\n        'mouseOutMarker',\r\n        id,\r\n        this.waveform.getX( id ),\r\n        this.waveform.getY( id )\r\n      );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Applies for x as the category axis\r\n   * @example serie.setDataCategory( { x: \"someName\", y: Waveform } );\r\n   */\r\n  setDataCategory( data ) {\r\n    let minY = +Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    for ( let dataCategory of data ) {\r\n      this._checkY( dataCategory.y.getMaxY() );\r\n      this._checkY( dataCategory.y.getMinY() );\r\n    }\r\n\r\n    this.data = data;\r\n    this.dataHasChanged();\r\n    this.graph.updateDataMinMaxAxes();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all DOM points\r\n   * @private\r\n   */\r\n  empty() {\r\n    while ( this.groupMarkers.firstChild ) {\r\n      this.groupMarkers.removeChild( this.groupMarkers.firstChild );\r\n    }\r\n  }\r\n\r\n  getSymbolForLegend() {\r\n    if ( !this.markers ) {\r\n      return;\r\n    }\r\n\r\n    const container = super._getSymbolForLegendContainer();\r\n\r\n    if ( !this.shapeLegend ) {\r\n      this.shapeLegend = this._makeMarker(\r\n        container,\r\n        this.options.markerStyles.unselected.default\r\n      );\r\n      container.appendChild( this.shapeLegend );\r\n    }\r\n\r\n    var style = this.getMarkerStyle( 'unselected', -1, true );\r\n    for ( var i in style[ -1 ] ) {\r\n      if ( i == 'shape' ) {\r\n        continue;\r\n      }\r\n      this.shapeLegend.setAttribute( i, style[ -1 ][ i ] );\r\n    }\r\n\r\n    return container;\r\n  }\r\n\r\n  setStyle( style, styleName = 'unselected' ) {\r\n    return this.setMarkerStyle( style, undefined, styleName );\r\n  }\r\n\r\n  /**\r\n   * Sets style to the scatter points\r\n   * First argument is the style applied by default to all points\r\n   * Second argument is an array of modifiers that allows customization of any point of the scatter plot. Data for each elements of the array will augment <code>allStyles</code>, so be sure to reset the style if needed.\r\n   * All parameters - except <code>shape</code> - will be set as parameters to the DOM element of the shape\r\n   *\r\n   * @example\r\n   * var modifiers = [];\r\n   * modifiers[ 20 ] = { shape: 'circle', r: 12, fill: 'rgba(0, 100, 255, 0.3)', stroke: 'rgb(0, 150, 255)' };\r\n   * serie.setMarkerStyle( { shape: 'circle', r: 2, fill: 'rgba(255, 0, 0, 0.3)', stroke: 'rgb(255, 100, 0)' }, modifiers ); // Will modify scatter point n°20\r\n   *\r\n   * @param {Object} allStyles - The general style for all markers\r\n   * @param {Object} [ modifiers ] - The general style for all markers\r\n   * @param {String} [ selectionMode=\"unselected\" ] - The selection mode to which this style corresponds. Default is unselected\r\n   *\r\n   */\r\n  setMarkerStyle( all, modifiers, mode = 'unselected' ) {\r\n    if ( typeof modifiers == 'string' ) {\r\n      mode = modifiers;\r\n      modifiers = false;\r\n    }\r\n\r\n    this.options.markerStyles[ mode ] = this.options.markerStyles[ mode ] || {};\r\n    this.options.markerStyles[ mode ].all = all;\r\n    this.options.markerStyles[ mode ].modifiers = modifiers;\r\n\r\n    this.styleHasChanged( mode );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Redraws the serie\r\n   * @private\r\n   * @param {force} Boolean - Forces redraw even if the data hasn't changed\r\n   */\r\n  draw( force ) {\r\n    // Serie redrawing\r\n\r\n    if (\r\n      ( !force &&\r\n        !this.hasDataChanged() &&\r\n        !this.hasStyleChanged( 'unselected' ) ) ||\r\n      !this.options.markers\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let xpx, ypx, j, k, m;\r\n    const isCategory = this.getXAxis().getType() == 'category';\r\n    const keys = [];\r\n\r\n    this.dataHasChanged( false );\r\n    this.styleHasChanged( false );\r\n\r\n    // Removes the marker group from the main DOM for operation (avoids browser repaint)\r\n    this.groupMain.removeChild( this.groupMarkers );\r\n\r\n    j = 0;\r\n    k = 0;\r\n\r\n    if ( this.hasErrors() ) {\r\n      this.errorDrawInit();\r\n    }\r\n    if ( isCategory ) {\r\n      let k = 0;\r\n\r\n      for ( ; j < this.data.length; j++ ) {\r\n        if ( !this.categoryIndices.hasOwnProperty( this.data[ j ].x ) ) {\r\n          continue;\r\n        }\r\n\r\n        if ( this.error ) {\r\n          //   this.errorAddPoint( j, position[ 0 ] + position[ 1 ] / 2, 0, this.getX( position[ 0 ] + position[ 1 ] / 2 ), ypx );\r\n        }\r\n\r\n        for ( var n = 0, l = this.data[ j ].y.getLength(); n < l; n++ ) {\r\n          //let xpos = i / ( l - 1 ) * ( position[ 1 ] ) + position[ 0 ];\r\n\r\n          ypx = this.getY( this.data[ j ].y.getY( n ) );\r\n          xpx = this.getX(\r\n            ( n / ( l - 1 ) ) * ( 0.8 / this.nbCategories ) +\r\n            this.categoryIndices[ this.data[ j ].x ] +\r\n            0.1 / this.nbCategories\r\n          );\r\n          n++;\r\n\r\n          this.shapesDetails[ k ] = this.shapesDetails[ k ] || [];\r\n          this.shapesDetails[ k ][ 0 ] = xpx;\r\n          this.shapesDetails[ k ][ 1 ] = ypx;\r\n          keys.push( k );\r\n          k++;\r\n        }\r\n      }\r\n    } else {\r\n      for ( ; j < this.waveform.getLength(); j++ ) {\r\n        if (\r\n          this.waveform.getX( j ) < this.getXAxis().getCurrentMin() ||\r\n          this.waveform.getX( j ) > this.getXAxis().getCurrentMax() ||\r\n          this.waveform.getY( j ) < this.getYAxis().getCurrentMin() ||\r\n          this.waveform.getY( j ) > this.getYAxis().getCurrentMax()\r\n        ) {\r\n          if ( this.shapes[ j ] ) {\r\n            this.shapes[ j ].setAttribute( 'display', 'none' );\r\n            this.shapes[ j ]._hidden = true;\r\n          }\r\n          continue;\r\n        } else if ( this.shapes[ j ] && this.shapes[ j ]._hidden ) {\r\n          this.shapes[ j ].setAttribute( 'display', 'initial' );\r\n          this.shapes[ j ]._hidden = false;\r\n        }\r\n\r\n        xpx = this.getX( this.waveform.getX( j ) );\r\n        ypx = this.getY( this.waveform.getY( j ) );\r\n\r\n        if ( this.hasErrors() ) {\r\n          this.errorAddPoint(\r\n            j,\r\n            this.waveform.getX( j ),\r\n            this.waveform.getY( j ),\r\n            xpx,\r\n            ypx\r\n          );\r\n        }\r\n\r\n        this.shapesDetails[ j ] = this.shapesDetails[ j ] || [];\r\n        this.shapesDetails[ j ][ 0 ] = xpx;\r\n        this.shapesDetails[ j ][ 1 ] = ypx;\r\n        keys.push( j );\r\n\r\n        //this.shapes[ j / 2 ] = this.shapes[ j / 2 ] || undefined;\r\n      }\r\n    }\r\n\r\n    if ( this.hasErrors() ) {\r\n      this.errorDraw();\r\n    }\r\n\r\n    // This will automatically create the shapes\r\n    this.applyMarkerStyle( this.selectionType || 'unselected', keys );\r\n    this.keys = keys;\r\n    this.groupMain.appendChild( this.groupMarkers );\r\n  }\r\n\r\n  _makeMarker( group, shape ) {\r\n    var el = document.createElementNS( this.graph.ns, shape.shape );\r\n    group.appendChild( el );\r\n    return el;\r\n  }\r\n\r\n  getMarkerStyle( selection, index, noSetPosition ) {\r\n    var selection = selection || 'unselected';\r\n    var indices;\r\n\r\n    var styles = {};\r\n    if ( typeof index == 'number' ) {\r\n      indices = [ index ];\r\n    } else if ( Array.isArray( index ) ) {\r\n      indices = index;\r\n    }\r\n\r\n    var shape, index, modifier, style, j; // loop variables\r\n\r\n    if ( !this.options.markerStyles[ selection ] ) {\r\n      selection = 'unselected';\r\n    }\r\n\r\n    var styleAll = this.options.markerStyles[ selection ].all;\r\n\r\n    if ( !styleAll ) {\r\n      styleAll = this.options.markerStyles[ selection ].default;\r\n    }\r\n\r\n    if ( typeof styleAll == 'function' ) {\r\n      styleAll = styleAll();\r\n    }\r\n\r\n    const defaultStyle = this.options.markerStyles[ selection ].default ?\r\n      this.options.markerStyles[ selection ].default :\r\n      this.options.markerStyles.unselected.default;\r\n    styleAll = Object.assign( {}, defaultStyle, styleAll );\r\n\r\n    var i = 0,\r\n      l = indices.length;\r\n\r\n    for ( ; i < l; i++ ) {\r\n      index = indices[ i ];\r\n      shape = this.shapes[ index ];\r\n\r\n      if (\r\n        ( modifier = this.options.markerStyles[ selection ].modifiers ) &&\r\n        ( typeof modifier == 'function' || modifier[ index ] )\r\n      ) {\r\n        if ( typeof modifier == 'function' ) {\r\n          style = modifier(\r\n            this.waveform.getX( index ),\r\n            this.waveform.getY( index ),\r\n            index,\r\n            shape,\r\n            styleAll\r\n          );\r\n          if ( style === false ) {\r\n            continue;\r\n          }\r\n        } else if ( modifier[ index ] ) {\r\n          style = modifier[ index ];\r\n        }\r\n\r\n        styles[ index ] = Object.assign( {}, styleAll, style );\r\n      } else if ( styleAll !== undefined ) {\r\n        styles[ index ] = styleAll;\r\n      } else {\r\n        styles[ index ] = this.options.markerStyles[ selection ].default;\r\n      }\r\n\r\n      if ( !styles[ index ] ) {\r\n        styles[ index ] = styleAll;\r\n      }\r\n\r\n      if ( !shape ) {\r\n        // Shape doesn't exist, let's create it\r\n\r\n        if ( !styles[ index ].shape ) {\r\n          console.error( style );\r\n          throw `No shape was defined with the style \"${style}\".`;\r\n        }\r\n\r\n        var g = document.createElementNS( this.graph.ns, 'g' );\r\n        g.setAttribute( 'data-shapeid', index );\r\n\r\n        this.shapes[ index ] = this._makeMarker( g, styles[ index ] );\r\n        this.groupMarkers.appendChild( g );\r\n        shape = this.shapes[ index ];\r\n      }\r\n\r\n      if (\r\n        !noSetPosition &&\r\n        this.shapesDetails[ index ][ 0 ] === this.shapesDetails[ index ][ 0 ] &&\r\n        this.shapesDetails[ index ][ 1 ] === this.shapesDetails[ index ][ 1 ]\r\n      ) {\r\n        shape.parentNode.setAttribute(\r\n          'transform',\r\n          `translate(${this.shapesDetails[index][0]}, ${this.shapesDetails[index][1]\r\n          })`\r\n        );\r\n      }\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  applyMarkerStyle( selection, index, noSetPosition ) {\r\n    var i, j;\r\n    var styles = this.getMarkerStyle( selection, index, noSetPosition );\r\n\r\n    for ( i in styles ) {\r\n      for ( j in styles[ i ] ) {\r\n        if ( j !== 'shape' && this.shapes[ i ] ) {\r\n          if ( styles[ i ][ j ] ) {\r\n            this.shapes[ i ].setAttribute( j, styles[ i ][ j ] );\r\n          } else {\r\n            this.shapes[ i ].removeAttribute( j );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  unselectMarker( index ) {\r\n    this.selectMarker( index, false );\r\n  }\r\n\r\n  selectMarker( index, setOn, selectionType ) {\r\n    if (\r\n      this.shapesDetails[ index ][ 2 ] &&\r\n      this.shapesDetails[ index ][ 2 ] == selectionType\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if ( typeof setOn == 'string' ) {\r\n      selectionType = setOn;\r\n      setOn = undefined;\r\n    }\r\n\r\n    if ( Array.isArray( index ) ) {\r\n      return this.selectMarkers( index );\r\n    }\r\n\r\n    if ( this.shapes[ index ] && this.shapesDetails[ index ] ) {\r\n      if ( ( this.shapesDetails[ index ][ 2 ] || setOn === false ) && setOn !== true ) {\r\n        var selectionStyle = this.shapesDetails[ index ][ 2 ];\r\n        this.shapesDetails[ index ][ 2 ] = false;\r\n        var allStyles = this.getMarkerStyle( selectionStyle, index, true );\r\n\r\n        for ( var i in allStyles[ index ] ) {\r\n          this.shapes[ index ].removeAttribute( i );\r\n        }\r\n\r\n        this.applyMarkerStyle( 'unselected', index, true );\r\n      } else {\r\n        selectionType = selectionType || 'selected';\r\n        this.shapesDetails[ index ][ 2 ] = selectionType;\r\n        this.applyMarkerStyle( selectionType, index, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  select( selectionType ) {\r\n    this.selectionType = selectionType;\r\n    this.applyMarkerStyle( this.selectionType || 'selected', this.keys );\r\n    super.select( selectionType );\r\n  }\r\n\r\n  unselect() {\r\n    this.selectionType = 'unselected';\r\n    this.applyMarkerStyle( this.selectionType || 'unselected', this.keys );\r\n\r\n    super.unselect();\r\n  }\r\n\r\n  setMarkers( bln = true ) {\r\n    this.options.markers = bln;\r\n\r\n    return this;\r\n  }\r\n\r\n  showMarkers() {\r\n    if ( this.options.markers ) {\r\n      return;\r\n    }\r\n\r\n    this.options.markers = true;\r\n    this.groupMarkers.setAttribute( 'display', 'initial' );\r\n\r\n    if ( this.shapeLegend ) {\r\n      this.shapeLegend.setAttribute( 'display', 'initial' );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  hideMarkers() {\r\n    if ( !this.options.markers ) {\r\n      return;\r\n    }\r\n\r\n    this.options.markers = false;\r\n    this.groupMarkers.setAttribute( 'display', 'none' );\r\n\r\n    if ( this.shapeLegend ) {\r\n      this.shapeLegend.setAttribute( 'display', 'none' );\r\n    }\r\n    return this;\r\n  }\r\n\r\n  getUsedCategories() {\r\n    if ( typeof this.data[ 0 ] == 'object' ) {\r\n      return this.data.map( ( d ) => d.x );\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  getClosestPointToXY( valX = this.getXAxis().getMouseVal(), valY = this.getYAxis().getMouseVal(), withinPxX = 0, withinPxY = 0, useAxis = false, usePx = true ) {\r\n    // For the scatter serie it's pretty simple. No interpolation. We look at the point directly\r\n\r\n    //const xVal = this.getXAxis().getVal( x );\r\n    //const yVal = this.getYAxis().getVal( y );\r\n    const xValAllowed = this.getXAxis().getRelVal( withinPxX );\r\n    const yValAllowed = this.getYAxis().getRelVal( withinPxY );\r\n\r\n    // Index of the closest point\r\n    const closestPointIndex = this.waveform.findWithShortestDistance( {\r\n      x: valX,\r\n      y: valY,\r\n      xMax: xValAllowed,\r\n      yMax: yValAllowed,\r\n      interpolation: false,\r\n      scaleX: !usePx ? 1 : 1 / this.getXAxis().getRelVal( 1 ),\r\n      scaleY: !usePx ? 1 : 1 / this.getYAxis().getRelVal( 1 )\r\n    } );\r\n\r\n    return {\r\n\r\n      indexBefore: closestPointIndex,\r\n      indexAfter: closestPointIndex,\r\n\r\n      xBefore: this.waveform.getX( closestPointIndex ),\r\n      xAfter: this.waveform.getX( closestPointIndex ),\r\n      yBefore: this.waveform.getY( closestPointIndex ),\r\n      yAfter: this.waveform.getX( closestPointIndex ),\r\n\r\n      xExact: valX,\r\n\r\n      indexClosest: closestPointIndex,\r\n      interpolatedY: this.waveform.getY( closestPointIndex ),\r\n\r\n      xClosest: this.waveform.getX( closestPointIndex ),\r\n      yClosest: this.waveform.getY( closestPointIndex )\r\n    };\r\n  }\r\n}\r\n\r\nutil.mix( SerieScatter, ErrorBarMixin );\r\n\r\nexport default SerieScatter;","import * as util from '../graph.util.js';\r\nimport ErrorBarMixin from '../mixins/graph.mixin.errorbars.js';\r\n\r\nimport SerieScatter from './graph.serie.scatter.js';\r\nimport Serie from './graph.serie.js';\r\n\r\nconst type = 'line';\r\n\r\nconst defaultOptions = {\r\n  /**\r\n   * @name SerieLineDefaultOptions\r\n   * @object\r\n   * @static\r\n   * @memberof SerieLine\r\n   */\r\n\r\n  // Extends scatterSerie\r\n  markers: false,\r\n\r\n  lineColor: 'black',\r\n  lineStyle: 1,\r\n  lineWidth: 1,\r\n\r\n  trackMouse: false,\r\n  lineToZero: false,\r\n  selectableOnClick: false,\r\n  overflowX: false,\r\n  overflowY: false\r\n};\r\n\r\n/**\r\n * Serie line\r\n * @example graph.newSerie( name, options, \"line\" );\r\n * @see Graph#newSerie\r\n * @extends Serie\r\n */\r\nclass SerieLine extends SerieScatter {\r\n  constructor(graph, name, options, defaultInherited) {\r\n    super(\r\n      graph,\r\n      name,\r\n      options,\r\n      util.extend(true, {}, defaultOptions, defaultInherited)\r\n    );\r\n\r\n    this.selectionType = 'unselected';\r\n    this._type = type;\r\n    util.mapEventEmission(this.options, this); // Register events\r\n\r\n    // Creates an empty style variable\r\n    this.styles = {};\r\n\r\n    // Unselected style\r\n    this.styles.unselected = {\r\n      lineColor: this.options.lineColor,\r\n      lineStyle: this.options.lineStyle,\r\n      lineWidth: this.options.lineWidth\r\n    };\r\n\r\n    this.styles.selected = {\r\n      lineWidth: 3\r\n    };\r\n\r\n    this.shown = true;\r\n\r\n    this.data = [];\r\n    this._isMinOrMax = {\r\n      x: {\r\n        min: false,\r\n        max: false\r\n      },\r\n      y: {\r\n        min: false,\r\n        max: false\r\n      }\r\n    };\r\n\r\n    // Optimize is no markerPoints => save loops\r\n    //      this.markerPoints = {};\r\n\r\n    this.groupLines = document.createElementNS(this.graph.ns, 'g');\r\n    this.domMarker = document.createElementNS(this.graph.ns, 'path');\r\n\r\n    if (!this.domMarker.style) {\r\n      this.domMarker.style = {\r\n        cursor: 'pointer'\r\n      };\r\n    } else {\r\n      this.domMarker.style.cursor = 'pointer';\r\n    }\r\n\r\n    this.additionalData = {};\r\n\r\n    this.marker = document.createElementNS(this.graph.ns, 'circle');\r\n    this.marker.setAttribute('fill', 'black');\r\n    this.marker.setAttribute('r', 3);\r\n    this.marker.setAttribute('display', 'none');\r\n\r\n    this.markerLabel = document.createElementNS(this.graph.ns, 'text');\r\n    this.markerLabelSquare = document.createElementNS(this.graph.ns, 'rect');\r\n    this.markerLabelSquare.setAttribute('fill', 'white');\r\n    this.domMarkerHover = {};\r\n    this.domMarkerSelect = {};\r\n    this.markerHovered = 0;\r\n    this.groupMarkerSelected = document.createElementNS(this.graph.ns, 'g');\r\n\r\n    this.markerPoints = {};\r\n\r\n    //this.scale = 1;\r\n    //this.shift = 0;\r\n    this.lines = [];\r\n\r\n    this.groupMain.appendChild(this.groupLines);\r\n\r\n    this.groupMain.appendChild(this.marker);\r\n\r\n    this.groupMain.appendChild(this.groupMarkerSelected);\r\n    this.groupMain.appendChild(this.markerLabelSquare);\r\n    this.groupMain.appendChild(this.markerLabel);\r\n\r\n    this.independantMarkers = [];\r\n\r\n    if (this.initExtended1) {\r\n      this.initExtended1();\r\n    }\r\n\r\n    this.groupLines.addEventListener('click', (e) => {\r\n      if (this.options.selectableOnClick) {\r\n        if (this.isSelected()) {\r\n          this.graph.unselectSerie(this);\r\n        } else {\r\n          this.graph.selectSerie(this);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  postInit() {\r\n    this.extendStyles();\r\n  }\r\n\r\n  /**\r\n   * Sets the options of the serie\r\n   * @see SerieLineDefaultOptions\r\n   * @param {Object} options - A object containing the options to set\r\n   * @return {SerieLine} The current serie\r\n   * @memberof SerieLine\r\n   */\r\n  setOptions(options) {\r\n    //this.options = util.extend( true, {}, SerieLine.prototype.defaults, ( options || {} ) );\r\n    // Unselected style\r\n    /*this.styles.unselected = {\r\n      lineColor: this.options.lineColor,\r\n      lineStyle: this.options.lineStyle\r\n    };\r\n*/\r\n    this.applyLineStyles();\r\n    return this;\r\n  }\r\n\r\n  onMouseWheel() { }\r\n\r\n  /**\r\n   * Cleans the DOM from the serie internal object (serie and markers). Mostly used internally when a new {@link Serie#setData} is called\r\n   * @returns {SerieLine} The current serie\r\n   * @memberof SerieLine\r\n   */\r\n  empty() {\r\n    for (var i = 0, l = this.lines.length; i < l; i++) {\r\n      this.groupLines.removeChild(this.lines[i]);\r\n    }\r\n    this.lines = [];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies a selection to the serie\r\n   * @param {String} [ selectionType = \"selected\" ] - The selection name\r\n   * @returns {SerieLine} The current serie\r\n   * @see SerieLine#unselect\r\n   * @memberof SerieLine\r\n   */\r\n  select(selectionType = 'selected') {\r\n    this.selected = selectionType !== 'unselected';\r\n    this.selectionType = selectionType;\r\n\r\n    this.applyLineStyles();\r\n    this.applyLineStyle(this.getSymbolForLegend());\r\n\r\n    super.select(selectionType);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the selection to the serie. Effectively, calls {@link SerieLine#select}(\"unselected\").\r\n   * @returns {SerieLine} The current serie\r\n   * @see SerieLine#select\r\n   * @memberof SerieLine\r\n   */\r\n  unselect() {\r\n    this.selected = false;\r\n    super.unselect();\r\n    return this.select('unselected');\r\n  }\r\n\r\n  /**\r\n   * Computes and returns a line SVG element with the same line style as the serie, or width 20px\r\n   * @returns {SVGElement}\r\n   * @memberof SerieLine\r\n   */\r\n  getSymbolForLegend() {\r\n    const container = this._getSymbolForLegendContainer();\r\n\r\n    if (!this.lineForLegend) {\r\n      var line = document.createElementNS(this.graph.ns, 'line');\r\n      this.applyLineStyle(line);\r\n\r\n      line.setAttribute('x1', 5);\r\n      line.setAttribute('x2', 25);\r\n      line.setAttribute('y1', 0);\r\n      line.setAttribute('y2', 0);\r\n\r\n      line.setAttribute('cursor', 'pointer');\r\n\r\n      this.lineForLegend = line;\r\n      container.appendChild(this.lineForLegend);\r\n    } else {\r\n      this.applyLineStyle(this.lineForLegend);\r\n    }\r\n\r\n    super.getSymbolForLegend();\r\n\r\n    return this.lineForLegend;\r\n  }\r\n\r\n  /**\r\n   * Degrades the data of the serie. This option is used for big data sets that have monotoneously increasing (or decreasing) x values.\r\n   * For example, a serie containing 1'000'000 points, displayed over 1'000px, will have 1'000 points per pixel. Often it does not make sense to display more than 2-3 points per pixel.\r\n   * <code>degrade( pxPerPoint )</code> allows a degradation of the serie, based on a a number of pixel per point. It computes the average of the data that would be displayed over each pixel range\r\n   * Starting from jsGraph 2.0, it does not calculate the minimum and maximum and creates the zone serie anymore\r\n   * @return {SerieLine} The current serie instance\r\n   * @example serie.degrade( 0.5 ); // Will display 2 points per pixels\r\n   * @memberof SerieLine\r\n   */\r\n  degrade(pxPerP) {\r\n    this.degradationPx = pxPerP;\r\n    return this;\r\n  }\r\n\r\n  drawInit(force) {\r\n    var data, xData;\r\n\r\n    try {\r\n      this.axisCheck();\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return false;\r\n    }\r\n\r\n    this.currentLineId = 0;\r\n    this.counter = 0;\r\n    this._drawn = true;\r\n    this.currentLine = '';\r\n\r\n    // Degradation\r\n\r\n    if (this.waveform) {\r\n      if (this.degradationPx) {\r\n        this.waveform.resampleForDisplay({\r\n          resampleToPx: this.degradationPx,\r\n          xPosition: this.getXAxis().getPx.bind(this.getXAxis()),\r\n          minX: this.getXAxis().getCurrentMin(),\r\n          maxX: this.getXAxis().getCurrentMax()\r\n        });\r\n\r\n        this._dataToUse = [this.waveform.getDataToUseFlat()];\r\n      } else if (this.waveform.hasAggregation()) {\r\n        let xaxis = this.getXAxis(),\r\n          numberOfPointsInTotal =\r\n            (this.graph.getDrawingWidth() *\r\n              (xaxis.getDataMax() - xaxis.getDataMin())) /\r\n            (xaxis.getCurrentMax() - xaxis.getCurrentMin()),\r\n          promise = this.waveform.selectAggregatedData(numberOfPointsInTotal);\r\n\r\n        if (promise instanceof Promise) {\r\n          promise.then(() => {\r\n            this.draw(force);\r\n          });\r\n\r\n          return false;\r\n        } else if (promise === false) {\r\n          return false;\r\n        } else {\r\n          this._dataToUse = this.waveform.getDataToUseFlat();\r\n        }\r\n      }\r\n\r\n      //    this._dataToUse = this.waveform.getDataToUseFlat();\r\n    } else {\r\n      this._dataToUse = this.data;\r\n      this._xDataToUse = this.xData;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  removeLinesGroup() {\r\n    this._afterLinesGroup = this.groupLines.nextSibling;\r\n    this.groupMain.removeChild(this.groupLines);\r\n  }\r\n\r\n  insertLinesGroup() {\r\n    if (!this._afterLinesGroup) {\r\n      throw 'Could not find group after lines to insertion.';\r\n    }\r\n\r\n    this.groupMain.insertBefore(this.groupLines, this._afterLinesGroup);\r\n    this._afterLinesGroup = false;\r\n  }\r\n\r\n  removeExtraLines() {\r\n    var i = this.currentLineId,\r\n      l = this.lines.length;\r\n\r\n    for (; i < l; i++) {\r\n      this.groupLines.removeChild(this.lines[i]);\r\n    }\r\n\r\n    this.lines.splice(this.currentLineId, l - this.currentLineId);\r\n    this.currentLineId = 0;\r\n  }\r\n\r\n  /**\r\n   * Draws the serie\r\n   * @memberof SerieLine\r\n   */\r\n  draw(force) {\r\n    // Serie redrawing\r\n\r\n    if (!this.getXAxis() || !this.getYAxis()) {\r\n      throw 'No axes were defined for this serie';\r\n    }\r\n\r\n    if (force || this.hasDataChanged()) {\r\n      super.draw(force);\r\n\r\n      if (!this.drawInit(force)) {\r\n        return;\r\n      }\r\n\r\n      var data = this._dataToUse,\r\n        xData = this._xDataToUse,\r\n        slotToUse = this._slotToUse;\r\n\r\n      this.removeLinesGroup();\r\n\r\n      this.lookForMaxima = true;\r\n      this.lookForMinima = false;\r\n\r\n      this.pos0 = this.getYAxis().getPos(\r\n        Math.max(0, this.getYAxis().getCurrentMin())\r\n      );\r\n\r\n      if (this.hasErrors()) {\r\n        this.errorDrawInit();\r\n      }\r\n\r\n      this._draw();\r\n\r\n      if (this.hasErrors()) {\r\n        this.errorDraw();\r\n      }\r\n\r\n      this.removeExtraLines();\r\n\r\n      this.insertLinesGroup();\r\n    }\r\n\r\n    // Unhovers everything\r\n    for (var i in this.domMarkerHover) {\r\n      this.toggleMarker(i.split(','), false, true);\r\n    }\r\n\r\n    // Deselects everything\r\n    for (var i in this.domMarkerSelect) {\r\n      this.toggleMarker(i.split(','), false, false);\r\n    }\r\n\r\n    this.applyLineStyle(this.getSymbolForLegend());\r\n\r\n    if (this.hasStyleChanged(this.selectionType)) {\r\n      this.updateStyle();\r\n    }\r\n\r\n    this.dataHasChanged(false);\r\n    super.afterDraw();\r\n  }\r\n\r\n  _draw() {\r\n    let waveform = this.waveform,\r\n      data,\r\n      x,\r\n      y,\r\n      lastX = false,\r\n      lastY = false,\r\n      xpx,\r\n      ypx,\r\n      xpx2,\r\n      ypx2,\r\n      xAxis = this.getXAxis(),\r\n      yAxis = this.getYAxis(),\r\n      xMin = xAxis.getCurrentMin(),\r\n      yMin = yAxis.getCurrentMin(),\r\n      xMax = xAxis.getCurrentMax(),\r\n      yMax = yAxis.getCurrentMax();\r\n\r\n    if (!waveform) {\r\n      return;\r\n    }\r\n\r\n    data = waveform.getData(true);\r\n    // Y crossing\r\n\r\n    /*xshift = waveform.getXShift(),\r\n    xscale = wave.getXScale(),*/\r\n    yshift = waveform.getShift(),\r\n      yscale = waveform.getScale();\r\n\r\n    let pointOutside = false;\r\n    let lastPointOutside = false;\r\n    let pointOnAxis;\r\n\r\n    let _monotoneous = this.isMonotoneous();\r\n\r\n    this.currentLine = '';\r\n\r\n\r\n    let { i, l } = this._getIterativeBounds(waveform, xMin, xMax);\r\n\r\n    for (; i < l; i += 1) {\r\n      x = waveform.getX(i, true);\r\n      y = data[i] * yscale + yshift;\r\n      if (x != x || y != y) {\r\n        // NaN checks\r\n        this._createLine();\r\n        continue;\r\n      }\r\n\r\n      if (\r\n        (!this.options.overflowX && x < xMin && lastX < xMin) ||\r\n        (!this.options.overflowX && x > xMax && lastX > xMax) ||\r\n        (((!this.options.overflowY && y < yMin && lastY < yMin) ||\r\n          (!this.options.overflowY && y > yMax && lastY > yMax)) &&\r\n          !this.options.lineToZero)\r\n      ) {\r\n        lastX = x;\r\n        lastY = y;\r\n        lastPointOutside = true;\r\n        continue;\r\n      }\r\n\r\n      this.counter2 = i;\r\n\r\n      if (this.options.lineToZero) {\r\n        if (y > yMax) {\r\n          y = yMax;\r\n        }\r\n        if (y < yMin) {\r\n          y = yMin;\r\n        }\r\n      }\r\n\r\n      xpx2 = this.getX(x);\r\n      ypx2 = this.getY(y);\r\n      //xpx2 = 0;\r\n      //ypx2 = 0;\r\n\r\n      if (xpx2 == xpx && ypx2 == ypx) {\r\n        continue;\r\n      }\r\n\r\n      if (xpx2 != xpx2 || ypx2 != ypx2) {\r\n        // NaN checks\r\n        if (this.counter > 0) {\r\n          this._createLine();\r\n        }\r\n        continue;\r\n      }\r\n\r\n      let pointOutside = this.isPointOutside(x, y, xMin, xMax);\r\n\r\n      if (this.options.lineToZero) {\r\n        pointOutside = x < xMin || x > xMax;\r\n\r\n        if (pointOutside) {\r\n          continue;\r\n        }\r\n      } else {\r\n        if (pointOutside || lastPointOutside) {\r\n          if ((lastX === false || lastY === false) && !lastPointOutside) {\r\n            xpx = xpx2;\r\n            ypx = ypx2;\r\n            lastX = x;\r\n            lastY = y;\r\n          } else {\r\n\r\n            let pointOnAxis = this.calculateAxisCrossing(x, y, lastX, lastY, xMin, xMax, yMin, yMax);\r\n\r\n            if (pointOnAxis.length > 0) {\r\n              if (!pointOutside) {\r\n                // We were outside and now go inside\r\n                this._createLine();\r\n                this._addPoint(\r\n                  this.getX(pointOnAxis[0][0]),\r\n                  this.getY(pointOnAxis[0][1]),\r\n                  pointOnAxis[0][0],\r\n                  pointOnAxis[0][1],\r\n                  false,\r\n                  false,\r\n                  false\r\n                );\r\n                this._addPoint(xpx2, ypx2, lastX, lastY, false, false, true);\r\n              } else if (!lastPointOutside) {\r\n                // We were inside and now go outside\r\n                this._addPoint(\r\n                  this.getX(pointOnAxis[0][0]),\r\n                  this.getY(pointOnAxis[0][1]),\r\n                  pointOnAxis[0][0],\r\n                  pointOnAxis[0][1],\r\n                  false,\r\n                  false,\r\n                  false\r\n                );\r\n              } else {\r\n                // No crossing: do nothing\r\n                if (pointOnAxis.length == 2) {\r\n                  this._createLine();\r\n\r\n                  this._addPoint(\r\n                    this.getX(pointOnAxis[0][0]),\r\n                    this.getY(pointOnAxis[0][1]),\r\n                    pointOnAxis[0][0],\r\n                    pointOnAxis[0][1],\r\n                    false,\r\n                    false,\r\n                    false\r\n                  );\r\n                  this._addPoint(\r\n                    this.getX(pointOnAxis[1][0]),\r\n                    this.getY(pointOnAxis[1][1]),\r\n                    pointOnAxis[0][0],\r\n                    pointOnAxis[0][1],\r\n                    false,\r\n                    false,\r\n                    false\r\n                  );\r\n                }\r\n              }\r\n            } else if (!pointOutside) {\r\n              this._addPoint(xpx2, ypx2, lastX, lastY, i, false, false);\r\n            }\r\n          }\r\n\r\n          xpx = xpx2;\r\n          ypx = ypx2;\r\n          lastX = x;\r\n          lastY = y;\r\n\r\n          lastPointOutside = pointOutside;\r\n\r\n          continue;\r\n        }\r\n      }\r\n\r\n      this._addPoint(xpx2, ypx2, x, y, i, false, true);\r\n\r\n      //this.detectPeaks( x, y );\r\n\r\n      xpx = xpx2;\r\n      ypx = ypx2;\r\n\r\n      lastX = x;\r\n      lastY = y;\r\n    }\r\n\r\n    this._createLine();\r\n\r\n    if (this._tracker) {\r\n      if (this._trackerDom) {\r\n        this._trackerDom.remove();\r\n      }\r\n\r\n      var cloned = this.groupLines.cloneNode(true);\r\n      this.groupMain.appendChild(cloned);\r\n\r\n      for (i = 0, l = cloned.children.length; i < l; i++) {\r\n        cloned.children[i].setAttribute('stroke', 'transparent');\r\n        cloned.children[i].setAttribute('stroke-width', '25px');\r\n        cloned.children[i].setAttribute('pointer-events', 'stroke');\r\n      }\r\n\r\n      this._trackerDom = cloned;\r\n\r\n      this.groupMain.addEventListener('mousemove', (e) => {\r\n        var coords = this.graph._getXY(e),\r\n          ret = this.handleMouseMove(false, false);\r\n\r\n        this._trackingCallback(this, ret, coords.x, coords.y);\r\n      });\r\n\r\n      this.groupMain.addEventListener('mouseleave', (e) => {\r\n        this._trackingOutCallback(this);\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  _getIterativeBounds(waveform, xMin, xMax) {\r\n\r\n    let i = 0,\r\n      l = waveform.getLength(),\r\n      wL = l;\r\n\r\n    if (waveform.isXMonotoneous()) {\r\n      if (waveform.isXMonotoneousAscending()) {\r\n        i = waveform.getIndexFromX(xMin, true);\r\n        l = waveform.getIndexFromX(xMax, true);\r\n      } else {\r\n        i = waveform.getIndexFromX(xMax, true);\r\n        l = waveform.getIndexFromX(xMin, true);\r\n      }\r\n      console.log(i, l);\r\n\r\n      if (i == false) {\r\n        i = 0;\r\n      } else if (i > 0) {\r\n        i--;\r\n      }\r\n\r\n      if (l == false) {\r\n        l = wL;\r\n      } else if (l < wL) {\r\n        l++;\r\n      }\r\n    }\r\n    return { i, l };\r\n  }\r\n\r\n\r\n  kill() {\r\n    super.kill();\r\n  }\r\n\r\n  isPointOutside(x, y, xMin, xMax, yMin, yMax) {\r\n    if (!this.isMonotoneous()) {\r\n      return (!this.options.overflowX && (x < xMin || x > xMax)) || (!this.options.overflowY && (y < yMin || y > yMax));\r\n    } else {\r\n      return !this.options.overflowY && (y < yMin || y > yMax);\r\n    }\r\n  }\r\n\r\n\r\n  calculateAxisCrossing(x, y, lastX, lastY, xMin, xMax, yMin, yMax) {\r\n    let pointOnAxis = [];\r\n\r\n\r\n    // Y crossing\r\n    let yLeftCrossingRatio = (x - xMin) / (x - lastX);\r\n    let yLeftCrossing = y - yLeftCrossingRatio * (y - lastY);\r\n    let yRightCrossingRatio = (x - xMax) / (x - lastX);\r\n    let yRightCrossing = y - yRightCrossingRatio * (y - lastY);\r\n\r\n    // X crossing\r\n    let xTopCrossingRatio = (y - yMin) / (y - lastY);\r\n    let xTopCrossing = x - xTopCrossingRatio * (x - lastX);\r\n    let xBottomCrossingRatio = (y - yMax) / (y - lastY);\r\n    let xBottomCrossing = x - xBottomCrossingRatio * (x - lastX);\r\n\r\n    if (\r\n      yLeftCrossingRatio < 1 &&\r\n      yLeftCrossingRatio > 0 &&\r\n      yLeftCrossing !== false &&\r\n      yLeftCrossing <= yMax &&\r\n      yLeftCrossing >= yMin\r\n    ) {\r\n      pointOnAxis.push([xMin, yLeftCrossing]);\r\n    }\r\n\r\n    if (\r\n      yRightCrossingRatio < 1 &&\r\n      yRightCrossingRatio > 0 &&\r\n      yRightCrossing !== false &&\r\n      yRightCrossing <= yMax &&\r\n      yRightCrossing >= yMin\r\n    ) {\r\n      pointOnAxis.push([xMax, yRightCrossing]);\r\n    }\r\n\r\n    if (\r\n      xTopCrossingRatio < 1 &&\r\n      xTopCrossingRatio > 0 &&\r\n      xTopCrossing !== false &&\r\n      xTopCrossing <= xMax &&\r\n      xTopCrossing >= xMin\r\n    ) {\r\n      pointOnAxis.push([xTopCrossing, yMin]);\r\n    }\r\n\r\n    if (\r\n      xBottomCrossingRatio < 1 &&\r\n      xBottomCrossingRatio > 0 &&\r\n      xBottomCrossing !== false &&\r\n      xBottomCrossing <= xMax &&\r\n      xBottomCrossing >= xMin\r\n    ) {\r\n      pointOnAxis.push([xBottomCrossing, yMax]);\r\n    }\r\n    return pointOnAxis;\r\n  }\r\n\r\n\r\n  _addPoint(xpx, ypx, x, y, j, move, allowMarker) {\r\n    /*if( ! this.currentLineId ) {\r\n        throw \"No current line\"\r\n      }* @memberof SerieLine\r\n  */\r\n\r\n    if (xpx !== xpx || ypx !== ypx) {\r\n      return;\r\n    }\r\n\r\n    if (this.counter == 0) {\r\n      this.currentLine = 'M ';\r\n    } else {\r\n      if (this.options.lineToZero || move) {\r\n        this.currentLine += 'M ';\r\n      } else {\r\n        this.currentLine += 'L ';\r\n      }\r\n    }\r\n\r\n    this.currentLine += xpx;\r\n    this.currentLine += ' ';\r\n    this.currentLine += ypx;\r\n    this.currentLine += ' ';\r\n\r\n    if (this.options.lineToZero && this.pos0 !== undefined) {\r\n      this.currentLine += 'L ';\r\n      this.currentLine += xpx;\r\n      this.currentLine += ' ';\r\n      this.currentLine += this.pos0;\r\n      this.currentLine += ' ';\r\n    }\r\n\r\n    if (this.hasErrors()) {\r\n      this.errorAddPoint(j, x, y, xpx, ypx);\r\n    }\r\n\r\n    this.counter++;\r\n  }\r\n\r\n  // Returns the DOM\r\n  _createLine() {\r\n    var i = this.currentLineId++,\r\n      line;\r\n\r\n    // Creates a line if needed\r\n    if (this.lines[i]) {\r\n      line = this.lines[i];\r\n    } else {\r\n      line = document.createElementNS(this.graph.ns, 'path');\r\n      this.applyLineStyle(line);\r\n      this.groupLines.appendChild(line);\r\n      this.lines[i] = line;\r\n    }\r\n\r\n    if (this.counter == 0) {\r\n      line.setAttribute('d', '');\r\n    } else {\r\n      line.setAttribute('d', this.currentLine);\r\n    }\r\n\r\n    this.currentLine = 'M ';\r\n    this.counter = 0;\r\n\r\n    return line;\r\n  }\r\n\r\n  /**\r\n   * Reapply the current style to the serie lines elements. Mostly used internally\r\n   * @memberof SerieLine\r\n   */\r\n  applyLineStyles() {\r\n    for (var i = 0; i < this.lines.length; i++) {\r\n      this.applyLineStyle(this.lines[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies the current style to a line element. Mostly used internally\r\n   * @memberof SerieLine\r\n   */\r\n  applyLineStyle(line) {\r\n    line.setAttribute('stroke', this.getLineColor());\r\n    line.setAttribute('stroke-width', this.getLineWidth());\r\n    if (this.getLineDashArray()) {\r\n      line.setAttribute('stroke-dasharray', this.getLineDashArray());\r\n    } else {\r\n      line.removeAttribute('stroke-dasharray');\r\n    }\r\n\r\n    if (this.getFillColor()) {\r\n      line.setAttribute('fill', this.getFillColor());\r\n    } else {\r\n      line.setAttribute('fill', 'none');\r\n    }\r\n\r\n    //\tline.setAttribute('shape-rendering', 'optimizeSpeed');\r\n  }\r\n\r\n  /**\r\n   * Updates the current style (lines + legend) of the serie. Use this method if you have explicitely changed the options of the serie\r\n   * @example var opts = { lineColor: 'red' };\r\n   * var s = graph.newSerie( \"name\", opts ).setData( someData );\r\n   * opts.lineColor = 'green';\r\n   * s.updateStyle(); // Sets the lineColor to green\r\n   * s.draw(); // Would also do the same thing, but recalculates the whole serie display (including (x,y) point pairs)\r\n   * @memberof SerieLine\r\n   */\r\n  updateStyle() {\r\n    this.applyLineStyles();\r\n    this.setLegendSymbolStyle();\r\n\r\n    this.styleHasChanged(false);\r\n  }\r\n\r\n  // Revised August 2014. Ok\r\n  getMarkerPath(family, add) {\r\n    var z = family.zoom || 1,\r\n      add = add || 0,\r\n      el = [];\r\n\r\n    switch (family.type) {\r\n      case 2:\r\n        el = ['m', -2, -2, 'l', 4, 4, 'm', -4, 0, 'l', 4, -4];\r\n        break;\r\n\r\n      case 3:\r\n        el = ['m', -2, 0, 'l', 4, 0, 'm', -2, -2, 'l', 0, 4];\r\n        break;\r\n\r\n      case 4:\r\n        el = ['m', -1, -1, 'l', 2, 0, 'l', -1, 2, 'z'];\r\n        break;\r\n\r\n      default:\r\n      case 1:\r\n        el = ['m', -2, -2, 'l', 4, 0, 'l', 0, 4, 'l', -4, 0, 'z'];\r\n        break;\r\n    }\r\n\r\n    if ((z == 1 || !z) && !add) {\r\n      return el.join(' ');\r\n    }\r\n\r\n    var num = 'number';\r\n\r\n    if (!el) {\r\n      return;\r\n    }\r\n\r\n    for (var i = 0, l = el.length; i < l; i++) {\r\n      if (typeof el[i] == num) {\r\n        el[i] *= z + add;\r\n      }\r\n    }\r\n\r\n    return el.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Searches the closest point pair (x,y) to the a pair of pixel position\r\n   * @param {Number} x - The x position in pixels (from the left)\r\n   * @param {Number} y - The y position in pixels (from the left)\r\n   * @returns {Number} Index in the data array of the closest (x,y) pair to the pixel position passed in parameters\r\n   * @memberof SerieLine\r\n   */\r\n  /*\r\n  \r\n  Let's deprecate this\r\n  \r\n  searchIndexByPxXY( x, y ) {\r\n    var oldDist = false,\r\n      xyindex = false,\r\n      dist;\r\n  \r\n    var xData = this._xDataToUse,\r\n      p_x,\r\n      p_y;\r\n  \r\n    for ( var k = 0, m = this.waveform.getLength(); k < m; k += 1 ) {\r\n      p_x = this.waveform.getX( k );\r\n      p_y = this.waveform.getY( k );\r\n  \r\n      dist = Math.pow( this.getX( p_x ) - x, 2 ) + Math.pow( this.getY( p_y ) - y, 2 );\r\n  \r\n      if ( !oldDist || dist < oldDist ) {\r\n        oldDist = dist;\r\n        xyindex = k;\r\n      }\r\n    }\r\n  \r\n    return xyindex;\r\n  }\r\n  */\r\n  handleMouseMove(xValue, doMarker, yValue) {\r\n    var valX = xValue || this.getXAxis().getMouseVal(),\r\n      valY = yValue || this.getYAxis().getMouseVal();\r\n\r\n    var value = this.getClosestPointToXY(valX, valY);\r\n\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    var ratio, intY;\r\n\r\n    if (value.xMax == value.xMin) {\r\n      intY = value.yMin;\r\n    } else {\r\n      //ratio = ( valX - value.xMin ) / ( value.xMax - value.xMin );\r\n      //intY = ( ( 1 - ratio ) * value.yMin + ratio * value.yMax );\r\n    }\r\n\r\n    if (doMarker && this.options.trackMouse) {\r\n      if (value.xMin == undefined) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return {\r\n      xBefore: value.xMin,\r\n      xAfter: value.xMax,\r\n      yBefore: value.yMin,\r\n      yAfter: value.yMax,\r\n      trueX: value.xExact,\r\n      indexClosest: value.indexClosest,\r\n      interpolatedY: intY,\r\n\r\n      xClosest: value.xClosest,\r\n      yClosest: value.yClosest\r\n    };\r\n  }\r\n  /**\r\n   * Gets the maximum value of the y values between two x values. The x values must be monotoneously increasing\r\n   * @param {Number} startX - The start of the x values\r\n   * @param {Number} endX - The end of the x values\r\n   * @returns {Number} Maximal y value in between startX and endX\r\n   * @memberof SerieLine\r\n   */\r\n  getMax(start, end) {\r\n    var start2 = Math.min(start, end),\r\n      end2 = Math.max(start, end),\r\n      v1 = this.getClosestPointToXY(start2),\r\n      v2 = this.getClosestPointToXY(end2),\r\n      i,\r\n      j,\r\n      max = -Infinity,\r\n      initJ,\r\n      maxJ;\r\n\r\n    if (!v1) {\r\n      start2 = this.minX;\r\n      v1 = this.getClosestPointToXY(start2);\r\n    }\r\n\r\n    if (!v2) {\r\n      end2 = this.maxX;\r\n      v2 = this.getClosestPointToXY(end2);\r\n    }\r\n\r\n    if (!v1 || !v2) {\r\n      return -Infinity;\r\n    }\r\n\r\n    for (i = v1.dataIndex; i <= v2.dataIndex; i++) {\r\n      initJ = i == v1.dataIndex ? v1.xBeforeIndexArr : 0;\r\n      maxJ = i == v2.dataIndex ? v2.xBeforeIndexArr : this.data[i].length;\r\n\r\n      for (j = initJ; j <= maxJ; j += 2) {\r\n        max = Math.max(max, this.data[i][j + 1]);\r\n      }\r\n    }\r\n\r\n    return max;\r\n  }\r\n\r\n  /**\r\n   * Gets the minimum value of the y values between two x values. The x values must be monotoneously increasing\r\n   * @param {Number} startX - The start of the x values\r\n   * @param {Number} endX - The end of the x values\r\n   * @returns {Number} Maximal y value in between startX and endX\r\n   * @memberof SerieLine\r\n   */\r\n  getMin(start, end) {\r\n    var start2 = Math.min(start, end),\r\n      end2 = Math.max(start, end),\r\n      v1 = this.getClosestPointToXY(start2),\r\n      v2 = this.getClosestPointToXY(end2),\r\n      i,\r\n      j,\r\n      min = Infinity,\r\n      initJ,\r\n      maxJ;\r\n\r\n    if (!v1) {\r\n      start2 = this.minX;\r\n      v1 = this.getClosestPointToXY(start2);\r\n    }\r\n\r\n    if (!v2) {\r\n      end2 = this.maxX;\r\n      v2 = this.getClosestPointToXY(end2);\r\n    }\r\n\r\n    if (!v1 || !v2) {\r\n      return Infinity;\r\n    }\r\n\r\n    for (i = v1.dataIndex; i <= v2.dataIndex; i++) {\r\n      initJ = i == v1.dataIndex ? v1.xBeforeIndexArr : 0;\r\n      maxJ = i == v2.dataIndex ? v2.xBeforeIndexArr : this.data[i].length;\r\n\r\n      for (j = initJ; j <= maxJ; j += 2) {\r\n        min = Math.min(min, this.data[i][j + 1]);\r\n      }\r\n    }\r\n\r\n    return min;\r\n  }\r\n\r\n  /* LINE STYLE * @memberof SerieLine\r\n   */\r\n\r\n  setStyle(style, selectionType = 'unselected') {\r\n    this.styles[selectionType] = style;\r\n    this.styleHasChanged(selectionType);\r\n  }\r\n\r\n  setLineStyle(number, selectionType = 'unselected', applyToSelected) {\r\n    this.styles[selectionType] = this.styles[selectionType] || {};\r\n    this.styles[selectionType].lineStyle = number;\r\n\r\n    if (applyToSelected) {\r\n      this.setLineStyle(number, 'selected');\r\n    }\r\n\r\n    this.styleHasChanged(selectionType);\r\n\r\n    return this;\r\n  }\r\n\r\n  getLineStyle(selectionType) {\r\n    return this.getStyle(selectionType).lineStyle;\r\n  }\r\n\r\n  getLineDashArray(selectionType = this.selectionType || 'unselected') {\r\n    switch (this.getStyle(selectionType).lineStyle) {\r\n      case 2:\r\n        return '1, 1';\r\n        break;\r\n      case 3:\r\n        return '2, 2';\r\n        break;\r\n      case 4:\r\n        return '3, 3';\r\n        break;\r\n      case 5:\r\n        return '4, 4';\r\n        break;\r\n      case 6:\r\n        return '5, 5';\r\n        break;\r\n\r\n      case 7:\r\n        return '5 2';\r\n        break;\r\n      case 8:\r\n        return '2 5';\r\n        break;\r\n\r\n      case 9:\r\n        return '4 2 4 4';\r\n        break;\r\n      case 10:\r\n        return '1,3,1';\r\n        break;\r\n      case 11:\r\n        return '9 2';\r\n        break;\r\n      case 12:\r\n        return '2 9';\r\n        break;\r\n\r\n      case 1:\r\n      case false:\r\n        return false;\r\n        break;\r\n\r\n      default:\r\n        return this.styles[selectionType].lineStyle;\r\n        break;\r\n    }\r\n\r\n    this.styleHasChanged(selectionType);\r\n  }\r\n\r\n  getStyle(selectionType = this.selectionType || 'unselected') {\r\n    return this.styles[selectionType] || this.styles.unselected;\r\n  }\r\n\r\n  extendStyles() {\r\n    for (var i in this.styles) {\r\n      var s = this.styles[i];\r\n      if (s) {\r\n        this.styles[i] = util.extend(true, {}, this.styles.unselected, s);\r\n      }\r\n    }\r\n  }\r\n\r\n  extendStyle(styleTarget, styleOrigin) {\r\n    var s = this.styles[styleTarget];\r\n    this.styles[styleTarget] = util.extend(\r\n      true, {},\r\n      this.styles[styleOrigin || 'unselected'],\r\n      s || {}\r\n    );\r\n    this.styleHasChanged(styleTarget);\r\n  }\r\n\r\n  /** @memberof SerieLine\r\n   */\r\n\r\n  setLineWidth(width, selectionType, applyToSelected) {\r\n    selectionType = selectionType || 'unselected';\r\n    this.styles[selectionType] = this.styles[selectionType] || {};\r\n    this.styles[selectionType].lineWidth = width;\r\n\r\n    if (applyToSelected) {\r\n      this.setLineWidth(width, 'selected');\r\n    }\r\n\r\n    this.styleHasChanged(selectionType);\r\n\r\n    return this;\r\n  }\r\n\r\n  getLineWidth(selectionType) {\r\n    return this.getStyle(selectionType).lineWidth || 1;\r\n  }\r\n\r\n  /* LINE COLOR * @memberof SerieLine\r\n   */\r\n  setLineColor(color, selectionType, applyToSelected) {\r\n    selectionType = selectionType || 'unselected';\r\n    this.styles[selectionType] = this.styles[selectionType] || {};\r\n    this.styles[selectionType].lineColor = color;\r\n\r\n    if (applyToSelected) {\r\n      this.setLineColor(color, 'selected');\r\n    }\r\n\r\n    this.styleHasChanged(selectionType);\r\n\r\n    return this;\r\n  }\r\n\r\n  /* FILL COLOR * @memberof SerieLine\r\n   */\r\n  setFillColor(color, selectionType, applyToSelected) {\r\n    selectionType = selectionType || 'unselected';\r\n    this.styles[selectionType] = this.styles[selectionType] || {};\r\n    this.styles[selectionType].fillColor = color;\r\n\r\n    if (applyToSelected) {\r\n      this.setFillColor(color, 'selected');\r\n    }\r\n\r\n    this.styleHasChanged(selectionType);\r\n\r\n    return this;\r\n  }\r\n\r\n  getLineColor(selectionType) {\r\n    return this.getStyle(selectionType).lineColor || 'black';\r\n  }\r\n\r\n  getFillColor(selectionType) {\r\n    return this.getStyle(selectionType).fillColor || undefined;\r\n  }\r\n\r\n  /** @memberof SerieLine\r\n   */\r\n\r\n  isMonotoneous() {\r\n    if (this.waveform) {\r\n      return this.waveform.isMonotoneous();\r\n    }\r\n\r\n    return !!this.xmonotoneous;\r\n  }\r\n\r\n  findLocalMinMax(xRef, xWithin, type) {\r\n    if (!this.waveform) {\r\n      return false;\r\n    }\r\n\r\n    return this.waveform.findLocalMinMax(xRef, xWithin, type);\r\n  }\r\n\r\n  /**\r\n   * Performs a binary search to find the closest point index to an x value. For the binary search to work, it is important that the x values are monotoneous.\r\n   * If the serie is not monotoneously ascending, then a Euclidian search is made\r\n   * @param {Number} valX - The x value to search for\r\n   * @param {number} valY - The y value to search for. Optional. When omitted, only a search in x will be done\r\n   * @param {Number} withinPxX - The maximum distance in X\r\n   * @param {number} withinPxY - The maximum distance in Y\r\n   * @param {string} useAxis - ```x``` or ```y```. Use only the value of x or y to find the closest point\r\n   * @returns {Object} Index in the data array of the closest (x,y) pair to the pixel position passed in parameters\r\n   * @memberof SerieLine\r\n   */\r\n  getClosestPointToXY(valX = this.getXAxis().getMouseVal(), valY = this.getYAxis().getMouseVal(), withinPxX = 0, withinPxY = 0, useAxis = false, usePx = true) {\r\n    // For the scatter serie it's pretty simple. No interpolation. We look at the point directly\r\n\r\n    //const xVal = this.getXAxis().getVal( x );\r\n    //const yVal = this.getYAxis().getVal( y );\r\n    const xValAllowed = this.getXAxis().getRelVal(withinPxX);\r\n    const yValAllowed = this.getYAxis().getRelVal(withinPxY);\r\n\r\n    // Index of the closest point\r\n    const closestPointIndex = this.waveform.findWithShortestDistance({\r\n      x: valX,\r\n      y: valY,\r\n      xMaxDistance: xValAllowed,\r\n      yMaxDistance: yValAllowed,\r\n      axisRef: useAxis,\r\n      scaleX: !usePx ? 1 : 1 / this.getXAxis().getRelVal(1),\r\n      scaleY: !usePx ? 1 : 1 / this.getYAxis().getRelVal(1)\r\n    });\r\n\r\n    if (isNaN(closestPointIndex) || closestPointIndex === false) {\r\n      return false;\r\n    }\r\n    /*\r\n  \r\n        if (\r\n          ( Math.abs( valX - this.waveform.getX( closestPointIndex ) ) >\r\n            Math.abs( this.getXAxis().getRelVal( withinPxX ) ) &&\r\n            withinPxX ) ||\r\n          ( Math.abs( valY - this.waveform.getY( closestPointIndex ) ) >\r\n            Math.abs( this.getYAxis().getRelVal( withinPxY ) ) &&\r\n            withinPxY )\r\n        ) {\r\n          return false;\r\n        }\r\n    */\r\n\r\n    if (closestPointIndex < 0) {\r\n      return false;\r\n    }\r\n    const dataOutput = {\r\n\r\n      indexBefore: closestPointIndex,\r\n      indexAfter: closestPointIndex,\r\n\r\n      xExact: valX,\r\n\r\n      indexClosest: closestPointIndex,\r\n      interpolatedY: this.waveform.getY(closestPointIndex),\r\n\r\n      xClosest: this.waveform.getX(closestPointIndex),\r\n      yClosest: this.waveform.getY(closestPointIndex)\r\n    };\r\n\r\n    if (this.waveform.isMonotoneous()) {\r\n\r\n      let xBefore = this.waveform.getX(closestPointIndex);\r\n      let xAfter = this.waveform.getX(closestPointIndex);\r\n      let yBefore = this.waveform.getY(closestPointIndex);\r\n      let yAfter = this.waveform.getX(closestPointIndex);\r\n\r\n      if (xBefore < xAfter) {\r\n        dataOutput.xBefore = xBefore;\r\n        dataOutput.xAfter = xAfter;\r\n        dataOutput.yBefore = yBefore;\r\n        dataOutput.yAfter = yAfter;\r\n      } else {\r\n        dataOutput.xBefore = xAfter;\r\n        dataOutput.xAfter = xBefore;\r\n        dataOutput.yBefore = yAfter;\r\n        dataOutput.yAfter = yBefore;\r\n      }\r\n    }\r\n    return dataOutput;\r\n  }\r\n}\r\n\r\nutil.mix(SerieLine, ErrorBarMixin);\r\n\r\nexport default SerieLine;","var Serie3DMixin = {\r\n\r\n  /**\r\n   * Returns the x position of a certain value in pixels position, based on the serie's axis\r\n   * @memberof Serie\r\n   * @param {Number} val - Value to convert to pixels position\r\n   * @returns {Number} The x position in px corresponding to the x value\r\n   */\r\n  getX: function( val ) {\r\n    return ( ( val = this.getXAxis().getPx( val ) ) - val % 0.2 ) + this.getXAxis().getZProj( this.options.zpos );\r\n  },\r\n\r\n  /**\r\n   * Returns the y position of a certain value in pixels position, based on the serie's axis\r\n   * @memberof Serie3DMixin\r\n   * @param {Number} val - Value to convert to pixels position\r\n   * @returns {Number} The y position in px corresponding to the y value\r\n   */\r\n  getY: function( val ) {\r\n    return ( ( val = this.getYAxis().getPx( val ) ) - val % 0.2 ) + this.getYAxis().getZProj( this.options.zpos );\r\n  },\r\n\r\n  getZPos: function() {\r\n    return this.options.zpos;\r\n  },\r\n\r\n  /**\r\n   * @returns {Number} Lowest x value of the serie's data\r\n   * @memberof Serie\r\n   */\r\n  getMinX: function( useZValues ) {\r\n    if ( !useZValues ) {\r\n      return this.minX;\r\n    }\r\n\r\n    return getZCorrectedValue( this, true, true );\r\n  },\r\n\r\n  /**\r\n   * @returns {Number} Highest x value of the serie's data\r\n   * @memberof Serie\r\n   */\r\n  getMaxX: function( useZValues ) {\r\n\r\n    if ( !useZValues ) {\r\n      return this.maxX;\r\n    }\r\n    return getZCorrectedValue( this, true, false );\r\n  },\r\n\r\n  /**\r\n   * @returns {Number} Lowest y value of the serie's data\r\n   * @memberof Serie\r\n   */\r\n  getMinY: function( useZValues ) {\r\n\r\n    if ( !useZValues ) {\r\n      return this.minY;\r\n    }\r\n    return getZCorrectedValue( this, false, true );\r\n  },\r\n\r\n  /**\r\n   * @returns {Number} Highest y value of the serie's data\r\n   * @memberof Serie\r\n   */\r\n  getMaxY: function( useZValues ) {\r\n\r\n    if ( !useZValues ) {\r\n      return this.maxY;\r\n    }\r\n    return getZCorrectedValue( this, false, false );\r\n  }\r\n\r\n};\r\n\r\nfunction getZCorrectedValue( serie, x, min ) {\r\n\r\n  let i, l, data, val, valFinal;\r\n  let wf = serie.getWaveforms();\r\n\r\n  for ( let wave of wf ) {\r\n\r\n    i = 0;\r\n    l = wave.getLength();\r\n    data = wave.getData();\r\n\r\n    for ( ; i < l; i += 1 ) {\r\n\r\n      if ( x ) {\r\n        val = serie.getXAxis().getVal( serie.getX( wave.getX( i, true ) ) );\r\n      } else {\r\n        val = serie.getYAxis().getVal( serie.getY( data[ i ] ) );\r\n      }\r\n\r\n      if ( i == 0 ) {\r\n        valFinal = val;\r\n      } else {\r\n\r\n        if ( min ) {\r\n          valFinal = Math.min( valFinal, val );\r\n        } else {\r\n          valFinal = Math.max( valFinal, val );\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return valFinal;\r\n}\r\n\r\nexport default Serie3DMixin;","import Serie3DMixin from '../mixins/graph.mixin.serie3d.js';\r\nimport * as util from '../graph.util.js';\r\n\r\nimport Serie from './graph.serie.line.js';\r\n\r\n/**\r\n * Serie line with 3D projection\r\n * @example graph.newSerie( name, options, \"line\" );\r\n * @see Graph#newSerie\r\n * @extends SerieLine\r\n */\r\nclass SerieLine3D extends Serie {\r\n\r\n  static defaults() {\r\n    return {\r\n      zpos: 0\r\n    };\r\n  }\r\n  constructor( graph, name, options ) {\r\n    super( ...arguments );\r\n\r\n  }\r\n\r\n  /**\r\n   * Sets the z-position\r\n   * @memberof SerieLine3D\r\n   * @param {Number} zPos - The position in the z axis\r\n   */\r\n  setZPos( zPos ) {\r\n    this.options.zpos = zPos;\r\n    return this;\r\n  }\r\n\r\n  setz() {\r\n    return this.setZPos( ...arguments );\r\n  }\r\n}\r\n\r\nutil.mix( SerieLine3D, Serie3DMixin );\r\nexport default SerieLine3D;","import * as util from '../graph.util.js';\r\nimport ErrorBarMixin from '../mixins/graph.mixin.errorbars.js';\r\n\r\nimport Serie from './graph.serie.line.js';\r\n\r\n/**\r\n * Represents a bar serie.\r\n   Needs to be used exclusively with a bar axis ({@link AxisXBar}).\r\n   Supports error bars, line color, line width, fill color, fill opacity.\r\n * @example graph.newSerie(\"serieName\", { fillColor: 'red', fillOpacity: 0.2 }, \"bar\" );\r\n * @extends Serie\r\n */\r\nclass SerieBar extends Serie {\r\n\r\n  constructor( graph, name, options ) {\r\n\r\n    super( ...arguments );\r\n\r\n    this.pathDom = document.createElementNS( this.graph.ns, 'path' );\r\n    this.groupMain.appendChild( this.pathDom );\r\n\r\n    // Creates an empty style variable\r\n    this.styles = {};\r\n\r\n    // Unselected style\r\n    this.styles.unselected = {\r\n      lineColor: this.options.lineColor,\r\n      lineStyle: this.options.lineStyle,\r\n      lineWidth: this.options.lineWidth,\r\n      fillColor: this.options.fillColor,\r\n      fillOpacity: this.options.fillOpacity,\r\n      markers: this.options.markers\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   */\r\n  setFillColor( fillColor, selectionType, applyToSelected ) {\r\n\r\n    selectionType = selectionType || 'unselected';\r\n    this.styles[ selectionType ] = this.styles[ selectionType ] || {};\r\n    this.styles[ selectionType ].fillColor = fillColor;\r\n\r\n    if ( applyToSelected ) {\r\n      this.setFillColor( fillColor, 'selected' );\r\n    }\r\n\r\n    this.styleHasChanged( selectionType );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Returns the fill color\r\n   */\r\n  getFillColor( selectionType ) {\r\n    return this.getStyle( selectionType ).fillColor;\r\n  }\r\n\r\n  /*\r\n   * @memberof SerieBar\r\n   */\r\n  setFillOpacity( opacity, selectionType, applyToSelected ) {\r\n\r\n    selectionType = selectionType || 'unselected';\r\n    this.styles[ selectionType ] = this.styles[ selectionType ] || {};\r\n    this.styles[ selectionType ].fillOpacity = opacity;\r\n\r\n    if ( applyToSelected ) {\r\n      this.setLineWidth( opacity, 'selected' );\r\n    }\r\n\r\n    this.styleHasChanged( selectionType );\r\n\r\n    return this;\r\n  }\r\n\r\n  getFillOpacity( selectionType ) {\r\n\r\n    return this.getStyle( selectionType ).fillOpacity || 1;\r\n  }\r\n\r\n  /**\r\n   * Reapply the current style to the serie lines elements. Mostly used internally\r\n   */\r\n  applyLineStyles() {\r\n    this.applyLineStyle( this.pathDom );\r\n  }\r\n\r\n  /**\r\n   * Applies the current style to a line element. Mostly used internally\r\n   * @memberof SerieBar\r\n   */\r\n  applyLineStyle( line ) {\r\n\r\n    line.setAttribute( 'stroke', this.getLineColor() );\r\n    line.setAttribute( 'stroke-width', this.getLineWidth() );\r\n    if ( this.getLineDashArray() ) {\r\n      line.setAttribute( 'stroke-dasharray', this.getLineDashArray() );\r\n    } else {\r\n      line.removeAttribute( 'stroke-dasharray' );\r\n    }\r\n    line.setAttribute( 'fill', this.getFillColor() );\r\n    line.setAttribute( 'fill-opacity', this.getFillOpacity() || 1 );\r\n  }\r\n\r\n  draw() {\r\n\r\n    var path = '';\r\n    var categoryNumber,\r\n      position;\r\n\r\n    if ( this.hasErrors() ) {\r\n      this.errorDrawInit();\r\n    }\r\n\r\n    var j = 0;\r\n\r\n    for ( ; j < this.waveform.getLength(); j++ ) {\r\n\r\n      if ( !this.categoryIndices[ this.waveform.getX( j ) ] ) {\r\n        continue;\r\n      }\r\n\r\n      path += `M ${this.getXAxis().getPos( this.categoryIndices[this.waveform.getX( j )] )\r\n        } ${this.getYAxis().getPos( this.getYAxis().getCurrentMin() )\r\n        } V ${this.getYAxis().getPos( this.waveform.getY( j ) )\r\n        } h ${this.getXAxis().getDeltaPx( 1 / this.nbCategories )\r\n        } V ${this.getYAxis().getPos( this.getYAxis().getCurrentMin() )}`;\r\n\r\n      if ( this.hasErrors() ) {\r\n\r\n        var xpx = this.getXAxis().getPos( this.categoryIndices[ this.waveform.getX( j ) ] ) + this.getXAxis().getDeltaPx( 1 / this.nbCategories ) / 2;\r\n        var ypx = this.getYAxis().getPos( this.waveform.getY( j ) );\r\n\r\n        this.errorAddPoint( j, this.waveform.getX( j ), this.waveform.getY( j ), xpx, ypx );\r\n      }\r\n\r\n    }\r\n\r\n    if ( this.hasErrors() ) {\r\n      this.errorDraw();\r\n    }\r\n\r\n    this.pathDom.setAttribute( 'd', path );\r\n    this.applyLineStyles();\r\n  }\r\n\r\n  // Markers now allowed\r\n  setMarkers() {}\r\n\r\n  getUsedCategories() {\r\n    return this.waveform.xdata;\r\n  }\r\n\r\n}\r\n\r\nexport default SerieBar;","import {\r\n  extend,\r\n  guid,\r\n  throwError,\r\n  emptyDom\r\n}\r\nfrom '../graph.util.js';\r\n\r\nimport Serie from './graph.serie.js';\r\n\r\nconst defaultOptions = {\r\n  orientation: 'y',\r\n  maxBoxWidth: 20,\r\n\r\n  defaultStyle: {\r\n\r\n    meanLineColor: 'rgb( 100, 0, 0 )',\r\n    meanLineWidth: 2,\r\n\r\n    boxAboveLineWidth: 1,\r\n    boxAboveLineColor: 'rgb( 0, 0, 0 )',\r\n    boxAboveFillColor: 'transparent',\r\n    boxAboveFillOpacity: 1,\r\n    boxBelowLineWidth: 1,\r\n    boxBelowLineColor: 'rgb( 0, 0, 0 )',\r\n    boxBelowFillColor: 'transparent',\r\n    boxBelowFillOpacity: 1,\r\n\r\n    barAboveLineColor: 'rgba( 0, 0, 0, 1 )',\r\n    barAboveLineWidth: 1,\r\n    barBelowLineColor: 'rgba( 0, 0, 0, 1 )',\r\n    barBelowLineWidth: 1,\r\n\r\n    outlierLineWidth: 1,\r\n    outlierLineColor: 'rgb( 255, 255, 255 )',\r\n    outlierFillColor: 'rgb( 0, 0, 0 )',\r\n    outlierFillOpacity: 1\r\n  }\r\n};\r\n\r\n/**\r\n * @static\r\n * @extends Serie\r\n * @example graph.newSerie( name, options, \"scatter\" );\r\n * @see Graph#newSerie\r\n */\r\nclass SerieBox extends Serie {\r\n  constructor( graph, name, options, defaultInherited = {} ) {\r\n\r\n    super( graph, name, options, extend( true, {}, defaultOptions, defaultInherited ) );\r\n\r\n    this.pathDom = document.createElementNS( this.graph.ns, 'path' );\r\n    this.groupMain.appendChild( this.pathDom );\r\n\r\n    // Creates an empty style variable\r\n    this.styles = {};\r\n\r\n    // Unselected style\r\n    this.styles.unselected = this.options.defaultStyle;\r\n\r\n  }\r\n\r\n  /**\r\n   *  Sets the data of the bar serie\r\n   *  @param {Object} data\r\n   *  @example serie.setData( [ { x: 'cat', Q2: valMean, Q1: valBoxMin, Q3: valBoxMax, whiskers: [ val1, val2 ], outliers: [ ...yList ] } ] );\r\n   *  @return {SerieBar} The current serie instance\r\n   */\r\n  setData( data, noRescale ) {\r\n\r\n    this.data = data;\r\n\r\n    if ( !Array.isArray( data ) ) {\r\n      return;\r\n    }\r\n\r\n    let axisref, axisval, methodref, methodval, blnX;\r\n\r\n    if ( this.options.orientation == 'y' ) {\r\n      axisref = this.getXAxis();\r\n      axisval = this.getYAxis();\r\n      methodref = this._checkX.bind( this );\r\n      methodval = this._checkY.bind( this );\r\n      blnX = true;\r\n\r\n      this.minY = data[ 0 ].Q2;\r\n      this.maxY = data[ 0 ].Q2;\r\n      this.maxX = data[ 0 ].x;\r\n      this.minX = data[ 0 ].x;\r\n\r\n    } else {\r\n      axisref = this.getYAxis();\r\n      axisval = this.getXAxis();\r\n      methodref = this._checkY.bind( this );\r\n      methodval = this._checkX.bind( this );\r\n      blnX = false;\r\n\r\n      this.minX = data[ 0 ].Q2;\r\n      this.maxX = data[ 0 ].Q2;\r\n      this.maxY = data[ 0 ].y;\r\n      this.minY = data[ 0 ].y;\r\n\r\n    }\r\n\r\n    if ( noRescale ) {\r\n      methodref = function() {};\r\n      methodval = function() {};\r\n    }\r\n\r\n    if ( !axisref || !axisval ) {\r\n      throwError( 'Error in setting data of the box serie. The X and Y axes must be set beforehand' );\r\n    }\r\n\r\n    for ( var i in this.data ) {\r\n\r\n      if ( blnX ) {\r\n        methodref( this.data[ i ].x );\r\n        this.data[ i ].pos = this.data[ i ].x;\r\n      } else {\r\n        methodref( this.data[ i ].y );\r\n        this.data[ i ].pos = this.data[ i ].y;\r\n      }\r\n\r\n      if ( this.data[ i ].Q3 ) {\r\n        methodval( this.data[ i ].Q3 );\r\n      }\r\n\r\n      if ( this.data[ i ].Q1 ) {\r\n        methodval( this.data[ i ].Q1 );\r\n      }\r\n\r\n      if ( this.data[ i ].whiskers ) {\r\n\r\n        if ( Array.isArray( this.data[ i ].whiskers ) ) {\r\n\r\n          if ( this.data[ i ].whiskers.length > 0 ) {\r\n\r\n            methodval( this.data[ i ].whiskers[ 0 ] );\r\n          }\r\n\r\n          if ( this.data[ i ].whiskers.length > 1 ) {\r\n            methodval( this.data[ i ].whiskers[ 1 ] );\r\n          }\r\n\r\n        } else {\r\n          methodval( this.data[ i ].whiskers );\r\n          this.data[ i ].whiskers = [ this.data[ i ].whiskers ];\r\n        }\r\n\r\n      } else {\r\n        this.data[ i ].whiskers = [];\r\n      }\r\n\r\n      if ( Array.isArray( this.data[ i ].outliers ) ) {\r\n        this.data[ i ].outliers.map( ( val ) => methodval( val ) );\r\n      } else {\r\n        this.data[ i ].outliers = [];\r\n      }\r\n    }\r\n\r\n    this.dataHasChanged();\r\n    this.graph.updateDataMinMaxAxes();\r\n\r\n    return this;\r\n  }\r\n\r\n  _style( type, styleValue, selectionType = 'unselected', applyToSelected = false ) {\r\n    this.styles[ selectionType ] = this.styles[ selectionType ] || {};\r\n    this.styles[ selectionType ][ type ] = styleValue;\r\n\r\n    if ( applyToSelected ) {\r\n      this._set( type, styleValue, 'selected' );\r\n    }\r\n\r\n    this.styleHasChanged( selectionType );\r\n    return this;\r\n  }\r\n\r\n  _gstyle( type, selectionType ) {\r\n    return this.getStyle( selectionType )[ type ];\r\n  }\r\n\r\n  /**\r\n   *  Retrives a selection object\r\n   *  @param {String} [ selectionType = \"unselected\" ] - The selection type\r\n   *  @returns {Object} The selection object\r\n   */\r\n  getStyle( selectionType = 'unselected' ) {\r\n\r\n    return this.styles[ selectionType ] || {};\r\n  }\r\n\r\n  /**\r\n   *  Sets the mean line color\r\n   *  @param {String} color - The mean line color\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setMeanLineColor() {\r\n    return this._style( 'meanLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Returns the mean line color\r\n   * @return {String} The mean line color\r\n   */\r\n  getMeanLineColor() {\r\n    return this._gstyle( 'meanLineColor', ...arguments );\r\n  }\r\n\r\n  setStyle( style, selectionType = 'unselected' ) {\r\n    this.styles[ selectionType ] = extend( {}, this.default().defaultStyle, this.styles.unselected, style );\r\n    this.styleHasChanged( selectionType );\r\n  }\r\n\r\n  /**\r\n   *  Sets the mean line width\r\n   *  @param {Number} width - The line width\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setMeanLineWidth() {\r\n    return this._style( 'meanLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Returns the mean line width\r\n   * @return {Number} The mean line width\r\n   */\r\n  getMeanLineWidth() {\r\n    return this._gstyle( 'meanLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the box line color\r\n   *  @param {Number} color - The color of the box above the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBoxAboveLineColor() {\r\n    return this._style( 'boxAboveLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the box line color\r\n   * @return {String} The line color of the box above the median\r\n   */\r\n  getBoxAboveLineColor() {\r\n    return this._gstyle( 'boxAboveLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {Number} color - The color of the box below the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBoxBelowLineColor() {\r\n    return this._style( 'boxBelowLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Returns the fill color\r\n   * @return {String} The line color of the box below the median\r\n   */\r\n  getBoxBelowLineColor() {\r\n    return this._gstyle( 'boxBelowLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {Number} width - The contour width of the box above the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBoxAboveLineWidth() {\r\n    return this._style( 'boxAboveLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the line width of the box above the median\r\n   * @return {Number} The line width of the box above the median\r\n   */\r\n  getBoxAboveLineWidth() {\r\n    return this._gstyle( 'boxAboveLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {Number} width - The contour width of the box below the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBoxBelowLineWidth() {\r\n    return this._style( 'boxBelowLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the line width of the box below the median\r\n   * @return {Number} The line width of the box below the median\r\n   */\r\n  getBoxBelowLineWidth() {\r\n    return this._gstyle( 'boxBelowLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {String} color - The fill color of the box above the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBoxAboveFillColor() {\r\n    return this._style( 'boxAboveFillColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the fill color of the box above the median\r\n   * @return {String} The fill color of the box above the median\r\n   */\r\n  getBoxAboveFillColor() {\r\n    return this._gstyle( 'boxAboveFillColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {String} color - The fill color of the box below the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBoxBelowFillColor() {\r\n    return this._style( 'boxBelowFillColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the fill color of the box below the median\r\n   * @return {String} The fill color of the box below the median\r\n   */\r\n  getBoxBelowFillColor() {\r\n    return this._gstyle( 'boxBelowFillColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {Number} opacity - The fill opacity of the box above the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBoxAboveFillOpacity() {\r\n    return this._style( 'boxAboveFillOpacity', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the fill opacity of the box above the median\r\n   * @return {Number} The fill opacity of the box above the median\r\n   */\r\n  getBoxAboveFillOpacity() {\r\n    return this._gstyle( 'boxAboveFillOpacity', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {Number} opacity - The fill opacity of the box below the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBoxBelowFillOpacity() {\r\n    return this._style( 'boxBelowFillOpacity', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the fill opacity of the box below the median\r\n   * @return {Number} The fill opacity of the box below the median\r\n   */\r\n  getBoxBelowFillOpacity() {\r\n    return this._gstyle( 'boxBelowFillOpacity', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the whisker color\r\n   *  @param {String} color - The line color of the whisker above the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBarAboveLineColor() {\r\n    return this._style( 'barAboveLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the line color of the whisker above the median\r\n   * @return {String} The line color of the whisker above the median\r\n   */\r\n  getBarAboveLineColor() {\r\n    return this._gstyle( 'barAboveLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {String} color - The line color of the whisker below the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBarBelowLineColor() {\r\n    return this._style( 'barBelowLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the line color of the whisker below the median\r\n   * @return {String} The line color of the whisker below the median\r\n   */\r\n  getBarBelowLineColor() {\r\n    return this._gstyle( 'barBelowLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {Number} width - The line width of the whisker above the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBarAboveLineWidth() {\r\n    return this._style( 'barAboveLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the line width of the whisker above the median\r\n   * @return {Number} The line width of the whisker above the median\r\n   */\r\n  getBarAboveLineWidth() {\r\n    return this._gstyle( 'barAboveLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {Number} width - The line width of the whisker below the median\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setBarBelowLineWidth() {\r\n    return this._style( 'barBelowLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the line width of the whisker below the median\r\n   * @return {Number} The line width of the whisker below the median\r\n   */\r\n  getBarBelowLineWidth() {\r\n    return this._gstyle( 'barBelowLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {String} color - The outlier stroke color\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setOutlierLineColor() {\r\n    return this._style( 'outlierLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the line color of the outliers\r\n   * @return {String} The line color of the outliers\r\n   */\r\n  getOutlierLineColor() {\r\n    return this._gstyle( 'outlierLineColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the stroke width\r\n   *  @param {Number} width - The outlier stroke width\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setOutlierLineWidth() {\r\n    return this._style( 'outlierLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the line width of the outliers\r\n   * @return {Number} The line width of the outliers\r\n   */\r\n  getOutlierLineWidth() {\r\n    return this._gstyle( 'outlierLineWidth', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the fill color\r\n   *  @param {String} color - The outlier fill color\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setOutlierFillColor() {\r\n    return this._style( 'outlierFillColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the fill color of the outliers\r\n   * @return {String} The fill color of the outliers\r\n   */\r\n  getOutlierFillColor() {\r\n    return this._gstyle( 'outlierFillColor', ...arguments );\r\n  }\r\n\r\n  /**\r\n   *  Sets the outlier fill opacity\r\n   *  @param {Number} opacity - The outlier fill opacity\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  setOutlierFillOpacity() {\r\n    return this._style( 'outlierFillOpacity', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Returns the fill opacity of the outliers\r\n   * @return {Number} The fill opacity of the outliers\r\n   */\r\n  getOutlierFillOpacity() {\r\n    return this._gstyle( 'outlierFillOpacity', ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Reapply the current style to the serie lines elements. Mostly used internally\r\n   *  @returns {SerieBox} The current serie instance\r\n   */\r\n  applyLineStyles() {\r\n    this.applyLineStyle( this.pathDom );\r\n  }\r\n\r\n  /**\r\n   * Applies the current style to a line element. Mostly used internally\r\n   * @memberof SerieBar\r\n   */\r\n  applyLineStyle( line ) {\r\n\r\n    line.setAttribute( 'stroke', this.getLineColor() );\r\n    line.setAttribute( 'stroke-width', this.getLineWidth() );\r\n    line.removeAttribute( 'stroke-dasharray' );\r\n    line.setAttribute( 'fill', this.getFillColor() );\r\n    line.setAttribute( 'fill-opacity', this.getFillOpacity() || 1 );\r\n  }\r\n\r\n  draw() {\r\n\r\n    if ( !this.data ) {\r\n      return;\r\n    }\r\n\r\n    let position;\r\n    let axis = this.options.orientation == 'y' ? this.getYAxis() : this.getXAxis();\r\n    let axis2 = this.options.orientation == 'y' ? this.getXAxis() : this.getYAxis();\r\n    let boxOtherDimension; // width or height of the box\r\n    let useCategories = false;\r\n    let mean, boxAbove, boxBelow, barAbove, barBelow, outliers, posAbove, posBelow;\r\n    let categoryNumber;\r\n\r\n    emptyDom( this.groupMain );\r\n\r\n    if ( axis2.getType() == 'category' ) {\r\n\r\n      boxOtherDimension = axis2.getRelPx( 0.8 / ( this.nbCategories ) );\r\n      useCategories = true;\r\n\r\n    } else {\r\n      // Get all the spacing and determine the smallest one\r\n      boxOtherDimension = this.options.maxBoxWidth;\r\n      for ( var i = 0, l = this.data.length; i < l - 1; i++ ) {\r\n\r\n        boxOtherDimension = Math.max( 5, Math.min( boxOtherDimension, Math.abs( axis2.getPx( this.data[ i + 1 ].x ) - axis2.getPx( this.data[ i ].x ) ) ) );\r\n      }\r\n\r\n    }\r\n\r\n    for ( var i = 0, l = this.data.length; i < l; i++ ) {\r\n\r\n      if ( axis2.getType() == 'category' ) {\r\n\r\n        let cat = this.options.orientation == 'y' ? this.data[ i ].x : this.data[ i ].y;\r\n\r\n        if ( !this.categoryIndices.hasOwnProperty( cat ) ) {\r\n\r\n          if ( Array.isArray( this._linkedToScatterSeries ) ) {\r\n            for ( let scatter_serie of this._linkedToScatterSeries ) {\r\n\r\n              if ( scatter_serie.categoryIndices.hasOwnProperty( cat ) ) {\r\n\r\n                position = [ axis2.getPos( scatter_serie.categoryIndices[ cat ] ) + 1.2 * boxOtherDimension / 2 ];\r\n\r\n                if ( this.options.orientation == 'y' ) {\r\n                  axis = scatter_serie.getYAxis();\r\n                } else {\r\n                  axis = scatter_serie.getXAxis();\r\n                }\r\n\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n\r\n          position = [ axis2.getPos( this.categoryIndices[ cat ] ) + 1.2 * boxOtherDimension / 2 ];\r\n\r\n        }\r\n\r\n      } else {\r\n\r\n        position = [ axis2.getPos( this.options.orientation == 'y' ? this.data[ i ].x : this.data[ i ].y ), boxOtherDimension ];\r\n\r\n      }\r\n\r\n      mean = axis.getPos( this.data[ i ].Q2 );\r\n      boxAbove = axis.getPos( this.data[ i ].Q3 );\r\n      boxBelow = axis.getPos( this.data[ i ].Q1 );\r\n\r\n      this.data[ i ].whiskers.map( ( val ) => {\r\n\r\n        if ( val < this.data[ i ].Q1 ) {\r\n          barBelow = axis.getPos( val );\r\n        } else {\r\n          barAbove = axis.getPos( val );\r\n        }\r\n      } );\r\n\r\n      outliers = this.data[ i ].outliers.map( ( val ) => axis.getPos( val ) );\r\n\r\n      var lineMean = document.createElementNS( this.graph.ns, 'line' );\r\n\r\n      this.applyMeanStyle( lineMean );\r\n\r\n      var rectAbove = document.createElementNS( this.graph.ns, 'rect' );\r\n      var rectBelow = document.createElementNS( this.graph.ns, 'rect' );\r\n\r\n      if ( this.options.orientation == 'y' ) {\r\n\r\n        rectAbove.setAttribute( 'width', boxOtherDimension );\r\n        rectAbove.setAttribute( 'x', position[ 0 ] - boxOtherDimension / 2 );\r\n\r\n        rectBelow.setAttribute( 'width', boxOtherDimension );\r\n        rectBelow.setAttribute( 'x', position[ 0 ] - boxOtherDimension / 2 );\r\n\r\n        lineMean.setAttribute( 'x1', position[ 0 ] - boxOtherDimension / 2 );\r\n        lineMean.setAttribute( 'x2', position[ 0 ] + boxOtherDimension / 2 );\r\n        lineMean.setAttribute( 'y1', mean );\r\n        lineMean.setAttribute( 'y2', mean );\r\n\r\n      } else {\r\n\r\n        rectAbove.setAttribute( 'height', boxOtherDimension );\r\n        rectAbove.setAttribute( 'y', position[ 0 ] - boxOtherDimension / 2 );\r\n\r\n        rectBelow.setAttribute( 'height', boxOtherDimension );\r\n        rectBelow.setAttribute( 'y', position[ 0 ] - boxOtherDimension / 2 );\r\n\r\n        lineMean.setAttribute( 'y1', position[ 0 ] - boxOtherDimension / 2 );\r\n        lineMean.setAttribute( 'y2', position[ 0 ] + boxOtherDimension / 2 );\r\n        lineMean.setAttribute( 'x1', mean );\r\n        lineMean.setAttribute( 'x2', mean );\r\n      }\r\n\r\n      this.boxPos( rectAbove, mean, boxAbove, this.options.orientation == 'x' );\r\n      this.boxPos( rectBelow, mean, boxBelow, this.options.orientation == 'x' );\r\n\r\n      this.applyBoxStyle( rectAbove, rectBelow );\r\n\r\n      var whiskerAbove = document.createElementNS( this.graph.ns, 'line' );\r\n      var whiskerBelow = document.createElementNS( this.graph.ns, 'line' );\r\n\r\n      if ( this.options.orientation == 'y' ) {\r\n\r\n        if ( barAbove !== undefined ) {\r\n          whiskerAbove.setAttribute( 'y1', boxAbove );\r\n          whiskerAbove.setAttribute( 'y2', barAbove );\r\n          whiskerAbove.setAttribute( 'x1', position[ 0 ] );\r\n          whiskerAbove.setAttribute( 'x2', position[ 0 ] );\r\n        }\r\n\r\n        if ( barBelow !== undefined ) {\r\n          whiskerBelow.setAttribute( 'y1', boxBelow );\r\n          whiskerBelow.setAttribute( 'y2', barBelow );\r\n          whiskerBelow.setAttribute( 'x1', position[ 0 ] );\r\n          whiskerBelow.setAttribute( 'x2', position[ 0 ] );\r\n        }\r\n\r\n      } else {\r\n\r\n        if ( barAbove !== undefined ) {\r\n          whiskerAbove.setAttribute( 'x1', boxAbove );\r\n          whiskerAbove.setAttribute( 'x2', barAbove );\r\n          whiskerAbove.setAttribute( 'y1', position[ 0 ] );\r\n          whiskerAbove.setAttribute( 'y2', position[ 0 ] );\r\n        }\r\n\r\n        if ( barBelow !== undefined ) {\r\n          whiskerBelow.setAttribute( 'x1', boxBelow );\r\n          whiskerBelow.setAttribute( 'x2', barBelow );\r\n          whiskerBelow.setAttribute( 'y1', position[ 0 ] );\r\n          whiskerBelow.setAttribute( 'y2', position[ 0 ] );\r\n        }\r\n      }\r\n\r\n      outliers.map( ( outliervalue ) => {\r\n\r\n        let outlier = document.createElementNS( this.graph.ns, 'circle' );\r\n\r\n        outlier.setAttribute( 'r', 2 );\r\n\r\n        if ( this.options.orientation == 'y' ) {\r\n\r\n          outlier.setAttribute( 'cx', position[ 0 ] );\r\n          outlier.setAttribute( 'cy', outliervalue );\r\n\r\n        } else {\r\n\r\n          outlier.setAttribute( 'cy', position[ 0 ] );\r\n          outlier.setAttribute( 'cx', outliervalue );\r\n        }\r\n\r\n        this.setOutlierStyle( outlier );\r\n\r\n        this.groupMain.appendChild( outlier );\r\n      } );\r\n\r\n      if ( barAbove !== undefined ) {\r\n        this.groupMain.appendChild( whiskerAbove );\r\n      }\r\n\r\n      if ( barBelow !== undefined ) {\r\n        this.groupMain.appendChild( whiskerBelow );\r\n      }\r\n\r\n      if ( boxAbove !== undefined ) {\r\n        this.groupMain.appendChild( rectAbove );\r\n      }\r\n\r\n      if ( boxBelow !== undefined ) {\r\n        this.groupMain.appendChild( rectBelow );\r\n      }\r\n\r\n      this.groupMain.appendChild( lineMean );\r\n\r\n      this.applyWhiskerStyle( whiskerAbove, whiskerBelow );\r\n    }\r\n  }\r\n\r\n  applyBoxStyle( above, below ) {\r\n\r\n    above.setAttribute( 'stroke', this.getBoxAboveLineColor() );\r\n    above.setAttribute( 'stroke-width', this.getBoxAboveLineWidth() );\r\n\r\n    if ( this.getBoxAboveFillColor() !== undefined ) {\r\n      above.setAttribute( 'fill', this.getBoxAboveFillColor() );\r\n    }\r\n    if ( this.getBoxAboveFillOpacity() !== undefined ) {\r\n      above.setAttribute( 'fill-opacity', this.getBoxAboveFillOpacity() );\r\n    }\r\n\r\n    below.setAttribute( 'stroke', this.getBoxBelowLineColor() );\r\n    below.setAttribute( 'stroke-width', this.getBoxBelowLineWidth() );\r\n\r\n    if ( this.getBoxBelowFillColor() !== undefined ) {\r\n      below.setAttribute( 'fill', this.getBoxBelowFillColor() );\r\n    }\r\n    if ( this.getBoxAboveFillOpacity() !== undefined ) {\r\n      below.setAttribute( 'fill-opacity', this.getBoxBelowFillOpacity() );\r\n    }\r\n  }\r\n\r\n  applyWhiskerStyle( above, below ) {\r\n\r\n    above.setAttribute( 'stroke', this.getBarAboveLineColor() );\r\n    above.setAttribute( 'stroke-width', this.getBarAboveLineWidth() );\r\n\r\n    below.setAttribute( 'stroke', this.getBarBelowLineColor() );\r\n    below.setAttribute( 'stroke-width', this.getBarBelowLineWidth() );\r\n  }\r\n\r\n  applyMeanStyle( line ) {\r\n\r\n    line.setAttribute( 'stroke', this.getMeanLineColor() );\r\n    line.setAttribute( 'stroke-width', this.getMeanLineWidth() );\r\n  }\r\n\r\n  setOutlierStyle( outlier ) {\r\n\r\n    outlier.setAttribute( 'stroke', this.getOutlierLineColor() );\r\n    outlier.setAttribute( 'stroke-width', this.getOutlierLineWidth() );\r\n\r\n    if ( this.getBoxBelowFillColor() !== undefined ) {\r\n      outlier.setAttribute( 'fill', this.getOutlierFillColor() );\r\n    }\r\n    if ( this.getBoxAboveFillOpacity() !== undefined ) {\r\n      outlier.setAttribute( 'fill-opacity', this.getOutlierFillOpacity() );\r\n    }\r\n  }\r\n  /**\r\n   * Returns the index of a category based on its name\r\n   * @param {String} name - The name of the category\r\n   */\r\n  getCategoryIndex( name ) {\r\n\r\n    if ( !this.categories ) {\r\n      throw new Error( 'No categories were defined. Probably axis.setSeries was not called' );\r\n    }\r\n\r\n    for ( var i = 0; i < this.categories.length; i++ ) {\r\n\r\n      if ( this.categories[ i ].name == name ) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // Markers now allowed\r\n  setMarkers() {}\r\n\r\n  boxPos( box, mean, extremity, blnX ) {\r\n\r\n    if ( mean > extremity ) {\r\n\r\n      box.setAttribute( blnX ? 'x' : 'y', extremity );\r\n      box.setAttribute( blnX ? 'width' : 'height', mean - extremity );\r\n\r\n    } else {\r\n\r\n      box.setAttribute( blnX ? 'x' : 'y', mean );\r\n      box.setAttribute( blnX ? 'width' : 'height', extremity - mean );\r\n    }\r\n  }\r\n\r\n  getUsedCategories() {\r\n    let xymode = this.options.orientation == 'y' ? 'x' : 'y';\r\n\r\n    let categories = this.data.map( ( d ) => d[ xymode ] );\r\n\r\n    if ( Array.isArray( this._linkedToScatterSeries ) ) {\r\n      this._linkedToScatterSeries.map( ( scatter_serie ) => {\r\n\r\n        scatter_serie.getUsedCategories().map( ( scatter_serie_cat ) => {\r\n          let index;\r\n          if ( ( index = categories.indexOf( scatter_serie_cat ) ) > -1 ) {\r\n            categories.splice( index, 1 );\r\n          }\r\n\r\n        } );\r\n      } );\r\n\r\n    }\r\n\r\n    return categories;\r\n  }\r\n\r\n  linkToScatterSerie( ...series ) {\r\n    this._linkedToScatterSeries = series;\r\n  }\r\n}\r\n\r\nexport default SerieBox;","import * as util from '../graph.util.js';\r\nimport ErrorBarMixin from '../mixins/graph.mixin.errorbars.js';\r\n\r\nimport SerieLine from './graph.serie.line.js';\r\n\r\n/**\r\n * Colored serie line\r\n * @example graph.newSerie( name, options, \"color\" );\r\n * @see Graph#newSerie\r\n * @augments SerieLine\r\n */\r\nclass SerieLineColor extends SerieLine {\r\n\r\n  constructor(graph, name, options) {\r\n\r\n    super(...arguments);\r\n    this.lines = this.lines || {};\r\n  }\r\n\r\n  setColors(colors) {\r\n    this.colors = colors;\r\n  }\r\n\r\n  _draw() {\r\n\r\n    var self = this,\r\n      data = this._dataToUse,\r\n      toBreak,\r\n      waveform = this.getWaveform(),\r\n      x,\r\n      y,\r\n\r\n      lastX = false,\r\n      lastY = false,\r\n      xpx,\r\n      ypx,\r\n      xpx2,\r\n      ypx2,\r\n      xAxis = this.getXAxis(),\r\n      yAxis = this.getYAxis(),\r\n      xMin = xAxis.getCurrentMin(),\r\n      yMin = yAxis.getCurrentMin(),\r\n      xMax = xAxis.getCurrentMax(),\r\n      yMax = yAxis.getCurrentMax();\r\n\r\n    var incrXFlip = 0;\r\n    var incrYFlip = 1;\r\n\r\n    var pointOutside = false;\r\n    var lastPointOutside = false;\r\n\r\n    this.eraseLines();\r\n\r\n    if (this.isFlipped()) {\r\n      incrXFlip = 1;\r\n      incrYFlip = 0;\r\n    }\r\n\r\n    this.currentLine = '';\r\n\r\n    let { i, l } = this._getIterativeBounds(waveform, xMin, xMax);\r\n\r\n    for (; i < l; i += 1) {\r\n\r\n      x = this.waveform.getX(i);\r\n      y = this.waveform.getY(i);\r\n\r\n      if ((x < xMin && lastX < xMin) || (x > xMax && lastX > xMax) || (((y < yMin && lastY < yMin) || (y > yMax && lastY > yMax)) && !this.options.lineToZero)) {\r\n        lastX = x;\r\n        lastY = y;\r\n        lastPointOutside = true;\r\n        continue;\r\n      }\r\n      this.counter2 = i;\r\n\r\n      //if ( this.markersShown() ) {\r\n      //this.getMarkerCurrentFamily( this.counter2 );\r\n      //}\r\n\r\n      xpx2 = this.getX(x);\r\n      ypx2 = this.getY(y);\r\n\r\n      if (xpx2 == xpx && ypx2 == ypx) {\r\n        continue;\r\n      }\r\n\r\n\r\n      if (isNaN(xpx2) || isNaN(ypx2)) {\r\n        if (this.counter > 0) {\r\n\r\n          //      this._createLine();\r\n        }\r\n        continue;\r\n      }\r\n\r\n      var color = this.colors[i];\r\n\r\n      let pointOutside = this.isPointOutside(x, y, xMin, xMax, yMin, yMax);\r\n\r\n      if (this.options.lineToZero) {\r\n        pointOutside = x < xMin || x > xMax;\r\n\r\n        if (pointOutside) {\r\n          continue;\r\n        }\r\n      } else {\r\n        if (pointOutside || lastPointOutside) {\r\n          if ((lastX === false || lastY === false) && !lastPointOutside) {\r\n            xpx = xpx2;\r\n            ypx = ypx2;\r\n            lastX = x;\r\n            lastY = y;\r\n          } else {\r\n            let pointOnAxis = this.calculateAxisCrossing(x, y, lastX, lastY, xMin, xMax, yMin, yMax);\r\n\r\n            if (pointOnAxis.length > 0) {\r\n              if (!pointOutside) {\r\n                // We were outside and now go inside\r\n                //      this._createLine();\r\n\r\n                this._addPoint(\r\n                  this.getX(pointOnAxis[0][0]),\r\n                  this.getY(pointOnAxis[0][1]),\r\n                  pointOnAxis[0][0],\r\n                  pointOnAxis[0][1],\r\n                  xpx2, ypx2, lastX, lastY, i - 1, color,\r\n                  false,\r\n                  false,\r\n                  false\r\n                );\r\n                //this._addPoint(xpx2, ypx2, lastX, lastY, false, false, true);\r\n              } else if (!lastPointOutside) {\r\n\r\n                // We were inside and now go outside\r\n                this._addPoint(\r\n                  this.getX(pointOnAxis[0][0]),\r\n                  this.getY(pointOnAxis[0][1]),\r\n                  pointOnAxis[0][0],\r\n                  pointOnAxis[0][1],\r\n                  xpx, ypx, lastX, lastY, i - 1, color,\r\n                  false,\r\n                  false,\r\n                  false\r\n                );\r\n              } else {\r\n                // No crossing: do nothing\r\n                if (pointOnAxis.length == 2) {\r\n                  //    this._createLine();\r\n\r\n                  this._addPoint(\r\n                    this.getX(pointOnAxis[0][0]),\r\n                    this.getY(pointOnAxis[0][1]),\r\n                    pointOnAxis[0][0],\r\n                    pointOnAxis[0][1],\r\n                    this.getX(pointOnAxis[1][0]),\r\n                    this.getY(pointOnAxis[1][1]),\r\n                    pointOnAxis[1][0], pointOnAxis[1][1], i - 1, color,\r\n                    false,\r\n                    false,\r\n                    false\r\n                  );\r\n                }\r\n              }\r\n            } else if (!pointOutside) {\r\n              // this._addPoint(xpx2, ypx2, lastX, lastY, i, false, false);\r\n            }\r\n          }\r\n\r\n          xpx = xpx2;\r\n          ypx = ypx2;\r\n          lastX = x;\r\n          lastY = y;\r\n\r\n          lastPointOutside = pointOutside;\r\n\r\n          continue;\r\n        }\r\n      }\r\n\r\n      this._addPoint(xpx2, ypx2, x, y, xpx, ypx, lastX, lastY, i, color, false, true);\r\n\r\n      xpx = xpx2;\r\n      ypx = ypx2;\r\n\r\n      lastX = x;\r\n      lastY = y;\r\n    }\r\n    this.latchLines();\r\n\r\n    if (this._tracker) {\r\n\r\n      if (this._trackerDom) {\r\n        this._trackerDom.remove();\r\n      }\r\n\r\n      var cloned = this.groupLines.cloneNode(true);\r\n      this.groupMain.appendChild(cloned);\r\n\r\n      for (i = 0, l = cloned.children.length; i < l; i++) {\r\n\r\n        cloned.children[i].setAttribute('stroke', 'transparent');\r\n        cloned.children[i].setAttribute('stroke-width', '25px');\r\n        cloned.children[i].setAttribute('pointer-events', 'stroke');\r\n      }\r\n\r\n      self._trackerDom = cloned;\r\n\r\n      self.groupMain.addEventListener('mousemove', function (e) {\r\n        var coords = self.graph._getXY(e),\r\n          ret = self.handleMouseMove(false, false);\r\n        self._trackingCallback(self, ret, coords.x, coords.y);\r\n      });\r\n\r\n      self.groupMain.addEventListener('mouseleave', function (e) {\r\n        self._trackingOutCallback(self);\r\n      });\r\n    }\r\n    return this;\r\n\r\n  }\r\n\r\n  _addPoint(xpx, ypx, x, y, xpxbefore, ypxbefore, xbefore, ybefore, j, color, move, allowMarker) {\r\n\r\n    if (xpxbefore === undefined || ypxbefore === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (isNaN(xpx) || isNaN(ypx)) {\r\n      return;\r\n    }\r\n\r\n    if (color._rgb) {\r\n      color = `rgba(${color._rgb[0]},${color._rgb[1]},${color._rgb[2]},${color._rgb[3] || 1})`;\r\n    }\r\n\r\n    var line = this.lines[color];\r\n    if (!line) {\r\n      line = this.lines[color] = {\r\n        object: document.createElementNS(this.graph.ns, 'path'),\r\n        path: '',\r\n        color: color\r\n      };\r\n      line.object.setAttribute('stroke', color);\r\n      line.color = color;\r\n\r\n      this.applyLineStyle(line.object);\r\n\r\n      //      this.applyLineStyle( line );\r\n      this.groupLines.appendChild(line.object);\r\n    }\r\n\r\n    line.path += `M ${xpxbefore} ${ypxbefore} L ${xpx} ${ypx}`;\r\n\r\n    if (this.hasErrors()) {\r\n      this.errorAddPoint(j, x, y, xpx, ypx);\r\n    }\r\n\r\n    /*if ( this.markersShown() && allowMarker !== false ) {\r\n      drawMarkerXY( this, this.markerFamilies[ this.selectionType ][ this.markerCurrentFamily ], xpx, ypx );\r\n    }*/\r\n  }\r\n\r\n  removeExtraLines() {\r\n\r\n  }\r\n\r\n  // Returns the DOM\r\n  latchLines() {\r\n\r\n    for (var i in this.lines) {\r\n      this.lines[i].object.setAttribute('d', this.lines[i].path);\r\n    }\r\n  }\r\n\r\n  // Returns the DOM\r\n  eraseLines() {\r\n\r\n    for (var i in this.lines) {\r\n      this.lines[i].path = '';\r\n      this.lines[i].object.setAttribute('d', '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies the current style to a line element. Mostly used internally\r\n   * @memberof SerieLine\r\n   */\r\n  applyLineStyle(line) {\r\n\r\n    //line.setAttribute( 'stroke', this.getLineColor() );\r\n    line.setAttribute('stroke-width', this.getLineWidth());\r\n    if (this.getLineDashArray()) {\r\n      line.setAttribute('stroke-dasharray', this.getLineDashArray());\r\n    } else {\r\n      line.removeAttribute('stroke-dasharray');\r\n    }\r\n    line.setAttribute('fill', 'none');\r\n    //\tline.setAttribute('shape-rendering', 'optimizeSpeed');\r\n  }\r\n}\r\n\r\nexport default SerieLineColor;","import {\r\n  Waveform\r\n} from '../util/waveform.js';\r\nimport {\r\n  extend,\r\n  guid\r\n} from '../graph.util.js';\r\n\r\nimport Serie from './graph.serie.js';\r\n\r\n/**\r\n * @static\r\n * @extends Serie\r\n * @example graph.newSerie( name, options, \"scatter\" );\r\n * @see Graph#newSerie\r\n */\r\nclass SerieZone extends Serie {\r\n  static\r\n  default () {\r\n    return {\r\n      fillColor: 'rgba( 0, 0, 0, 0.1 )',\r\n      lineColor: 'rgba( 0, 0, 0, 1 )',\r\n      lineWidth: '1px'\r\n    };\r\n  }\r\n  constructor( graph, name, options ) {\r\n    super( ...arguments );\r\n\r\n    this.selectionType = 'unselected';\r\n    this.id = guid();\r\n\r\n    this.groupZones = document.createElementNS( this.graph.ns, 'g' );\r\n    this.lineZone = document.createElementNS( this.graph.ns, 'path' );\r\n    this.lineZone.setAttribute( 'stroke', 'black' );\r\n    this.lineZone.setAttribute( 'stroke-width', '1px' );\r\n\r\n    this.groupMain.appendChild( this.groupZones );\r\n    this.groupZones.appendChild( this.lineZone );\r\n\r\n    this.applyLineStyle( this.lineZone );\r\n    this.styleHasChanged();\r\n\r\n    this.clip = document.createElementNS( this.graph.ns, 'clipPath' );\r\n    this.clipId = guid();\r\n    this.clip.setAttribute( 'id', this.clipId );\r\n\r\n    this.graph.defs.appendChild( this.clip );\r\n  }\r\n\r\n  /**\r\n   * Assigns a collection of waveforms that make up the zone\r\n   * The waveforms will appended one after the other, without break\r\n   * @param {...Waveform} waveforms - The collection of waveforms\r\n   * @return {SerieZone} - The current serie zone instance\r\n   * @memberof SerieZone\r\n   */\r\n  setWaveform( ...waveforms ) {\r\n    this.waveforms = waveforms;\r\n\r\n    this.waveforms = this.waveforms.map( ( wave ) => {\r\n      if ( !( wave instanceof Waveform ) ) {\r\n        return new Waveform( wave );\r\n      } else {\r\n        return wave;\r\n      }\r\n    } );\r\n\r\n    this.minX = this.waveforms[ 0 ].getXMin();\r\n    this.maxX = this.waveforms[ 0 ].getXMax();\r\n    this.minY = this.waveforms[ 0 ].getMin();\r\n    this.maxY = this.waveforms[ 0 ].getMax();\r\n\r\n    this.waveforms.map( ( wave ) => {\r\n      this.minX = Math.min( wave.getXMin(), this.minX );\r\n      this.maxX = Math.max( wave.getXMin(), this.maxX );\r\n      this.minY = Math.min( wave.getMin(), this.minY );\r\n      this.maxY = Math.max( wave.getMax(), this.maxY );\r\n    } );\r\n\r\n    this.graph.updateDataMinMaxAxes();\r\n    this.dataHasChanged();\r\n    return this;\r\n  }\r\n\r\n  setWaveforms() {\r\n    return this.setWaveform( ...arguments );\r\n  }\r\n\r\n  getWaveforms() {\r\n    return this.waveforms;\r\n  }\r\n\r\n  setMinMaxWaveforms( min, max ) {\r\n    this.waveforms = [ min, max.reverse() ];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all the dom concerning this serie from the drawing zone\r\n   */\r\n  empty() {\r\n    while ( this.group.firstChild ) {\r\n      this.group.removeChild( this.group.firstChild );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Redraws the serie\r\n   * @private\r\n   *\r\n   * @param {force} Boolean - Forces redraw even if the data hasn't changed\r\n   */\r\n  draw( force ) {\r\n    // Serie redrawing\r\n\r\n    if ( force || this.hasDataChanged() ) {\r\n      if ( !this.waveforms ) {\r\n        return;\r\n      }\r\n\r\n      let dataX = 0,\r\n        dataY = 0,\r\n        xpx = 0,\r\n        ypx = 0,\r\n        j = 0,\r\n        line = '',\r\n        buffer,\r\n        move = false;\r\n\r\n      const xminpx = this.getXAxis().getMinPx(),\r\n        xmaxpx = this.getXAxis().getMaxPx(),\r\n        yminpx = this.getYAxis().getMinPx(),\r\n        ymaxpx = this.getYAxis().getMaxPx();\r\n\r\n      const xmin = this.getXAxis().getCurrentMin(),\r\n        xmax = this.getXAxis().getCurrentMax(),\r\n        ymin = this.getYAxis().getCurrentMin(),\r\n        ymax = this.getYAxis().getCurrentMax();\r\n\r\n      //this.clipRect.setAttribute( \"x\", Math.min( xmin, xmax ) );\r\n      //this.clipRect.setAttribute( \"y\", Math.min( ymin, ymax ) );\r\n      //this.clipRect.setAttribute( \"width\", Math.abs( xmax - xmin ) );\r\n      //this.clipRect.setAttribute( \"height\", Math.abs( ymax - ymin ) );\r\n\r\n      this.groupMain.removeChild( this.groupZones );\r\n\r\n      for ( let waveform of this.waveforms ) {\r\n        for ( j = 0; j < waveform.getLength(); j += 1 ) {\r\n          dataX = waveform.getX( j, true );\r\n          dataY = waveform.getY( j, true );\r\n\r\n          // The y axis in screen coordinate is inverted vs cartesians\r\n          if ( dataY[ j ] < ymin ) {\r\n            ypx = this.getY( ymin );\r\n          } else if ( dataY[ j ] > ymax ) {\r\n            ypx = this.getY( ymax );\r\n          }\r\n\r\n          if ( dataX !== dataX ) {\r\n            continue;\r\n          }\r\n\r\n          if ( dataY !== dataY ) {\r\n            // Let's make a new line\r\n\r\n            if ( line.length == 0 ) {\r\n              continue;\r\n            }\r\n\r\n            line += `L ${xpx}, ${this.getY( waveform.getMinY() )}`;\r\n            move = true;\r\n            continue;\r\n          }\r\n\r\n          ypx = this.getY( dataY );\r\n          xpx = this.getX( dataX );\r\n\r\n          if ( dataX < xmin || dataX > xmax ) {\r\n            buffer = [ dataX, dataY[ j ], xpx, ypx ];\r\n            continue;\r\n          }\r\n\r\n          if ( move ) {\r\n            line += ` M ${xpx}, ${this.getY( waveform.getMinY() )} `;\r\n            move = false;\r\n          }\r\n\r\n          if ( line.length > 0 ) {\r\n            line += ' L ';\r\n          }\r\n\r\n          if ( buffer ) {\r\n            line += `${buffer[2]},${buffer[3]} `;\r\n            buffer = false;\r\n          } else {\r\n            line += `${xpx},${ypx} `;\r\n          }\r\n        }\r\n      }\r\n\r\n      if ( line !== '' ) {\r\n        this.lineZone.setAttribute( 'd', `M ${line} z` );\r\n      } else {\r\n        this.lineZone.setAttribute( 'd', '' );\r\n      }\r\n      this.groupMain.appendChild( this.groupZones );\r\n    }\r\n\r\n    if ( this.hasStyleChanged( this.selectionType ) ) {\r\n      this.applyLineStyle( this.lineZone );\r\n      this.styleHasChanged( false );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies the computed style to the DOM element fed as a parameter\r\n   * @private\r\n   *\r\n   * @param {SVGLineElement} line - The line to which the style has to be applied to\r\n   */\r\n  applyLineStyle( line ) {\r\n    line.setAttribute( 'stroke', this.getLineColor() );\r\n    line.setAttribute( 'stroke-width', this.getLineWidth() );\r\n    line.setAttribute( 'fill', this.getFillColor() );\r\n    line.setAttribute( 'fill-opacity', this.getFillOpacity() );\r\n    line.setAttribute( 'stroke-opacity', this.getLineOpacity() );\r\n  }\r\n\r\n  /**\r\n   * Sets the line width\r\n   *\r\n   * @param {Number} width - The line width\r\n   * @returns {SerieZone} - The current serie\r\n   */\r\n  setLineWidth( width ) {\r\n    this.options.lineWidth = width;\r\n    this.styleHasChanged();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the line width\r\n   *\r\n   * @returns {Number} - The line width\r\n   */\r\n  getLineWidth() {\r\n    return this.options.lineWidth;\r\n  }\r\n\r\n  /**\r\n   * Sets the line opacity\r\n   *\r\n   * @param {Number} opacity - The line opacity\r\n   * @returns {SerieZone} - The current serie\r\n   */\r\n  setLineOpacity( opacity ) {\r\n    this.options.lineOpacity = opacity;\r\n    this.styleHasChanged();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the line opacity\r\n   *\r\n   * @returns {Number} - The line opacity\r\n   */\r\n  getLineOpacity() {\r\n    return this.options.lineOpacity;\r\n  }\r\n\r\n  /**\r\n   * Sets the line color\r\n   *\r\n   * @param {String} color - The line color\r\n   * @returns {SerieZone} - The current serie\r\n   */\r\n  setLineColor( color ) {\r\n    this.options.lineColor = color;\r\n    this.styleHasChanged();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the line width\r\n   *\r\n   * @returns {Number} - The line width\r\n   */\r\n  getLineColor() {\r\n    return this.options.lineColor;\r\n  }\r\n\r\n  /**\r\n   * Sets the fill opacity\r\n   *\r\n   * @param {Number} opacity - The fill opacity\r\n   * @returns {SerieZone} - The current serie\r\n   */\r\n  setFillOpacity( opacity ) {\r\n    this.options.fillOpacity = opacity;\r\n    this.styleHasChanged();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the fill opacity\r\n   *\r\n   * @returns {Number} - The fill opacity\r\n   */\r\n  getFillOpacity() {\r\n    return this.options.fillOpacity;\r\n  }\r\n\r\n  /**\r\n   * Sets the fill color\r\n   *\r\n   * @param {Number} width - The line width\r\n   * @returns {Number} - The line width\r\n   */\r\n  setFillColor( color ) {\r\n    this.options.fillColor = color;\r\n    this.styleHasChanged();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the fill color\r\n   *\r\n   * @returns {Number} - The fill color\r\n   */\r\n  getFillColor() {\r\n    return this.options.fillColor;\r\n  }\r\n}\r\n\r\nexport default SerieZone;","// import Graph from '../graph.core.js';\r\n// import { Waveform } from '../util/waveform.js';\r\nimport Serie3DMixin from '../mixins/graph.mixin.serie3d.js';\r\nimport * as util from '../graph.util.js';\r\n\r\nimport Serie from './graph.serie.zone.js';\r\n\r\n/**\r\n * Serie line with 3D projection\r\n * @example graph.newSerie( name, options, \"line\" );\r\n * @see Graph#newSerie\r\n * @extends SerieLine\r\n */\r\nclass SerieZone3D extends Serie {\r\n  static\r\n  default () {\r\n    return {\r\n      zpos: 0\r\n    };\r\n  }\r\n  constructor( graph, name, options ) {\r\n    super( ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Sets the z-position\r\n   * @memberof SerieZone3D\r\n   * @param {Number} zPos - The position in the z axis\r\n   */\r\n  setZPos( zPos ) {\r\n    this.options.zpos = zPos;\r\n    return this;\r\n  }\r\n\r\n  setz() {\r\n    return this.setZPos( ...arguments );\r\n  }\r\n}\r\n\r\nutil.mix( SerieZone3D, Serie3DMixin );\r\nexport default SerieZone3D;","import * as util from '../graph.util.js';\r\n\r\nimport Serie from './graph.serie.js';\r\n\r\n/**\r\n * Density map serie\r\n * @example graph.newSerie( name, options, \"densitymap\" );\r\n * @see Graph#newSerie\r\n * @augments Serie\r\n */\r\nclass SerieDensityMap extends Serie {\r\n\r\n  constructor( graph, name, options ) {\r\n\r\n    super( ...arguments );\r\n    util.mapEventEmission( this.options, this ); // Register events\r\n\r\n    this.rects = [];\r\n    this.paths = [];\r\n\r\n    this.recalculateBinsOnDraw = false;\r\n  }\r\n  /**\r\n   * Sets the data of the serie. Careful, only one format allowed for now.\r\n   * @memberof SerieDensityMap\r\n   * @param {Array} data - A vector containing 2-elements arrays\r\n   * @return {SerieDensityMap} The current instance\r\n   * @example serie.setData( [ [ x1, y1 ], [ x2, y2 ], ..., [ xn, yn ] ] );\r\n   */\r\n  setData( data ) {\r\n\r\n    this.minX = this.maxX = this.minY = this.maxY = 0;\r\n    var i = 0,\r\n      l = data.length;\r\n    this.data = data;\r\n\r\n    this.minX = Number.POSITIVE_INFINITY;\r\n    this.minY = Number.POSITIVE_INFINITY;\r\n    this.maxX = Number.NEGATIVE_INFINITY;\r\n    this.maxY = Number.NEGATIVE_INFINITY;\r\n\r\n    for ( i = 0; i < l; i++ ) {\r\n      this._checkX( data[ i ][ 0 ] );\r\n      this._checkY( data[ i ][ 1 ] );\r\n    }\r\n\r\n    this.dataHasChanged();\r\n    this.graph.updateDataMinMaxAxes();\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * Calculates the bins from the (x,y) dataset\r\n   * @memberof SerieDensityMap\r\n   * @param {Number} fromX - The first x element to consider\r\n   * @param {Number} deltaX - The x spacing between two bins\r\n   * @param {Number} numX - The number of x bins\r\n   * @param {Number} fromY - The first y element to consider\r\n   * @param {Number} deltaY - The y spacing between two bins\r\n   * @param {Number} numY - The number of y bins\r\n   * @return {Array} The generated density map\r\n   * @see SerieDensityMap#autoBins\r\n   * @see SerieDensityMap#autoColorMapBinBoundaries\r\n   * @see SerieDensityMap#setPxPerBin\r\n   */\r\n  calculateDensity( fromX, deltaX, numX, fromY, deltaY, numY ) {\r\n\r\n    var densitymap = [],\r\n      i,\r\n      l = this.data.length,\r\n      indexX, indexY;\r\n\r\n    var binMin = Number.POSITIVE_INFINITY;\r\n    var binMax = Number.NEGATIVE_INFINITY;\r\n\r\n    for ( i = 0; i < l; i++ ) {\r\n      indexX = ~~( ( this.data[ i ][ 0 ] - fromX ) / deltaX );\r\n      indexY = ~~( ( this.data[ i ][ 1 ] - fromY ) / deltaY );\r\n\r\n      if ( indexX > numX || indexY > numY || indexX < 0 || indexY < 0 ) {\r\n        continue;\r\n      }\r\n\r\n      densitymap[ indexX ] = densitymap[ indexX ] || [];\r\n      densitymap[ indexX ][ indexY ] = densitymap[ indexX ][ indexY ] + 1 || 1;\r\n\r\n      binMin = densitymap[ indexX ][ indexY ] < binMin ? densitymap[ indexX ][ indexY ] : binMin;\r\n      binMax = densitymap[ indexX ][ indexY ] > binMax ? densitymap[ indexX ][ indexY ] : binMax;\r\n      //binMax = Math.max( binMax, densitymap[ indexX ][ indexY ] );\r\n    }\r\n\r\n    this.maxIndexX = numX;\r\n    this.maxIndexY = numY;\r\n\r\n    this.binMin = binMin;\r\n    this.binMax = binMax;\r\n\r\n    this.deltaX = deltaX;\r\n    this.deltaY = deltaY;\r\n\r\n    this.fromX = fromX;\r\n    this.fromY = fromY;\r\n\r\n    this.numX = numX;\r\n    this.numY = numY;\r\n\r\n    this.densitymap = densitymap;\r\n    return densitymap;\r\n  }\r\n\r\n  /**\r\n   * Sets the density map from a precalculated data set\r\n   * @memberof SerieDensityMap\r\n   * @param {Array} densitymap - A 2D-array containing the map\r\n   * @param {Number} fromX - The first x element to consider\r\n   * @param {Number} deltaX - The x spacing between two bins\r\n   * @param {Number} fromY - The first y element to consider\r\n   * @param {Number} deltaY - The y spacing between two bins\r\n   * @return {Array} The generated density map\r\n   * @see SerieDensityMap#autoBins\r\n   * @see SerieDensityMap#autoColorMapBinBoundaries\r\n   * @see SerieDensityMap#setPxPerBin\r\n   */\r\n  setDensityMap( densitymap, fromX, deltaX, fromY, deltaY ) {\r\n\r\n    var i,\r\n      j,\r\n      indexX, indexY;\r\n\r\n    var binMin = Number.POSITIVE_INFINITY;\r\n    var binMax = Number.NEGATIVE_INFINITY;\r\n\r\n    for ( i = 0; i < densitymap.length; i++ ) {\r\n\r\n      for ( j = 0; j < densitymap[ i ].length; j++ ) {\r\n        binMin = densitymap[ i ][ j ] < binMin ? densitymap[ i ][ j ] : binMin;\r\n        binMax = densitymap[ i ][ j ] > binMax ? densitymap[ i ][ j ] : binMax;\r\n      }\r\n      //binMax = Math.max( binMax, densitymap[ indexX ][ indexY ] );\r\n    }\r\n\r\n    this.maxIndexX = densitymap.length;\r\n    this.maxIndexY = densitymap[ 0 ].length;\r\n    this.binMin = binMin;\r\n    this.binMax = binMax;\r\n\r\n    this.deltaX = deltaX;\r\n    this.deltaY = deltaY;\r\n\r\n    this.fromX = fromX;\r\n    this.fromY = fromY;\r\n\r\n    this.numX = this.maxIndexX;\r\n    this.numY = this.maxIndexY;\r\n\r\n    this.densitymap = densitymap;\r\n    return densitymap;\r\n  }\r\n\r\n  /**\r\n   * Calculates the bins from the (x,y) dataset using bin weighing\r\n   * Will assign a set of (x,y) to the 4 neighbouring bins according to its exact position\r\n   * @memberof SerieDensityMap\r\n   * @param {Number} fromX - The first x element to consider\r\n   * @param {Number} deltaX - The x spacing between two bins\r\n   * @param {Number} numX - The number of x bins\r\n   * @param {Number} fromY - The first y element to consider\r\n   * @param {Number} deltaY - The y spacing between two bins\r\n   * @param {Number} numY - The number of y bins\r\n   * @return {Array} The generated density map\r\n   * @see SerieDensityMap#autoBins\r\n   * @see SerieDensityMap#autoColorMapBinBoundaries\r\n   * @see SerieDensityMap#setPxPerBin\r\n   */\r\n  calculateDensityWeighted( fromX, deltaX, numX, fromY, deltaY, numY ) {\r\n\r\n    var densitymap = [],\r\n      i,\r\n      l = this.data.length,\r\n      indexX, indexY;\r\n\r\n    var binMin = Number.POSITIVE_INFINITY;\r\n    var binMax = Number.NEGATIVE_INFINITY;\r\n\r\n    var compX, compY;\r\n    var exactX, exactY;\r\n    var indexXLow, indexXHigh, indexYLow, indexYHigh;\r\n\r\n    for ( i = 0; i < l; i++ ) {\r\n      exactX = ( ( this.data[ i ][ 0 ] - fromX ) / deltaX ) - 0.5;\r\n      exactY = ( ( this.data[ i ][ 1 ] - fromY ) / deltaY ) - 0.5;\r\n\r\n      indexX = Math.floor( exactX );\r\n      indexY = Math.floor( exactY );\r\n\r\n      indexXLow = indexX; //Math.floor( exactX );\r\n      indexYLow = indexY; //Math.floor( exactY );\r\n\r\n      indexXHigh = indexX + 1; //Math.ceil( exactX );\r\n      indexYHigh = indexY + 1; //Math.ceil( exactY );\r\n\r\n      compX = ( 1 - ( exactX - indexX ) );\r\n      compY = ( 1 - ( exactY - indexY ) );\r\n\r\n      if ( indexX > numX || indexY > numY || indexX < 0 || indexY < 0 ) {\r\n        continue;\r\n      }\r\n\r\n      densitymap[ indexXLow ] = densitymap[ indexXLow ] || [];\r\n      densitymap[ indexXHigh ] = densitymap[ indexXHigh ] || [];\r\n\r\n      densitymap[ indexXLow ][ indexYLow ] = densitymap[ indexXLow ][ indexYLow ] || 0;\r\n      densitymap[ indexXHigh ][ indexYLow ] = densitymap[ indexXHigh ][ indexYLow ] || 0;\r\n      densitymap[ indexXLow ][ indexYHigh ] = densitymap[ indexXLow ][ indexYHigh ] || 0;\r\n      densitymap[ indexXHigh ][ indexYHigh ] = densitymap[ indexXHigh ][ indexYHigh ] || 0;\r\n\r\n      densitymap[ indexXLow ][ indexYLow ] += compX * compY;\r\n      densitymap[ indexXHigh ][ indexYLow ] += ( 1 - compX ) * compY;\r\n      densitymap[ indexXLow ][ indexYHigh ] += compX * ( 1 - compY );\r\n      densitymap[ indexXHigh ][ indexYHigh ] += ( 1 - compX ) * ( 1 - compY );\r\n\r\n      // A loop would be nicer, but would it be faster ?\r\n      binMin = densitymap[ indexXLow ][ indexYLow ] < binMin ? densitymap[ indexXLow ][ indexYLow ] : binMin;\r\n      binMax = densitymap[ indexXLow ][ indexYLow ] > binMax ? densitymap[ indexXLow ][ indexYLow ] : binMax;\r\n      binMin = densitymap[ indexXHigh ][ indexYLow ] < binMin ? densitymap[ indexXHigh ][ indexYLow ] : binMin;\r\n      binMax = densitymap[ indexXHigh ][ indexYLow ] > binMax ? densitymap[ indexXHigh ][ indexYLow ] : binMax;\r\n      binMin = densitymap[ indexXLow ][ indexYHigh ] < binMin ? densitymap[ indexXLow ][ indexYHigh ] : binMin;\r\n      binMax = densitymap[ indexXLow ][ indexYHigh ] > binMax ? densitymap[ indexXLow ][ indexYHigh ] : binMax;\r\n      binMin = densitymap[ indexXHigh ][ indexYHigh ] < binMin ? densitymap[ indexXHigh ][ indexYHigh ] : binMin;\r\n      binMax = densitymap[ indexXHigh ][ indexYHigh ] > binMax ? densitymap[ indexXHigh ][ indexYHigh ] : binMax;\r\n\r\n      //binMax = Math.max( binMax, densitymap[ indexX ][ indexY ] );\r\n    }\r\n\r\n    this.maxIndexX = numX;\r\n    this.maxIndexY = numY;\r\n\r\n    this.binMin = binMin;\r\n    this.binMax = binMax;\r\n\r\n    this.deltaX = deltaX;\r\n    this.deltaY = deltaY;\r\n\r\n    this.fromX = fromX;\r\n    this.fromY = fromY;\r\n\r\n    this.numX = numX;\r\n    this.numY = numY;\r\n\r\n    this.densitymap = densitymap;\r\n    return densitymap;\r\n  }\r\n\r\n  /**\r\n   * Calculates the density map based on the minimum and maximum values found in the data array\r\n   * @memberof SerieDensityMap\r\n   * @param {Number} [ numX = 400 ] - The number of x bins\r\n   * @param {Number} [ numY = numX ] - The number of y bins\r\n   * @return {SerieDensityMap} The current instance\r\n   * @see SerieDensityMap#calculateDensity\r\n   */\r\n  autoBins( numX, numY ) {\r\n\r\n    this.numX = numX || 400;\r\n    this.numY = numY || this.numX;\r\n\r\n    this.calculateDensity(\r\n      this.minX, ( this.maxX - this.minX ) / numX, numX,\r\n      this.minY, ( this.maxY - this.minY ) / numY, numY\r\n    );\r\n\r\n    this.recalculateBinsOnDraw = false;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Only calculates the density map upon redraw based on the current state of the graph. In this mode, a fixed number of pixels per bin is used to calculate the number of bins and fed into\r\n   * the calculation of the density map. In this method, the color map spans on the full scale of the density map values (i.e. a subrange cannot be defined, like you would do using {@link SerieDensityMap#setColorMapBinBoundaries}).\r\n   * @memberof SerieDensityMap\r\n   * @param {Number} pxPerBinX - The number of x bins per pixels. Should be an integer, but technically it doesn't have to\r\n   * @param {Number} pxPerBinY - The number of y bins per pixels. Should be an integer, but technically it doesn't have to\r\n   * @param {Boolean} weightedDensityMap - Whether jsGraph should use weighted density mapping or not\r\n   * @return {SerieDensityMap} The current instance\r\n   * @see SerieDensityMap#calculateDensity\r\n   */\r\n  setPxPerBin( pxPerBinX, pxPerBinY, weightedDensityMap ) {\r\n\r\n    if ( pxPerBinX ) {\r\n      this.calculationDensityMap( {\r\n        from: 'min',\r\n        to: 'max',\r\n        pxPerBin: pxPerBinX,\r\n        weighted: weightedDensityMap\r\n      } );\r\n    }\r\n\r\n    if ( pxPerBinY ) {\r\n      this.calculationDensityMap( false, {\r\n        from: 'min',\r\n        to: 'max',\r\n        pxPerBin: pxPerBinY,\r\n        weighted: weightedDensityMap\r\n      } );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets bins in the ```x``` or ```y``` direction based on a from value, a to value and a number of bins.\r\n   * @memberof SerieDensityMap\r\n   * @param {String} mode - ```x``` or ```y```\r\n   * @param {Number} from - The from value of the bin for the calculation with ```calculateDensityMap```\r\n   * @param {Number} to - The to value\r\n   * @param {Number} num - The number of bins\r\n   * @return {SerieDensityMap} The current instance\r\n   * @see SerieDensityMap#calculateDensity\r\n   */\r\n  setBinsFromTo( mode, from, to, num ) {\r\n\r\n    this.densityMapCalculation = this.densityMapCalculation || {};\r\n\r\n    this.densityMapCalculation[ mode ] = {\r\n      from: from,\r\n      to: to,\r\n      numBins: num\r\n    };\r\n    this.calculationDensityMap();\r\n    return this;\r\n  }\r\n\r\n  calculationDensityMap( x, y ) {\r\n\r\n    this.method = this.calculateDensityAdvanced;\r\n    this.densityMapCalculation = this.densityMapCalculation || {};\r\n\r\n    if ( x ) {\r\n      this.densityMapCalculation.x = x;\r\n    }\r\n\r\n    if ( y ) {\r\n      this.densityMapCalculation.y = y;\r\n    }\r\n  }\r\n\r\n  calculateDensityAdvanced() {\r\n\r\n    var results = {\r\n      x: {\r\n        from: 0,\r\n        num: 0,\r\n        delta: 0,\r\n        weighing: false\r\n      },\r\n\r\n      y: {\r\n        from: 0,\r\n        num: 0,\r\n        delta: 0,\r\n        weighing: false\r\n      }\r\n    };\r\n\r\n    var widthValues = {\r\n      x: this.graph.drawingSpaceWidth,\r\n      y: this.graph.drawingSpaceHeight\r\n    };\r\n    var axisGetter = {\r\n      x: this.getXAxis,\r\n      y: this.getYAxis\r\n    };\r\n\r\n    var weighing = false;\r\n\r\n    for ( var i in this.densityMapCalculation ) {\r\n\r\n      if ( this.densityMapCalculation[ i ].weighted ) {\r\n        weighing = true;\r\n        results[ i ].weighing = true;\r\n      }\r\n\r\n      if ( this.densityMapCalculation[ i ].pxPerBin ) {\r\n\r\n        // In value\r\n\r\n        var from = ( this.densityMapCalculation[ i ].from == 'min' ) ? axisGetter[ i ].call( this ).getCurrentMin() : this.densityMapCalculation[ i ].from;\r\n        var to = this.densityMapCalculation[ i ].to == 'max' ? axisGetter[ i ].call( this ).getCurrentMax() : this.densityMapCalculation[ i ].to;\r\n\r\n        // In px\r\n        var dimension = Math.abs( axisGetter[ i ].call( this ).getRelPx( to - from ) );\r\n        results[ i ].num = Math.ceil( widthValues[ i ] / this.densityMapCalculation[ i ].pxPerBin );\r\n\r\n        results[ i ].from = from - Math.abs( axisGetter[ i ].call( this ).getRelVal( ( ( results[ i ].num ) * this.densityMapCalculation[ i ].pxPerBin - dimension ) / 2 ) );\r\n        results[ i ].delta = Math.abs( axisGetter[ i ].call( this ).getRelVal( this.densityMapCalculation[ i ].pxPerBin ) );\r\n\r\n      } else {\r\n\r\n        results[ i ].num = this.densityMapCalculation[ i ].numBins || 400;\r\n        results[ i ].from = ( this.densityMapCalculation[ i ].from == 'min' ) ? axisGetter[ i ].call( this ).getCurrentMin() : this.densityMapCalculation[ i ].from;\r\n        results[ i ].delta = ( this.densityMapCalculation[ i ].to ) ? ( ( this.densityMapCalculation[ i ].to == 'max' ? axisGetter[ i ].call( this ).getCurrentMax() : this.densityMapCalculation[ i ].to ) - results[ i ].from ) / ( results[ i ].num ) : this.densityMapCalculate[ i ].delta;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    ( weighing ? this.calculateDensityWeighted : this.calculateDensity ).call( this,\r\n      results.x.from, results.x.delta, results.x.num,\r\n      results.y.from, results.y.delta, results.y.num\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Selects a subrange of bins for the color mapping. There is no need to recalculate the color map after calling this method\r\n   * @memberof SerieDensityMap\r\n   * @param {Number} binMin - The minimum bin value\r\n   * @param {Number} binMax - The maximum bin value\r\n   * @return {SerieDensityMap} The current instance\r\n   * @example // In this case, all bins with values below binMin * 2 (the middle scale) will be rendered with the first color of the color map\r\n   * serie.setColorMapBinBoundaries( serie.binMin * 2, serie.binMax );\r\n   */\r\n  setColorMapBinBoundaries( min, max, _internal ) {\r\n    this.colorMapMin = min;\r\n    this.colorMapMax = max;\r\n\r\n    if ( !_internal ) {\r\n      // If the method is called externally, the bins must be fixed and not automatically scaled when the draw method is invoked.\r\n      this.callbackColorMapMinMax = 'manual';\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calls {@link SerieDensityMap#setColorMapBinBoundaries} using the minimum and maximum bin values calculated by {@link SerieDensityMap#calculateDensity}. This function must be called, since colorMinMap and colorMaxMap are not set automatically when the density map is calculated.\r\n   * @memberof SerieDensityMap\r\n   * @param {Number} binMin - The minimum bin value\r\n   * @param {Number} binMax - The maximum bin value\r\n   * @return {SerieDensityMap} The current instance\r\n   */\r\n  autoColorMapBinBoundaries() {\r\n    this.colorMapMin = this.binMin;\r\n    this.colorMapMax = this.binMax;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Allows the use of a callback to determine the color map min and max value just before the density map is redrawn. This is very useful when the density map is recalculate before redraw, such as in the case where bins per pixels are used\r\n   * @memberof SerieDensityMap\r\n   * @param {(String|Function)} callback - The callback function to call. Should return an array with two elements ```[ colorMapMin, colorMapMax ]```. This parameter can also take the value ```auto```, in which case ```autoColorMapBinBoundaries``` will be called before redraw\r\n   * @return {SerieDensityMap} The current instance\r\n   */\r\n  onRedrawColorMapBinBoundaries( callback ) {\r\n    this.callbackColorMapMinMax = callback;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Generates a color map based on a serie of HSL(A) values.\r\n   * @summary Colors can scale linearly, logarithmically (enhances short range differences) or exponentially (enhances long range differences).\r\n   * One word of advice though. SVG being not canvas, jsGraph has to create a path for each color value of the color map. In other words, if you're asking for 16-bit coloring (65536 values), 65536 SVG paths will be created and your browser will start to suffer from it.\r\n   * As of now, all the colors in colorStops will be places at equal distances from each other between <code>colorMapMin</code> and <code>colorMapMax</code> set by {@link autoColorMapBinBoundaries} or {@link setColorMapBinBoundaries}\r\n   * @memberof SerieDensityMap\r\n   * @param {Array<Object>} colorStops - An array of objects, each having the following format: <code>{ h: [ 0-360], s: 0-1, l: 0-1, a: 0-1}</code>\r\n   * @param {Number} numColors - The number of colors to compute.\r\n   * @param {String} [ method = \"linear\" ] - The method to use to calculate the density map: <code>linear</code>, <code>exp</code>, or <code>log</code>\r\n   * @return {SerieDensityMap} The current instance\r\n   */\r\n  colorMapHSL( colorStops, numColors, method ) {\r\n\r\n    method = method || 'linear';\r\n\r\n    var methods = {\r\n      'exp': function( value ) {\r\n        return ( Math.exp( value / numColors * 1 ) - Math.exp( 0 ) ) / ( Math.exp( 1 ) - Math.exp( 0 ) );\r\n      },\r\n      'log': function( value ) {\r\n        return ( Math.log( value + 1 ) - Math.log( 1 ) ) / ( Math.log( numColors + 1 ) - Math.log( 1 ) );\r\n      },\r\n      'linear': function( value ) {\r\n        return ( value - 0 ) / ( numColors - 0 );\r\n      }\r\n    };\r\n\r\n    var k = 0,\r\n      colorMap = [],\r\n      opacities = [];\r\n\r\n    var color = {\r\n      h: null,\r\n      s: null,\r\n      l: null,\r\n      a: null\r\n    };\r\n\r\n    var ratio, first;\r\n\r\n    var slices = colorStops.length - 1;\r\n\r\n    for ( var i = 0; i <= numColors; i++ ) {\r\n\r\n      ratio = methods[ method ]( i );\r\n\r\n      first = Math.floor( ratio * slices );\r\n\r\n      if ( first == colorStops.length - 1 ) { // Handle 1\r\n        first = slices - 1;\r\n      }\r\n\r\n      ratio = ( ratio - first / ( slices ) ) / ( 1 / ( slices ) );\r\n\r\n      for ( var j in color ) {\r\n        color[ j ] = ( colorStops[ first + 1 ][ j ] - colorStops[ first ][ j ] ) * ratio + colorStops[ first ][ j ];\r\n      }\r\n\r\n      colorMap[ k ] = `hsl(${ color.h }, ${ Math.round( color.s * 100 ) }%, ${ Math.round( color.l * 100 ) }%)`; //this.HSVtoRGB( color.h, color.s, color.v );\r\n      opacities[ k ] = color.a;\r\n      k++;\r\n    }\r\n\r\n    this.opacities = opacities;\r\n    this.colorMap = colorMap;\r\n    this.colorMapNum = numColors;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calls {@link SerieDensityMap#colorMapHSV} using 100 colors.\r\n   * @memberof SerieDensityMap\r\n   * @param {Array<Object>} colorStops - An array of objects, each having the following format: <code>{ h: [ 0-360], s: 0-1, l: 0-1, a: 0-1}</code>\r\n   * @param {String} [ method = \"linear\" ] - The method to use to calculate the density map: <code>linear</code>, <code>exp</code> or <code>log</code>\r\n   * @return {SerieDensityMap} The current instance\r\n   */\r\n  autoColorMapHSL( colorStops, method = 'linear' ) {\r\n    this.colorMapHSL( colorStops, 100, method );\r\n    return this;\r\n  }\r\n\r\n  /*  byteToHex( b ) {\r\n        return hexChar[ ( b >> 4 ) & 0x0f ] + hexChar[ b & 0x0f ];\r\n      }\r\n      */\r\n  /*\r\n    HSVtoRGB( h, s, v ) {\r\n      var r, g, b, i, f, p, q, t;\r\n      if ( arguments.length === 1 ) {\r\n        s = h.s, v = h.v, h = h.h;\r\n      }\r\n      i = Math.floor( h * 6 );\r\n      f = h * 6 - i;\r\n      p = v * ( 1 - s );\r\n      q = v * ( 1 - f * s );\r\n      t = v * ( 1 - ( 1 - f ) * s );\r\n      switch ( i % 6 ) {\r\n        case 0:\r\n          r = v, g = t, b = p;\r\n          break;\r\n        case 1:\r\n          r = q, g = v, b = p;\r\n          break;\r\n        case 2:\r\n          r = p, g = v, b = t;\r\n          break;\r\n        case 3:\r\n          r = p, g = q, b = v;\r\n          break;\r\n        case 4:\r\n          r = t, g = p, b = v;\r\n          break;\r\n        case 5:\r\n          r = v, g = p, b = q;\r\n          break;\r\n      }\r\n      return \"#\" + this.byteToHex( Math.floor( r * 255 ) ) + this.byteToHex( Math.floor( g * 255 ) ) + this.byteToHex( Math.floor( b * 255 ) );\r\n    }\r\n  */\r\n\r\n  /**\r\n   * Returns the color index (```[ 0 - 1 ]```) for a certain value, based on colorMapMin and colorMapMax.\r\n   * @memberof SerieDensityMap\r\n   * @param {Number} binValue - The value of the bin\r\n   * @return {Number} The color index\r\n   */\r\n  getColorIndex( binValue ) {\r\n\r\n    return Math.max( 0, Math.min( this.colorMapNum, Math.floor( ( binValue - this.colorMapMin ) / ( this.colorMapMax - this.colorMapMin ) * this.colorMapNum ) ) );\r\n  }\r\n\r\n  /**\r\n   * Draws the serie\r\n   * @memberof SerieDensityMap\r\n   * @private\r\n   */\r\n  draw() {\r\n\r\n    var colorIndex;\r\n\r\n    if ( this.method ) {\r\n      this.method();\r\n    }\r\n\r\n    if ( !this.callbackColorMapMinMax || this.colorMapMin == undefined || this.colorMapMax == undefined || this.callbackColorMapMinMax == 'auto' ) {\r\n\r\n      this.autoColorMapBinBoundaries();\r\n\r\n    } else if ( typeof this.callbackColorMapMinMax == 'function' ) {\r\n\r\n      var val = this.callbackColorMapMinMax( this.binMin, this.binMax );\r\n      this.setColorMapBinBoundaries( val[ 0 ], val[ 1 ], true );\r\n    }\r\n\r\n    var deltaXPx = this.getXAxis().getRelPx( this.deltaX ),\r\n      deltaYPx = this.getYAxis().getRelPx( this.deltaY );\r\n\r\n    for ( var i = 0; i < this.paths.length; i++ ) {\r\n      this.paths[ i ] = '';\r\n    }\r\n\r\n    for ( var i = 0; i < this.maxIndexX; i++ ) {\r\n\r\n      for ( var j = 0; j < this.maxIndexY; j++ ) {\r\n\r\n        if ( this.densitymap[ i ] == undefined || this.densitymap[ i ][ j ] == undefined ) {\r\n          continue;\r\n        }\r\n\r\n        colorIndex = this.getColorIndex( this.densitymap[ i ][ j ] );\r\n        if ( !this.paths[ colorIndex ] ) {\r\n          this.paths[ colorIndex ] = '';\r\n        }\r\n\r\n        this.paths[ colorIndex ] += ` M ${ this.getXAxis().getPx( i * this.deltaX + this.fromX ) } ${ this.getYAxis().getPx( j * this.deltaY + this.fromY ) } h ${ deltaXPx } v ${ deltaYPx } h -${ deltaXPx } z`;\r\n\r\n      }\r\n    }\r\n    /*\r\n        this.maxIndexX = indexX;\r\n        this.maxIndexY = indexY;*/\r\n\r\n    this.drawRects();\r\n  }\r\n\r\n  /**\r\n   * Draws the rectangles\r\n   * @memberof SerieDensityMap\r\n   * @private\r\n   */\r\n  drawRects() {\r\n\r\n    for ( var i = 0; i < this.paths.length; i++ ) {\r\n\r\n      if ( !this.rects[ i ] ) {\r\n        this.rects[ i ] = document.createElementNS( this.graph.ns, 'path' );\r\n        this.rects[ i ].setAttribute( 'shape-rendering', 'crispEdges' );\r\n\r\n      }\r\n\r\n      if ( this.paths[ i ] !== undefined ) {\r\n        this.rects[ i ].setAttribute( 'd', this.paths[ i ] );\r\n        this.rects[ i ].setAttribute( 'fill', this.colorMap[ i ] );\r\n        this.rects[ i ].setAttribute( 'fill-opacity', this.opacities[ i ] );\r\n      }\r\n      this.groupMain.appendChild( this.rects[ i ] );\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Sets the options of the serie\r\n   * @see SerieDensityMapDefaultOptions\r\n   * @param {Object} options - A object containing the options to set\r\n   * @return {SerieDensityMap} The current serie\r\n   * @memberof SerieDensityMap\r\n   */\r\n  setOptions( options ) {\r\n    this.options = util.extend( true, {}, this.defaults(), ( options || {} ) );\r\n    // Unselected style\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default SerieDensityMap;","import * as util from '../graph.util.js';\r\n\r\nimport SerieLine from './graph.serie.line.js';\r\n\r\n/**\r\n * Constructor for the contour serie. Do not use this constructor directly, but use the {@link Graph#newSerie} method\r\n * @private\r\n * @extends Serie\r\n * @example graph.newSerie( name, options, \"contour\" );\r\n * @see Graph#newSerie\r\n */\r\nclass SerieContour extends SerieLine {\r\n\r\n  constructor( graph, name, options ) {\r\n    super( ...arguments );\r\n\r\n    this.negativeDelta = 0;\r\n    this.positiveDelta = 0;\r\n\r\n    this.negativeThreshold = 0;\r\n    this.positiveThreshold = 0;\r\n\r\n    this.groupMain.setAttribute( 'clip-path', `url(#_clipplot${ graph._creation })` );\r\n  }\r\n\r\n  /**\r\n   * Sets the contour lines\r\n   * @memberof SerieContour.prototype\r\n   * @param {Object} data - The object data\r\n   * @param {Number} data.minX - The minimum x value\r\n   * @param {Number} data.maxX - The maximum x value\r\n   * @param {Number} data.minY - The minimum y value\r\n   * @param {Number} data.maxY - The maximum y value\r\n   * @param {Object[]} data.segments - The segments making up the contour lines\r\n   * @param {Number[]} data.segments.lines - An array of alternating (x1,y1,x2,y2) quadruplet\r\n   * @param {Number} data.segments.zValue - The corresponding z-value of this array\r\n   * @return {Serie} The current serie\r\n   */\r\n  setData( data, arg, type ) {\r\n\r\n    var z = 0;\r\n    var x, dx, arg = arg || '2D',\r\n      type = type || 'float',\r\n      i, l = data.length,\r\n      j, k,\r\n      arr, datas = [];\r\n\r\n    if ( !( data instanceof Array ) ) {\r\n\r\n      if ( typeof data == 'object' ) {\r\n        // Def v2\r\n        this.minX = data.minX;\r\n        this.minY = data.minY;\r\n        this.maxX = data.maxX;\r\n        this.maxY = data.maxY;\r\n\r\n        data = data.segments;\r\n        l = data.length;\r\n      }\r\n    }\r\n\r\n    for ( i = 0; i < l; i++ ) {\r\n      k = data[ i ].lines.length;\r\n      arr = this._addData( type, k );\r\n\r\n      for ( j = 0; j < k; j += 2 ) {\r\n\r\n        arr[ j ] = data[ i ].lines[ j ];\r\n        this._checkX( arr[ j ] );\r\n        arr[ j + 1 ] = data[ i ].lines[ j + 1 ];\r\n        this._checkY( arr[ j + 1 ] );\r\n      }\r\n\r\n      datas.push( {\r\n        lines: arr,\r\n        zValue: data[ i ].zValue\r\n      } );\r\n    }\r\n    this.data = datas;\r\n    this.graph.updateDataMinMaxAxes();\r\n\r\n    this.dataHasChanged( true );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Draws the serie if the data has changed\r\n   * @memberof SerieContour.prototype\r\n   * @param {Boolean} force - Forces redraw even if the data hasn't changed\r\n   * @return {Serie} The current serie\r\n   */\r\n  draw( force ) {\r\n\r\n    if ( force || this.hasDataChanged() ) {\r\n\r\n      this.currentLine = 0;\r\n      var x, y, xpx, ypx, xpx2, ypx2, i = 0,\r\n        l = this.data.length,\r\n        j = 0,\r\n        k, m, currentLine, domLine, arr;\r\n      this.minZ = Infinity;\r\n      this.maxZ = -Infinity;\r\n\r\n      var next = this.groupLines.nextSibling;\r\n      this.groupMain.removeChild( this.groupLines );\r\n      this.zValues = {};\r\n\r\n      var incrXFlip = 0;\r\n      var incrYFlip = 1;\r\n      if ( this.getFlip() ) {\r\n        incrXFlip = 0;\r\n        incrYFlip = 1;\r\n      }\r\n\r\n      var minY = this.getYAxis().getCurrentMin();\r\n      var minX = this.getXAxis().getCurrentMin();\r\n\r\n      var maxX = this.getXAxis().getCurrentMax();\r\n      var maxY = this.getYAxis().getCurrentMax();\r\n\r\n      this.counter = 0;\r\n      this.currentLineId = 0;\r\n\r\n      for ( ; i < l; i++ ) {\r\n        this.currentLine = '';\r\n        j = 0;\r\n        k = 0;\r\n\r\n        for ( arr = this.data[ i ].lines, m = arr.length; j < m; j += 4 ) {\r\n\r\n          var lastxpx, lastypx;\r\n\r\n          if ( ( arr[ j + incrXFlip ] < minX && arr[ j + 2 + incrXFlip ] < minX ) || ( arr[ j + incrYFlip ] < minY && arr[ j + 2 + incrYFlip ] < minY ) || ( arr[ j + incrYFlip ] > maxY && arr[ j + 2 + incrYFlip ] > maxY || ( arr[ j + incrXFlip ] > maxX && arr[ j + 2 + incrXFlip ] > maxX ) ) ) {\r\n            continue;\r\n          }\r\n\r\n          xpx2 = this.getX( arr[ j + incrXFlip ] );\r\n          ypx2 = this.getY( arr[ j + incrYFlip ] );\r\n\r\n          xpx = this.getX( arr[ j + 2 + incrXFlip ] );\r\n          ypx = this.getY( arr[ j + 2 + incrYFlip ] );\r\n\r\n          if ( xpx == xpx2 && ypx == ypx2 ) {\r\n            continue;\r\n          }\r\n\r\n          /*\tif( j > 0 && ( lastxpx !== undefined && lastypx !== undefined && Math.abs( xpx2 - lastxpx ) <= 30 && Math.abs( ypx2 - lastypx ) <= 30 ) ) {\r\n  \t\t\t\t\t\tcurrentLine += \"L\";\r\n  \t\t\t\t\t} else {\r\n  \t\t\t\t\t\tcurrentLine += \"M\";\r\n  \t\t\t\t\t}\r\n  */\r\n\r\n          this.currentLine += 'M ';\r\n          this.currentLine += xpx2;\r\n          this.currentLine += ' ';\r\n          this.currentLine += ypx2;\r\n\r\n          this.currentLine += 'L ';\r\n          this.currentLine += xpx;\r\n          this.currentLine += ' ';\r\n          this.currentLine += ypx;\r\n\r\n          this.counter++;\r\n\r\n          lastxpx = xpx;\r\n          lastypx = ypx;\r\n\r\n          k++;\r\n        }\r\n\r\n        this.currentLine += ' z';\r\n\r\n        domLine = this._createLine();\r\n        domLine.setAttribute( 'data-zvalue', this.data[ i ].zValue );\r\n\r\n        this.zValues[ this.data[ i ].zValue ] = {\r\n          dom: domLine\r\n        };\r\n\r\n        this.minZ = Math.min( this.minZ, this.data[ i ].zValue );\r\n        this.maxZ = Math.max( this.maxZ, this.data[ i ].zValue );\r\n      }\r\n\r\n      i++;\r\n\r\n      for ( i = this.currentLine + 1; i < this.lines.length; i++ ) {\r\n        this.groupLines.removeChild( this.lines[ i ] );\r\n        this.lines.splice( i, 1 );\r\n      }\r\n\r\n      i = 0;\r\n\r\n      for ( ; i < l; i++ ) {\r\n        this.setColorTo( this.lines[ i ], this.data[ i ].zValue, this.minZ, this.maxZ );\r\n      }\r\n\r\n      this.onMouseWheel( 0, {\r\n        shiftKey: false\r\n      } );\r\n      this.groupMain.insertBefore( this.groupLines, next );\r\n\r\n    } else if ( this.hasStyleChanged( this.selectionType ) ) {\r\n\r\n      for ( ; i < l; i++ ) {\r\n        this.setColorTo( this.lines[ i ], this.data[ i ].zValue, this.minZ, this.maxZ );\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  onMouseWheel( delta, e, fixed, positive ) {\r\n\r\n    delta /= 250;\r\n\r\n    if ( fixed !== undefined ) {\r\n\r\n      if ( !positive ) {\r\n        this.negativeThreshold = -fixed * this.minZ;\r\n        this.negativeDelta = -Math.pow( Math.abs( ( this.negativeThreshold / ( -this.minZ ) ) ), 1 / 3 );\r\n      }\r\n\r\n      if ( positive ) {\r\n        this.positiveThreshold = fixed * this.maxZ;\r\n        this.positiveDelta = Math.pow( this.positiveThreshold / ( this.maxZ ), 1 / 3 );\r\n      }\r\n\r\n    } else {\r\n\r\n      if ( ( !e.shiftKey ) || !this.options.hasNegative ) {\r\n\r\n        this.positiveDelta = Math.min( 1, Math.max( 0, this.positiveDelta + Math.min( 0.1, Math.max( -0.1, delta ) ) ) );\r\n        this.positiveThreshold = this.maxZ * ( Math.pow( this.positiveDelta, 3 ) );\r\n\r\n      } else {\r\n\r\n        this.negativeDelta = Math.min( 0, Math.max( -1, this.negativeDelta + Math.min( 0.1, Math.max( -0.1, delta ) ) ) );\r\n        this.negativeThreshold = -this.minZ * ( Math.pow( this.negativeDelta, 3 ) );\r\n\r\n      }\r\n\r\n    }\r\n\r\n    if ( isNaN( this.positiveDelta ) ) {\r\n      this.positiveDelta = 0;\r\n    }\r\n\r\n    if ( isNaN( this.negativeDelta ) ) {\r\n      this.negativeDelta = 0;\r\n    }\r\n\r\n    for ( var i in this.zValues ) {\r\n\r\n      this.zValues[ i ].dom.setAttribute( 'display', ( ( i >= 0 && i >= this.positiveThreshold ) || ( i <= 0 && i <= this.negativeThreshold ) ) ? 'block' : 'none' );\r\n\r\n    }\r\n\r\n    if ( this._shapeZoom ) {\r\n\r\n      if ( !this.options.hasNegative ) {\r\n        this._shapeZoom.hideHandleNeg();\r\n      } else {\r\n\r\n        this._shapeZoom.setHandleNeg( -( Math.pow( this.negativeDelta, 3 ) ), this.minZ );\r\n        this._shapeZoom.showHandleNeg();\r\n      }\r\n\r\n      this._shapeZoom.setHandlePos( ( Math.pow( this.positiveDelta, 3 ) ), this.maxZ );\r\n    }\r\n  }\r\n\r\n  handleMouseMove( xValue, doMarker, yValue ) {\r\n\r\n    var valX = xValue || this.getXAxis().getMouseVal(),\r\n      valY = yValue || this.getYAxis().getMouseVal();\r\n\r\n    return {\r\n      trueX: valX,\r\n      interpolatedY: valY,\r\n      xClosest: valX,\r\n      yClosest: valY\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets rainbow colors based on hsl format\r\n   * @memberof SerieContour.prototype\r\n   * @param {Object} colors\r\n   * @param {Object} colors.fromPositive\r\n   * @param {Number} colors.fromPositive.h\r\n   * @param {Number} colors.fromPositive.s\r\n   * @param {Number} colors.fromPositive.l\r\n\r\n   * @param {Object} colors.toPositive\r\n   * @param {Number} colors.toPositive.h\r\n   * @param {Number} colors.toPositive.s\r\n   * @param {Number} colors.toPositive.l\r\n\r\n\r\n   * @param {Object} colors.fromNegative\r\n   * @param {Number} colors.fromNegative.h\r\n   * @param {Number} colors.fromNegative.s\r\n   * @param {Number} colors.fromNegative.l\r\n\r\n\r\n   * @param {Object} colors.toNegative\r\n   * @param {Number} colors.toNegative.h\r\n   * @param {Number} colors.toNegative.s\r\n   * @param {Number} colors.toNegative.l\r\n   * @return {Serie} The current serie\r\n   */\r\n  setDynamicColor( colors ) {\r\n    this.lineColors = colors;\r\n\r\n    this.styleHasChanged();\r\n  }\r\n\r\n  setNegative( bln ) {\r\n    this.options.hasNegative = bln;\r\n\r\n    if ( bln ) {\r\n      this.negativeThreshold = 0;\r\n    }\r\n  }\r\n\r\n  setColorTo( line, zValue, min, max ) {\r\n\r\n    if ( !this.lineColors ) {\r\n      return;\r\n    }\r\n\r\n    var hsl = {\r\n      h: 0,\r\n      s: 0,\r\n      l: 0\r\n    };\r\n\r\n    for ( var i in hsl ) {\r\n\r\n      if ( zValue > 0 ) {\r\n        hsl[ i ] = this.lineColors.fromPositive[ i ] + ( ( this.lineColors.toPositive[ i ] - this.lineColors.fromPositive[ i ] ) * ( zValue / max ) );\r\n      } else {\r\n        hsl[ i ] = this.lineColors.fromNegative[ i ] + ( ( this.lineColors.toNegative[ i ] - this.lineColors.fromNegative[ i ] ) * ( zValue / min ) );\r\n      }\r\n    }\r\n\r\n    hsl.h /= 360;\r\n\r\n    var rgb = util.hslToRgb( hsl.h, hsl.s, hsl.l );\r\n\r\n    line.setAttribute( 'stroke', `rgb(${ rgb.join() })` );\r\n  }\r\n\r\n  getSymbolForLegend() {\r\n\r\n    if ( !this.lineForLegend ) {\r\n\r\n      var line = document.createElementNS( this.graph.ns, 'ellipse' );\r\n\r\n      line.setAttribute( 'cx', 7 );\r\n      line.setAttribute( 'cy', 0 );\r\n      line.setAttribute( 'rx', 8 );\r\n      line.setAttribute( 'ry', 3 );\r\n\r\n      line.setAttribute( 'cursor', 'pointer' );\r\n      this.lineForLegend = line;\r\n\r\n    }\r\n\r\n    this.applyLineStyle( this.lineForLegend, this.maxZ );\r\n\r\n    return this.lineForLegend;\r\n  }\r\n\r\n  applyLineStyle( line, overwriteValue ) {\r\n    line.setAttribute( 'stroke', this.getLineColor() );\r\n    line.setAttribute( 'stroke-width', this.getLineWidth() + ( this.isSelected() ? 2 : 0 ) );\r\n    if ( this.getLineDashArray() ) {\r\n      line.setAttribute( 'stroke-dasharray', this.getLineDashArray() );\r\n    }\r\n    line.setAttribute( 'fill', 'none' );\r\n\r\n    this.setColorTo( line, ( ( overwriteValue !== undefined ) ? overwriteValue : line.getAttribute( 'data-zvalue' ) ), this.minZ, this.maxZ );\r\n    //  line.setAttribute('shape-rendering', 'optimizeSpeed');\r\n\r\n    this.hasStyleChanged( false );\r\n  }\r\n\r\n  setShapeZoom( shape ) {\r\n    this._shapeZoom = shape;\r\n  }\r\n\r\n}\r\n\r\nexport default SerieContour;","import GraphPosition from '../graph.position.js';\r\nimport * as util from '../graph.util.js';\r\nimport EventMixin from '../mixins/graph.mixin.event_graph.js';\r\n/**\r\n * Shape class that should be extended\r\n * @class Shape\r\n * @static\r\n */\r\nclass Shape {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Initializes the shape\r\n   * @param {Graph} graph - The graph containing the shape\r\n   * @param {Object} properties - The properties object (not copied)\r\n   * @return {Shape} The current shape\r\n   */\r\n  init( graph, properties, simplified = false ) {\r\n    var self = this;\r\n\r\n    this.graph = graph;\r\n    this.properties = properties || {};\r\n    this.handles = [];\r\n    this.options = this.options || {};\r\n\r\n    if ( !simplified ) {\r\n      this.group = document.createElementNS( this.graph.ns, 'g' );\r\n      this.group.setAttribute( 'clip-path', `url(#_clipplot${graph._creation})` );\r\n      this.group.jsGraphIsShape = this;\r\n    }\r\n\r\n    this.simplified = simplified;\r\n\r\n    this._selected = false;\r\n    this.createDom();\r\n\r\n    if ( this._dom ) {\r\n      this._dom.jsGraphIsShape = this;\r\n    }\r\n\r\n    this.classes = [];\r\n    this.transforms = [];\r\n\r\n    if ( this._data.masker ) {\r\n      var maskPath = document.createElementNS( this.graph.ns, 'mask' );\r\n      this.maskingId = Math.random();\r\n      maskPath.setAttribute( 'id', this.maskingId );\r\n\r\n      this.maskDomWrapper = document.createElementNS( this.graph.ns, 'rect' );\r\n      this.maskDomWrapper.setAttribute( 'fill', 'white' );\r\n      maskPath.appendChild( this.maskDomWrapper );\r\n\r\n      var maskDom = this._dom.cloneNode();\r\n      maskPath.appendChild( maskDom );\r\n\r\n      this.maskDom = maskDom;\r\n\r\n      this.graph.defs.appendChild( maskPath );\r\n    }\r\n\r\n    if ( this.group ) {\r\n      if ( this._dom && !this.isHTML() ) {\r\n        this.group.appendChild( this._dom );\r\n      }\r\n    }\r\n\r\n    let dom;\r\n    if ( simplified ) {\r\n      dom = this._dom;\r\n    } else {\r\n      dom = this.group;\r\n    }\r\n\r\n    dom.addEventListener( 'mouseover', function( e ) {\r\n      self.handleMouseOver( e );\r\n    } );\r\n\r\n    dom.addEventListener( 'mouseout', function( e ) {\r\n      self.handleMouseOut( e );\r\n    } );\r\n\r\n    dom.addEventListener( 'mousedown', function( e ) {\r\n      self.graph.focus();\r\n\r\n      self.handleMouseDown( e );\r\n    } );\r\n\r\n    dom.addEventListener( 'click', this.handleClick.bind( this ) );\r\n\r\n    dom.addEventListener( 'dblclick', function( e ) {\r\n      //e.preventDefault();\r\n      // e.stopPropagation();\r\n\r\n      self.handleDblClick( e );\r\n    } );\r\n\r\n    //\t\t\tthis.group.appendChild(this.rectEvent);\r\n\r\n    this.initImpl();\r\n\r\n    this.graph.emit( 'shapeNew', this );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Implentation of the init method. To be extended if necessary on extended Shape classes\r\n   */\r\n  initImpl() {}\r\n\r\n  /**\r\n   * @return {Object} The shape's underlying data object\r\n   */\r\n  getData() {\r\n    return this._data;\r\n  }\r\n\r\n  /**\r\n   * @returns {String} The type of the shape\r\n   */\r\n  getType() {\r\n    return this.type;\r\n  }\r\n\r\n  /**\r\n   * Removes the shape from the DOM and unlinks it from the graph\r\n   */\r\n  kill( keepDom ) {\r\n    if ( this._inDom && !keepDom ) {\r\n      this.graph.removeShapeFromDom( this );\r\n    }\r\n\r\n    if ( !keepDom ) {\r\n      this.graph._removeShape( this );\r\n    }\r\n\r\n    this.graph.stopElementMoving( this );\r\n    this.graph.emit( 'shapeRemoved', this );\r\n    this.emit( 'removed', this );\r\n\r\n    this._inDom = false;\r\n  }\r\n\r\n  /**\r\n   * Hides the shape\r\n   * @return {Shape} The current shape\r\n   */\r\n  hide() {\r\n    if ( this.hidden ) {\r\n      return this;\r\n    }\r\n\r\n    this.hidden = true;\r\n    if ( !this.isHTML() && !this.simplified ) {\r\n      this.group.style.display = 'none';\r\n    } else {\r\n      this._dom.style.display = 'none';\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Returns whether the shape is hidden or not\r\n   *  @return {Boolean} true if the shape is hidden, false otherwise\r\n   */\r\n  isHidden() {\r\n    return this.hidden;\r\n  }\r\n\r\n  /**\r\n   *  Returns whether the shape is visible or not\r\n   *  @return {Boolean} true if the shape is visible, false if it is hidden\r\n   */\r\n  isVisible() {\r\n    return !this.hidden;\r\n  }\r\n\r\n  /**\r\n   * Shows the shape\r\n   * @return {Shape} The current shape\r\n   */\r\n  show() {\r\n    if ( !this.hidden ) {\r\n      return this;\r\n    }\r\n\r\n    this.hidden = false;\r\n    if ( !this.isHTML() ) {\r\n      this.group.style.display = 'initial';\r\n    } else {\r\n      this._dom.style.display = 'initial';\r\n    }\r\n\r\n    this.redraw();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a class to the shape DOM\r\n   * @param {String} className - The class to add\r\n   * @return {Shape} The current shape\r\n   */\r\n  addClass( className ) {\r\n    this.classes = this.classes || [];\r\n    if ( this.classes.indexOf( className ) == -1 ) {\r\n      this.classes.push( className );\r\n    }\r\n    this.makeClasses();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes a class from the shape DOM\r\n   * @param {String} className - The class to remove\r\n   * @return {Shape} The current shape\r\n   */\r\n  removeClass( className ) {\r\n    this.classes.splice( this.classes.indexOf( className ), 1 );\r\n    this.makeClasses();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds the classes\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  makeClasses() {\r\n    if ( this._dom ) {\r\n      this._dom.setAttribute( 'class', this.classes.join( ' ' ) );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers a ```shapeChanged``` event on the graph and a ```changed``` event on the shape\r\n   * @return {Shape} The current shape\r\n   */\r\n  changed( event, parameters ) {\r\n    if ( event ) {\r\n      this.graph.emit( event, this, parameters );\r\n      this.emit( event, this, parameters );\r\n    }\r\n\r\n    this.emit( 'changed', this, parameters );\r\n    this.graph.emit( 'shapeChanged', this, parameters );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Creates an event receptacle with the coordinates of the shape bounding box\r\n   * @return {Shape} The current shape\r\n   */\r\n  setEventReceptacle() {\r\n\r\n    if ( this, simplified ) {\r\n      return;\r\n    }\r\n\r\n    if ( !this.rectEvent ) {\r\n      this.rectEvent = document.createElementNS( this.graph.ns, 'rect' );\r\n      this.rectEvent.setAttribute( 'pointer-events', 'fill' );\r\n      this.rectEvent.setAttribute( 'fill', 'transparent' );\r\n      this.group.appendChild( this.rectEvent );\r\n      this.rectEvent.jsGraphIsShape = this;\r\n    }\r\n\r\n    var box = this.group.getBBox();\r\n    this.rectEvent.setAttribute( 'x', box.x );\r\n    this.rectEvent.setAttribute( 'y', box.y - 10 );\r\n    this.rectEvent.setAttribute( 'width', box.width );\r\n    this.rectEvent.setAttribute( 'height', box.height + 20 );\r\n  }\r\n\r\n  /**\r\n   * Assigns a serie to the shape\r\n   * @param {Serie} The serie that owns the shape\r\n   * @return {Shape} The current shape\r\n   */\r\n  setSerie( serie ) {\r\n    if ( !serie ) {\r\n      return;\r\n    }\r\n\r\n    this.serie = serie;\r\n\r\n    if ( !serie.getXAxis || !serie.getYAxis ) {\r\n      console.error( serie );\r\n      throw 'Serie does not implement the getXAxis or getYAxis method';\r\n    }\r\n    this.xAxis = serie.getXAxis();\r\n    this.yAxis = serie.getYAxis();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {Serie} The serie associated to the shape\r\n   */\r\n  getSerie() {\r\n    return this.serie;\r\n  }\r\n\r\n  /**\r\n   * Assigns the shape to the default x and y axes of the graph, only if they don't exist yet\r\n   * @return {Shape} The current shape\r\n   * @see Graph#getXAxis\r\n   * @see Graph#getYAxis\r\n   */\r\n  autoAxes() {\r\n    if ( !this.xAxis ) {\r\n      this.xAxis = this.graph.getXAxis();\r\n    }\r\n\r\n    if ( !this.yAxis ) {\r\n      this.yAxis = this.graph.getYAxis();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Assigns the shape to an x axis\r\n   * @param {XAxis} The X axis related to the shape\r\n   * @return {Shape} The current shape\r\n   */\r\n  setXAxis( axis ) {\r\n    this.xAxis = axis;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Assigns the shape to an y axis\r\n   * @param {YAxis} The Y axis related to the shape\r\n   * @return {Shape} The current shape\r\n   */\r\n  setYAxis( axis ) {\r\n    this.yAxis = axis;\r\n  }\r\n\r\n  /**\r\n   * Returns the x axis associated to the shape. If non-existent, assigns it automatically\r\n   * @return {XAxis} The x axis associated to the shape.\r\n   */\r\n  getXAxis() {\r\n    if ( !this.xAxis ) {\r\n      this.autoAxes();\r\n    }\r\n\r\n    return this.xAxis;\r\n  }\r\n\r\n  /**\r\n   * Returns the y axis associated to the shape. If non-existent, assigns it automatically\r\n   * @return {YAxis} The y axis associated to the shape.\r\n   */\r\n  getYAxis() {\r\n    if ( !this.yAxis ) {\r\n      this.autoAxes();\r\n    }\r\n\r\n    return this.yAxis;\r\n  }\r\n\r\n  /**\r\n   * Sets the layer of the shape\r\n   * @param {Number} layer - The layer number (1 being the lowest)\r\n   * @return {Shape} The current shape\r\n   * @see Shape#getLayer\r\n   */\r\n  setLayer( layer ) {\r\n    this.setProp( 'layer', layer );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the layer on which the shape is placed\r\n   * @return {Number} The layer number (1 being the lowest layer)\r\n   */\r\n  getLayer() {\r\n    var layer = this.getProp( 'layer' );\r\n\r\n    if ( layer !== undefined ) {\r\n      return layer;\r\n    }\r\n\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * Initial drawing of the shape. Adds it to the DOM and creates the labels. If the shape was already in the DOM, the method simply recreates the labels and reapplies the shape style, unless ```force``` is set to ```true```\r\n   * @param {Boolean} force - Forces adding the shape to the DOM (useful if the shape has changed layer)\r\n   * @param {Boolean} preventRedraw - Prevents the redraw method\r\n   * @return {Shape} The current shape\r\n   */\r\n  draw( force, preventRedraw ) {\r\n    if ( !this._inDom || force ) {\r\n      this.appendToDom();\r\n      this._inDom = true;\r\n    }\r\n\r\n    this.makeLabels();\r\n\r\n    if ( !preventRedraw ) {\r\n      this.redraw();\r\n    }\r\n\r\n    this.applyStyle();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Redraws the shape. Repositions it, applies the style and updates the labels\r\n   * @return {Shape} The current shape\r\n   */\r\n  redraw() {\r\n    if ( this.hidden ) {\r\n      return this;\r\n    }\r\n\r\n    this.position = this.applyPosition();\r\n\r\n    this.redrawImpl();\r\n    if ( !this.position ) {\r\n      this.updateLabels();\r\n      return this;\r\n    }\r\n\r\n    this.updateLabels();\r\n    this._applyTransforms();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Implementation of the redraw method. Extended Shape classes should override this method\r\n   */\r\n  redrawImpl() {}\r\n\r\n  /**\r\n   * Sets all dumpable properties of the shape\r\n   * @param {Object} properties - The properties object\r\n   * @return {Shape} The current shape\r\n   */\r\n  setProperties( properties ) {\r\n    this.properties = properties;\r\n\r\n    if ( !Array.isArray( this.properties.position ) ) {\r\n      this.properties.position = [ this.properties.position ];\r\n    }\r\n    var self = this;\r\n    for ( var i = 0, l = this.properties.position.length; i < l; i++ ) {\r\n      var pos = GraphPosition.check( this.properties.position[ i ], function(\r\n        relativeTo\r\n      ) {\r\n        return self.getRelativePosition( relativeTo );\r\n      } );\r\n\r\n      this.properties.position[ i ] = pos;\r\n    }\r\n\r\n    this.emit( 'propertiesChanged' );\r\n    return this;\r\n  }\r\n\r\n  getRelativePosition( relativePosition ) {\r\n    var result;\r\n    if ( ( result = /position([0-9]*)/.exec( relativePosition ) ) !== null ) {\r\n      return this.getPosition( result[ 1 ] );\r\n    } else if (\r\n      ( result = /labelPosition([0-9]*)/.exec( relativePosition ) ) !== null\r\n    ) {\r\n      return this.getLabelPosition( result[ 1 ] );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all dumpable properties of the shape\r\n   * @return {Object} properties - The properties object\r\n   */\r\n  getProperties( properties ) {\r\n    return this.properties;\r\n  }\r\n\r\n  /**\r\n   * Sets a property to the shape that is remembered and can be later reexported (or maybe reimported)\r\n   * @param {String} prop - The property to save\r\n   * @param val - The value to save\r\n   * @param [ index = 0 ] - The index of the property array to save the property\r\n   * @return {Shape} The current shape\r\n   */\r\n  setProp( prop, val, index ) {\r\n    this.properties = this.properties || {};\r\n    this.properties[ prop ] = this.properties[ prop ] || [];\r\n    this.properties[ prop ][ index || 0 ] = val;\r\n    this.emit( 'propertyChanged', prop );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns a property of the shape\r\n   * @param {String} prop - The property to retrieve\r\n   * @param [ index = 0 ] - The index of the property array\r\n   */\r\n  getProp( prop, index ) {\r\n\r\n    if ( !Array.isArray( this.properties[ prop ] ) ) {\r\n\r\n      return this.properties[ prop ];\r\n    }\r\n    return ( this.properties[ prop ] || [] )[ index || 0 ];\r\n  }\r\n\r\n  /**\r\n   * Returns all the properties of the shape\r\n   * @param {String} prop - The property to retrieve\r\n   */\r\n  getProps( prop, index ) {\r\n    return this.properties[ prop ] || [];\r\n  }\r\n\r\n  /**\r\n   * Adds a property to the property array\r\n   * @param {String} prop - The property to add\r\n   * @param val - The value to save\r\n   */\r\n  addProp( prop, value ) {\r\n    this.properties[ prop ] = this.properties[ prop ] || [];\r\n    this.properties[ prop ].push( value );\r\n  }\r\n\r\n  /**\r\n   * Resets the property array\r\n   * @param {String} prop - The property to reset\r\n   */\r\n  resetProp( prop ) {\r\n    this.properties[ prop ] = [];\r\n  }\r\n\r\n  /**\r\n   * Sets a DOM property to the shape\r\n   */\r\n  setDom( prop, val, noForce ) {\r\n\r\n    this._cachedDOM = this._cachedDOM || {};\r\n\r\n    if ( this._cachedDOM[ prop ] == val ) {\r\n      return;\r\n    }\r\n\r\n    if ( this._dom ) {\r\n      if ( !noForce || !util.hasSavedAttribute( this._dom, prop ) ) {\r\n        this._dom.setAttribute( prop, val );\r\n        this._cachedDOM[ prop ] = val;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a DOM property to the shape group\r\n   */\r\n  setDomGroup( prop, val ) {\r\n\r\n    if ( this.simplified ) {\r\n      this._dom.setAttribute( prop, val );\r\n    } else if ( this.group ) {\r\n      this.group.setAttribute( prop, val );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves the stroke color\r\n   * @return {Shape} The current shape\r\n   */\r\n  setStrokeColor( color ) {\r\n    this.setProp( 'strokeColor', color );\r\n    this.overwriteSavedProp( 'stroke', color );\r\n    this.applySelectedStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the stroke color\r\n   * @return {String} The stroke color of the shape\r\n   */\r\n  getStrokeColor() {\r\n    return this.getProp( 'strokeColor' );\r\n  }\r\n\r\n  /**\r\n   * Saves the fill color\r\n   * @param {String} color - The filling color\r\n   * @return {Shape} The current shape\r\n   */\r\n  setFillColor( color ) {\r\n    this.setProp( 'fillColor', color );\r\n    this.overwriteSavedProp( 'fill', color );\r\n    this.applySelectedStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the fill color\r\n   * @return {String} The fill color of the shape\r\n   */\r\n  getFillColor() {\r\n    return this.getProp( 'fillColor' );\r\n  }\r\n\r\n  /**\r\n   * Saves the opacity of the filling color of the shape\r\n   * @param {Number} opacity - The filling opacity (0 to 1)\r\n   * @return {Shape} The current shape\r\n   */\r\n  setFillOpacity( opacity ) {\r\n    this.setProp( 'fillOpacity', opacity );\r\n    this.overwriteSavedProp( 'fill-opacity', opacity );\r\n    this.applySelectedStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Saves the stroke width\r\n   * @param {String} width - The stroke width\r\n   * @return {Shape} The current shape\r\n   */\r\n  setStrokeWidth( width ) {\r\n    this.setProp( 'strokeWidth', width );\r\n    this.overwriteSavedProp( 'stroke-width', width );\r\n    this.applySelectedStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the stroke width\r\n   * @return {String} The stroke width of the shape\r\n   */\r\n  getStrokeWidth() {\r\n    return this.getProp( 'strokeWidth' );\r\n  }\r\n\r\n  /**\r\n   * Saves the stroke dash array\r\n   * @param {String} dasharray - The dasharray string\r\n   * @example shape.setStrokeDasharray(\"5,5,1,4\");\r\n   * shape.applyStyle();\r\n   * @return {Shape} The current shape\r\n   */\r\n  setStrokeDasharray( dasharray ) {\r\n    this.setProp( 'strokeDasharray', dasharray );\r\n    this.overwriteSavedProp( 'stroke-dasharray', dasharray );\r\n    this.applySelectedStyle();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets any extra attributes to the DOM element of the shape\r\n   * @param {Object<String,String>} attributes - An extra attribute array to apply to the shape DOM\r\n   * @example shape.setAttributes( { \"data-bindable\" : true } );\r\n   * shape.applyStyle();\r\n   * @return {Shape} The current shape\r\n   */\r\n  setAttributes( attributes ) {\r\n    this.setProp( 'attributes', attributes );\r\n    return this;\r\n  }\r\n\r\n  overwriteSavedProp( prop, newValue ) {\r\n    util.overwriteDomAttribute( this._dom, prop, newValue );\r\n  }\r\n\r\n  /**\r\n   * Adds an extra attribute to the shape\r\n   * @param {String} attributeName - The name of the attribute\r\n   * @param {String} attributeValue - The value of the attribute\r\n   * @return {Shape} The current shape\r\n   */\r\n  addAttribute( attributeName, attributeValue ) {\r\n    var added = {};\r\n    added[ attributeName ] = attributeValue;\r\n    this.addProp( 'attributes', added );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a transform property to the shape.\r\n   * @param {String} type - The transform type (\"rotate\", \"transform\" or \"scale\")\r\n   * @param {String} args - The arguments following the transform\r\n   * @return {Shape} The current shape\r\n   */\r\n  addTransform( type, args ) {\r\n    this.addProp( 'transforms', {\r\n      type: type,\r\n      arguments: Array.isArray( args ) ? args : [ args ]\r\n    } );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a transform property to the shape.\r\n   * @param {Number} angle - The arguments following the transform\r\n   * @param {Number} cx - The arguments following the transform\r\n   * @param {Number} cy - The arguments following the transform\r\n   * @param {String} angleType - Which type of angle should be applied. ```degree``` or ```angleData```\r\n   * @return {Shape} The current shape\r\n   */\r\n  addTransformRotate( angle, cx, cy, angleType = 'degrees' ) {\r\n    this.addProp( 'transforms', {\r\n      type: 'rotate',\r\n      arguments: {\r\n        center: {\r\n          x: cx,\r\n          y: cy\r\n        },\r\n        angle: angle,\r\n        angleType: angleType\r\n      }\r\n    } );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Resets the transforms\r\n   * @see Shape#addTransform\r\n   * @return {Shape} The current shape\r\n   */\r\n  resetTransforms() {\r\n    this.resetProp( 'transforms' );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the text of the label\r\n   * @param {String} text - The text of the label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelText( text, index = 0 ) {\r\n    this.setProp( 'labelText', text, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the text of the label\r\n   * @param {String} data - Some additional HTML tags that will be set to the label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelData( data, text, index = 0 ) {\r\n    this.setProp( 'labelData', text, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the text of the label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {String} The text of the label\r\n   */\r\n  getLabelText( text, index = 0 ) {\r\n    return this.getProp( 'labelText', index );\r\n  }\r\n\r\n  /**\r\n   * Displays a hidden label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  displayLabel( index = 0 ) {\r\n    this.setProp( 'labelVisible', true, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Hides a displayed label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  hideLabel( index = 0 ) {\r\n    this.setProp( 'labelVisible', false, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the label\r\n   * @param {String} color - The color of the label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelColor( color, index = 0 ) {\r\n    this.setProp( 'labelColor', color, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the font size of the label\r\n   * @param {String} size - The font size (in px) of the label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelFontSize( size, index = 0 ) {\r\n    this.setProp( 'labelFontSize', size, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the position of the label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Position} The current position of the label\r\n   */\r\n  getLabelPosition( index = 0 ) {\r\n    return this.getProp( 'labelPosition', index );\r\n  }\r\n\r\n  /**\r\n   * Sets the position of the label\r\n   * @param {Position} position - The position of the label\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelPosition( position, index ) {\r\n    var self;\r\n    var pos = GraphPosition.check( position, function( relativeTo ) {\r\n      return self.getRelativePosition( relativeTo );\r\n    } );\r\n\r\n    this.setProp( 'labelPosition', pos, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the angle of the label\r\n   * @param {Number} angle - The angle of the label in degrees (0 to 360°)\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelAngle( angle, index ) {\r\n    this.setProp( 'labelAngle', angle, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the baseline of the label, which affects its y position with respect to the text direction. For text along the x direction, different baselines will reference differently the text to the ```y``` coordinate.\r\n   * @param {String} baseline - The baseline of the label. Most common baselines are ```no-change```, ```central```, ```middle``` and ```hanging```. You will find an explanation of those significations on the [corresponding MDN article]{@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/dominant-baseline}\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelBaseline( baseline, index ) {\r\n    this.setProp( 'labelBaseline', baseline, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the anchoring of the label.\r\n   * @param {String} anchor - The anchor of the label. Values can be ```start```, ```middle```, ```end``` or ```inherit```.\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelAnchor( anchor, index ) {\r\n    this.setProp( 'labelAnchor', anchor, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the anchoring of the label.\r\n   * @param {String} size - The font size in px\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelSize( size, index ) {\r\n    this.setProp( 'labelSize', size, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the stroke of the label.\r\n   * @param {String} color - The color of the stroke\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelStrokeColor( color, index ) {\r\n    this.setProp( 'labelStrokeColor', color, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the width of the stroke of the label.\r\n   * @param {Number} width - The width of the stroke\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelStrokeWidth( width, index ) {\r\n    this.setProp( 'labelStrokeWidth', width, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the color of the background of the label.\r\n   * @param {String} color - The color of the background\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelBackgroundColor( color, index ) {\r\n    this.setProp( 'labelBackgroundColor', color, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the opacity of the background of the label.\r\n   * @param {Number} opacity - The opacity of the background, between 0 and 1\r\n   * @param {Number} [ index = 0 ] - The index of the label\r\n   * @return {Shape} The current shape\r\n   */\r\n  setLabelBackgroundOpacity( opacity, index ) {\r\n    this.setProp( 'labelBackgroundOpacity', opacity, index || 0 );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the generic style to the shape. This is a method that applies to most shapes, hence should not be overridden. However if you create a bundle of shapes that extend another one, you may use it to set common style properties to all your shapes.\r\n   * @return {Shape} The current shape\r\n   */\r\n  applyGenericStyle() {\r\n    this.setDom( 'fill', this.getProp( 'fillColor' ), true );\r\n    this.setDom( 'fill-opacity', this.getProp( 'fillOpacity' ), true );\r\n    this.setDom( 'stroke', this.getProp( 'strokeColor' ), true );\r\n    this.setDom( 'stroke-width', this.getProp( 'strokeWidth' ), true );\r\n    this.setDom( 'stroke-dasharray', this.getProp( 'strokeDasharray' ), true );\r\n\r\n    var attributes = this.getProps( 'attributes' );\r\n    for ( var j = 0, l = attributes.length; j < l; j++ ) {\r\n      for ( var i in attributes[ j ] ) {\r\n        this.setDom(\r\n          i,\r\n          typeof attributes[ j ][ i ] == 'function' ?\r\n          attributes[ j ][ i ].call( this, i ) :\r\n          attributes[ j ][ i ],\r\n          true\r\n        );\r\n      }\r\n    }\r\n\r\n    this._applyTransforms();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the style to the shape. This method can be extended to apply specific style to the shapes\r\n   * @return {Shape} The current shape\r\n   */\r\n  applyStyle() {\r\n    return this.applyGenericStyle();\r\n  }\r\n\r\n  /**\r\n   * Returns a computed position object\r\n   * @param {(Number|Position)} [ index = 0 ] - The index of the position to compute\r\n   * @param {Position} relToPosition - A base position from which to compute the position (useful for <code>dx</code> values)\r\n   * @return {Object} The computed position object in the format <code>{ x: x_in_px, y: y_in_px }</code>\r\n   */\r\n  calculatePosition( index ) {\r\n    //   var position = this.getPosition( index );\r\n    var position;\r\n    if ( !( index instanceof GraphPosition ) ) {\r\n\r\n      position = this.getPosition( index );\r\n\r\n    } else {\r\n      position = index;\r\n    }\r\n\r\n    if ( !position ) {\r\n      return;\r\n    }\r\n\r\n    if ( position && position.compute ) {\r\n      return position.compute(\r\n        this.graph,\r\n        this.getXAxis(),\r\n        this.getYAxis(),\r\n        this.getSerie()\r\n      );\r\n    }\r\n\r\n    this.graph.throw();\r\n  }\r\n\r\n  /**\r\n   * Returns a stored position object\r\n   * @param {Number} [ index = 0 ] - The index of the position to compute\r\n   * @return {Position} The position at the proper index, or undefined\r\n   */\r\n  getPosition( index ) {\r\n    var pos = this.getProp( 'position', index || 0 );\r\n    if ( pos == undefined ) {\r\n      return;\r\n    }\r\n    this.setProp( 'position', ( pos = GraphPosition.check( pos ) ), index );\r\n    return pos;\r\n  }\r\n\r\n  /**\r\n   * Sets a position object\r\n   * @param {Position} position - The position object to store\r\n   * @param {Number} [ index = 0 ] - The index of the position to store\r\n   * @return {Shape} The current shape\r\n   */\r\n  setPosition( position, index ) {\r\n    var self = this;\r\n    var pos = GraphPosition.check( position, function( relativeTo ) {\r\n      return self.getRelativePosition( relativeTo );\r\n    } );\r\n\r\n    return this.setProp( 'position', pos, index || 0 );\r\n  }\r\n\r\n  /**\r\n   * Sorts the positions\r\n   * @param {Function} sortFunction - Function passed into the ```Array.sort``` method\r\n   * @return {Position} The current shape\r\n   */\r\n  sortPositions( sortFunction ) {\r\n    this.getProps( 'position' ).sort( sortFunction );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the style to the shape. This method can be extended to apply specific style to the shapes\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  _applyTransforms() {\r\n    var transforms = this.getProps( 'transforms' ),\r\n      transformString = '';\r\n\r\n    if ( !transforms ) {\r\n      return;\r\n    }\r\n    transforms = Array.isArray( transforms ) ? transforms : [ transforms ];\r\n\r\n    if ( transforms.length == 0 ) {\r\n      return;\r\n    }\r\n\r\n    for ( var i = 0; i < transforms.length; i++ ) {\r\n      transformString += `${transforms[i].type}(`;\r\n\r\n      let transform;\r\n      switch ( transforms[ i ].type ) {\r\n        case 'translate':\r\n          if ( transforms[ i ].arguments ) {\r\n            transform = transforms[ i ].arguments[ 0 ].compute(\r\n              this.graph,\r\n              this.getXAxis(),\r\n              this.getYAxis(),\r\n              this.getSerie()\r\n            );\r\n          } else {\r\n            const value = GraphPosition.check( transforms[ i ].value );\r\n\r\n            transform = value.compute(\r\n              this.graph,\r\n              this.getXAxis(),\r\n              this.getYAxis(),\r\n              this.getSerie()\r\n            );\r\n          }\r\n\r\n          transformString += transform.x || transform.dx || 0;\r\n          transformString += ', ';\r\n          transformString += transform.y || transform.dy || 0;\r\n\r\n          break;\r\n\r\n        case 'rotate':\r\n          let angle;\r\n\r\n          if ( !transforms[ i ].arguments ) {\r\n\r\n            if ( transforms[ i ].angleType == 'angleData' ) {\r\n\r\n              let xAxis, yAxis;\r\n\r\n              if ( !this.serie ) {\r\n                xAxis = this.graph.getXAxis();\r\n                yAxis = this.graph.getYAxis();\r\n              } else {\r\n                xAxis = this.serie.getXAxis();\r\n                yAxis = this.serie.getYAxis();\r\n              }\r\n\r\n              angle = Math.atan( Math.tan( transforms[ i ].angle * Math.PI / 180 ) * xAxis.getRelVal( 1 ) / yAxis.getRelVal( 1 ) ) * 180 / Math.PI;\r\n            } else {\r\n              angle = transforms[ i ].angle;\r\n            }\r\n\r\n            transformString += angle;\r\n\r\n            if ( !transforms[ i ].center ) {\r\n              var p = this.computePosition( 0 );\r\n\r\n              transformString += `, ${p.x}, ${p.y}`;\r\n            } else {\r\n              const posCenter = GraphPosition.check(\r\n                transforms[ i ].center\r\n              ).compute(\r\n                this.graph,\r\n                this.getXAxis(),\r\n                this.getYAxis(),\r\n                this.getSerie()\r\n              );\r\n\r\n              if ( posCenter.x === posCenter.x && posCenter.y === posCenter.y ) {\r\n                transformString += ', ';\r\n                transformString += posCenter.x;\r\n                transformString += ', ';\r\n                transformString += posCenter.y;\r\n\r\n              }\r\n\r\n            }\r\n\r\n          } else {\r\n            transformString += transforms[ i ].arguments[ 0 ];\r\n            transformString += ', ';\r\n\r\n            if ( transforms[ i ].arguments.length == 1 ) {\r\n              var p = this.computePosition( 0 );\r\n              transformString += `${p.x}, ${p.y}`;\r\n            } else {\r\n              transformString += GraphPosition.getDeltaPx(\r\n                transforms[ i ].arguments[ 1 ],\r\n                this.getXAxis()\r\n              ).replace( 'px', '' );\r\n              transformString += ', ';\r\n              transformString += GraphPosition.getDeltaPx(\r\n                transforms[ i ].arguments[ 2 ],\r\n                this.getYAxis()\r\n              ).replace( 'px', '' );\r\n            }\r\n          }\r\n\r\n          break;\r\n      }\r\n\r\n      transformString += ') ';\r\n    }\r\n\r\n    this.setDomGroup( 'transform', transformString );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Creates all the labels\r\n   * @private\r\n   * @returns {Shape} The current shape\r\n   */\r\n  makeLabels() {\r\n\r\n    if ( this.simplified ) {\r\n      return;\r\n    }\r\n\r\n    this._labels = this._labels || [];\r\n    this._labelsBackground = this._labelsBackground || [];\r\n\r\n    this._labels.map( ( label ) => {\r\n      this.group.removeChild( label );\r\n    } );\r\n\r\n    this._labelsBackground.map( ( bg ) => {\r\n      this.group.removeChild( bg );\r\n    } );\r\n\r\n    this._labels = [];\r\n    this._labelsBackground[ i ] = [];\r\n\r\n    var i = 0;\r\n\r\n    while ( this.getProp( 'labelText', i ) !== undefined ) {\r\n\r\n      if ( !this._labels[ i ] ) {\r\n        this._labels[ i ] = document.createElementNS( this.graph.ns, 'text' );\r\n        this._labels[ i ].setAttribute( 'data-label-i', i );\r\n        this._labels[ i ].jsGraphIsShape = this;\r\n\r\n        this._labelsBackground[ i ] = document.createElementNS(\r\n          this.graph.ns,\r\n          'rect'\r\n        );\r\n        this._labelsBackground[ i ].setAttribute( 'data-label-i', i );\r\n        this._labelsBackground[ i ].jsGraphIsShape = this;\r\n\r\n        this.group.appendChild( this._labelsBackground[ i ] );\r\n        this.group.appendChild( this._labels[ i ] );\r\n\r\n        this._labels[ i ].addEventListener( 'dblclick', ( e ) => {\r\n          e.stopPropagation();\r\n\r\n          this.labelDblClickListener( e );\r\n        } );\r\n\r\n        this._labelsBackground[ i ].addEventListener( 'dblclick', ( e ) => {\r\n          e.stopPropagation();\r\n\r\n          this.labelDblClickListener( e );\r\n        } );\r\n      }\r\n\r\n      if ( !Array.isArray( this.getProp( 'labelText', i ) ) ) {\r\n        //   break;\r\n      }\r\n\r\n      i++;\r\n    }\r\n\r\n    this.updateLabels();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Determines if the label is editable\r\n   * @param {Number} labelIndex - The index of the label\r\n   * @return {Boolean} ```true``` if the label is editable, ```false``` otherwise\r\n   */\r\n  isLabelEditable( labelIndex ) {\r\n    return this.getProp( 'labelEditable', labelIndex || 0 );\r\n  }\r\n\r\n  /**\r\n   * Applies the label data to the dom object\r\n   * @private\r\n   * @param {Number} labelIndex - The index of the label\r\n   * @returns {Shape} The current shape\r\n   */\r\n  updateLabels() {\r\n    var self = this;\r\n    this._labels = this._labels || [];\r\n\r\n    for ( var i = 0, l = this._labels.length; i < l; i++ ) {\r\n      this._applyLabelData( i );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies the label data to the dom object\r\n   * @private\r\n   * @param {Number} labelIndex - The index of the label\r\n   * @returns {Shape} The current shape\r\n   */\r\n  _applyLabelData( labelIndex ) {\r\n    labelIndex = labelIndex || 0;\r\n\r\n    /** Sets the position */\r\n\r\n    var visible = this.getProp( 'labelVisible', labelIndex );\r\n\r\n    if ( visible === false ) {\r\n      this._labels[ labelIndex ].setAttribute( 'display', 'none' );\r\n      this._labelsBackground[ labelIndex ].setAttribute( 'display', 'none' );\r\n      return;\r\n    } else {\r\n      this._labels[ labelIndex ].setAttribute( 'display', 'initial' );\r\n      this._labelsBackground[ labelIndex ].setAttribute( 'display', 'initial' );\r\n    }\r\n\r\n    var position = this.calculatePosition(\r\n      GraphPosition.check( this.getProp( 'labelPosition', labelIndex ) )\r\n    );\r\n\r\n    if (\r\n      !position ||\r\n      isNaN( position.x ) ||\r\n      isNaN( position.y ) ||\r\n      position.y === false ||\r\n      position.x === false\r\n    ) {\r\n      /*console.warn( \"Cannot compute positioning for labelIndex \" + labelIndex + \" with text \" + this.getProp( \"labelText\", labelIndex ) );\r\n      console.log( this, this._labels );\r\n      console.trace();*/\r\n      return;\r\n    }\r\n\r\n    if (\r\n      position.x != 'NaNpx' &&\r\n      !isNaN( position.x ) &&\r\n      position.x !== 'NaN' &&\r\n      position.x !== false\r\n    ) {\r\n      this._labels[ labelIndex ].setAttribute( 'x', position.x );\r\n      this._labels[ labelIndex ].setAttribute( 'y', position.y );\r\n    }\r\n\r\n    /** Sets the angle */\r\n    var currAngle = this.getProp( 'labelAngle', labelIndex ) || 0;\r\n    if ( currAngle != 0 ) {\r\n      var x = this._labels[ labelIndex ].getAttribute( 'x' ),\r\n        y = this._labels[ labelIndex ].getAttribute( 'y' );\r\n\r\n      this._labels[ labelIndex ].setAttribute(\r\n        'transform',\r\n        `rotate(${currAngle} ${x} ${y})`\r\n      );\r\n      //  this._labelsBackground[ labelIndex ].setAttribute( 'transform', 'rotate(' + currAngle + ' ' + x + ' ' + y + ')' );\r\n    }\r\n\r\n    let labelData = this.getProp( 'labelHTMLData', labelIndex ) || {};\r\n\r\n    for ( var i in labelData ) {\r\n      this._labels[ labelIndex ].setAttribute( i, labelData[ i ] );\r\n      this._labelsBackground[ labelIndex ].setAttribute( i, labelData[ i ] );\r\n    }\r\n\r\n    /** Sets the baseline */\r\n    this._labels[ labelIndex ].setAttribute(\r\n      'dominant-baseline',\r\n      this.getProp( 'labelBaseline', labelIndex ) || 'no-change'\r\n    );\r\n\r\n    /** Sets the text */\r\n    this._labels[ labelIndex ].textContent = this.getProp(\r\n      'labelText',\r\n      labelIndex\r\n    );\r\n\r\n    /** Sets the color */\r\n    this._labels[ labelIndex ].setAttribute(\r\n      'fill',\r\n      this.getProp( 'labelColor', labelIndex ) || 'black'\r\n    );\r\n\r\n    /** Sets the size */\r\n    this._labels[ labelIndex ].setAttribute(\r\n      'font-size',\r\n      `${this.getProp( 'labelSize', labelIndex )}px` || '12px'\r\n    );\r\n\r\n    /** Sets the anchor */\r\n    this._labels[ labelIndex ].setAttribute(\r\n      'text-anchor',\r\n      this._getLabelAnchor( labelIndex )\r\n    );\r\n\r\n    /** Sets the stroke */\r\n    this._labels[ labelIndex ].setAttribute(\r\n      'stroke',\r\n      this.getProp( 'labelStrokeColor', labelIndex ) || 'black'\r\n    );\r\n\r\n    /** Sets the stroke */\r\n    this._labels[ labelIndex ].setAttribute(\r\n      'stroke-width',\r\n      this.getProp( 'labelStrokeWidth', labelIndex ) || `${0}px`\r\n    );\r\n\r\n    this._labels[ labelIndex ].setAttribute( 'stroke-location', 'outside' );\r\n\r\n    let rect = this._labels[ labelIndex ].getBBox();\r\n\r\n    this._labelsBackground[ labelIndex ].setAttribute( 'x', rect.x );\r\n    this._labelsBackground[ labelIndex ].setAttribute( 'y', rect.y );\r\n    this._labelsBackground[ labelIndex ].setAttribute( 'width', rect.width );\r\n    this._labelsBackground[ labelIndex ].setAttribute( 'height', rect.height );\r\n\r\n    this._labelsBackground[ labelIndex ].setAttribute(\r\n      'fill',\r\n      this.getProp( 'labelBackgroundColor' ) || 'transparent'\r\n    );\r\n    this._labelsBackground[ labelIndex ].setAttribute(\r\n      'fill-opacity',\r\n      this.getProp( 'labelBackgroundOpacity' ) || 1\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  Temporarily empties the labels, until the next rendering.\r\n   *  This is used when the shape should not be displayed\r\n   *  @returns {Shape} The current shape instance\r\n   */\r\n  emptyLabels() {\r\n    for ( var i = 0, l = this._labels.length; i < l; i++ ) {\r\n      /** Sets the baseline */\r\n      this._labels[ i ].textContent = '';\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the anchor of the label\r\n   * @private\r\n   * @param {Number} labelIndex - The index of the label\r\n   * @returns {String} The anchor in SVG string\r\n   */\r\n  _getLabelAnchor( labelIndex ) {\r\n    var anchor = this.getProp( 'labelAnchor', labelIndex );\r\n    switch ( anchor ) {\r\n      case 'middle':\r\n      case 'start':\r\n      case 'end':\r\n        return anchor;\r\n        break;\r\n\r\n      case 'right':\r\n        return 'end';\r\n        break;\r\n\r\n      case 'left':\r\n        return 'start';\r\n        break;\r\n\r\n      default:\r\n        return 'start';\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the shape selection status\r\n   * @returns {Boolean} true is the shape is selected, false otherwise\r\n   */\r\n  isSelected() {\r\n    return this._selectStatus || false;\r\n  }\r\n\r\n  /**\r\n   * Sets or queries whether the shape can have handles. Even if the property is set to false, the getter can return true if the property ```statichandles``` is true (used when handles never disappear)\r\n   * @param {Boolean} setter - If used, defined if the shape has handles or not\r\n   * @returns {Boolean} true is the shape has handles, false otherwise\r\n   * @example Shape.hasHandles( true ); // Sets that the shape has handles\r\n   * @example Shape.hasHandles( false ); // Sets that the shape has no handles\r\n   * @example Shape.hasHandles( ); // Queries the shape to determine if it has handles or not. Also returns true if handles are static\r\n   */\r\n  hasHandles( setter ) {\r\n    if ( setter !== undefined ) {\r\n      this.setProp( 'handles', setter );\r\n    }\r\n\r\n    return !!this.getProp( 'handles' ) || !!this.getProp( 'staticHandles' );\r\n  }\r\n\r\n  /**\r\n   * Adds shape handles\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  addHandles() {\r\n\r\n    if ( this.simplified ) {\r\n      return;\r\n    }\r\n\r\n    if ( this.isLocked() ) {\r\n      return;\r\n    }\r\n\r\n    if ( !this.handlesInDom ) {\r\n      this.handlesInDom = true;\r\n\r\n      for ( var i = 1; i < this.handles.length; i++ ) {\r\n        if ( this.handles[ i ] ) {\r\n          this.group.appendChild( this.handles[ i ] );\r\n        }\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove shape handles\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  removeHandles() {\r\n    this.hideHandles();\r\n    this.handles = [];\r\n  }\r\n\r\n  /**\r\n   * Hide shape handles\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  hideHandles() {\r\n    if ( !this.handlesInDom ) {\r\n      return this;\r\n    }\r\n\r\n    if ( this.simplified ) {\r\n      return;\r\n    }\r\n\r\n    for ( var i = 1; i < this.handles.length; i++ ) {\r\n      this.group.removeChild( this.handles[ i ] );\r\n    }\r\n\r\n    this.handlesInDom = false;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @return {Boolean} ```true``` if the handles are in the DOM\r\n   */\r\n  areHandlesInDom() {\r\n    return this.handlesInDom;\r\n  }\r\n\r\n  /**\r\n   * Selects the shape. Should only be called from jsGraph main instance\r\n   * @private\r\n   * @param {Boolean} [ mute = false ] - Mutes the method (no event emission)\r\n   * @returns {Shape} the current shape\r\n   */\r\n  _select( mute ) {\r\n    if ( !this.isSelectable() ) {\r\n      return false;\r\n    }\r\n\r\n    // Put on the stack\r\n    this.appendToDom();\r\n    //this.graph.appendShapeToDom( this ); // Put the shape on top of the stack !\r\n\r\n    this._selectStatus = true;\r\n\r\n    this.applySelectedStyle();\r\n\r\n    if ( this.hasHandles() && !this.hasStaticHandles() ) {\r\n      this.addHandles();\r\n      this.setHandles();\r\n    }\r\n\r\n    if ( !mute ) {\r\n      this.graph.emit( 'shapeSelected', this );\r\n    }\r\n  }\r\n\r\n  applySelectedStyle() {\r\n    if ( !this._selectStatus ) {\r\n      return;\r\n    }\r\n\r\n    var style = this.getSelectStyle();\r\n    var style2 = {};\r\n    for ( var i in style ) {\r\n      if ( typeof style[ i ] == 'function' ) {\r\n        style2[ i ] = style[ i ].call( this );\r\n      } else {\r\n        style2[ i ] = style[ i ];\r\n      }\r\n    }\r\n\r\n    util.saveDomAttributes( this._dom, style2, 'select' );\r\n  }\r\n\r\n  /**\r\n   * Unselects the shape. Should only be called from jsGraph main instance\r\n   * @private\r\n   * @param {Boolean} [ mute = false ] - Mutes the method (no event emission)\r\n   * @returns {Shape} the current shape\r\n   */\r\n  _unselect( mute ) {\r\n    this._selectStatus = false;\r\n\r\n    util.restoreDomAttributes( this._dom, 'select' );\r\n\r\n    if ( this.hasHandles() && !this.hasStaticHandles() ) {\r\n      this.hideHandles();\r\n    }\r\n\r\n    if ( !mute ) {\r\n      this.graph.emit( 'shapeUnselected', this );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the special style of the shape when it is selected.\r\n   * @see Shape#setSelectStyle\r\n   * @param {Object<String,String>} The SVG attributes to apply to the shape\r\n   */\r\n  getSelectStyle() {\r\n    return this.selectStyle;\r\n  }\r\n\r\n  /**\r\n   * Defines the style that is applied to the shape when it is selected. The style extends the default style of the shape\r\n   * @param {Object<String,String>} [ attr = {} ] - The SVG attributes to apply to the shape\r\n   * @example rectangle.setSelectStyle( { fill: 'red' } );\r\n   * @returns {Shape} the current shape\r\n   */\r\n  setSelectStyle( attr ) {\r\n    this.selectStyle = attr;\r\n    this.applySelectedStyle(); // Maybe the shape is already selected\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Assigns static handles to the shape. In this mode, handles will not disappear\r\n   * @param {Boolean} staticHandles - true to enable static handles, false to disable them.\r\n   * @returns {Shape} the current shape\r\n   */\r\n  setStaticHandles( staticHandles ) {\r\n    this.setProp( 'staticHandles', staticHandles );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} ```true``` if the shape has static handles, ```false``` otherwise\r\n   */\r\n  hasStaticHandles( staticHandles ) {\r\n    return !!this.getProp( 'staticHandles' );\r\n  }\r\n\r\n  /**\r\n   * Creates the handles for the shape\r\n   * @param {Number} nb - The number of handles\r\n   * @param {String} type - The type of SVG shape to use\r\n   * @param {Object<String,String>} [ attr = {} ] - The SVG attributes to apply to the handles\r\n   * @param {Function} [ callbackEach ] - An additional callback the user can provide to further personalize the handles\r\n   * @returns {Shape} the current shape\r\n   * @private\r\n   */\r\n  _createHandles( nb, type, attr, callbackEach ) {\r\n    if ( this.handles && this.handles.length > 0 ) {\r\n      return;\r\n    }\r\n\r\n    var self = this;\r\n\r\n    for ( var i = 1, l = nb; i <= l; i++ ) {\r\n      ( ( j ) => {\r\n        var self = this;\r\n\r\n        var handle = document.createElementNS( self.graph.ns, type );\r\n        handle.jsGraphIsShape = true;\r\n\r\n        if ( attr ) {\r\n          for ( var k in attr ) {\r\n            handle.setAttribute( k, attr[ k ] );\r\n          }\r\n        }\r\n\r\n        handle.addEventListener( 'mousedown', ( e ) => {\r\n          if ( self.isResizable() ) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            self.graph.emit( 'beforeShapeResize', self );\r\n            this.emit( 'beforeShapeResize' );\r\n\r\n            if ( !self.graph.prevent( false ) ) {\r\n              self.resizing = true;\r\n              self.handleSelected = j;\r\n              self.handleMouseDown( e );\r\n            }\r\n          }\r\n        } );\r\n\r\n        if ( callbackEach ) {\r\n          callbackEach( self.handles[ j ] );\r\n        }\r\n\r\n        self.handles[ j ] = handle;\r\n      } ).call( this, i );\r\n    }\r\n\r\n    return this.handles;\r\n  }\r\n\r\n  /**\r\n   * Creates the handles for the shape. Should be implemented by the children shapes classes.\r\n   */\r\n  createHandles() {\r\n    if ( this.hasStaticHandles() ) {\r\n      this.addHandles();\r\n      this.setHandles();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles mouse down event\r\n   * @private\r\n   * @param {Event} e - The native event.prototype\r\n   */\r\n  handleMouseDownImpl() {}\r\n\r\n  /**\r\n   * Handles the mouse move event\r\n   * @private\r\n   * @param {Event} e - The native event.prototype\r\n   */\r\n  handleMouseMoveImpl() {}\r\n\r\n  /**\r\n   * Handles mouse up event\r\n   * @private\r\n   * @param {Event} e - The native event.prototype\r\n   */\r\n  handleMouseUpImpl() {}\r\n\r\n  /**\r\n   * Called when the shape is created\r\n   * @private\r\n   * @param {Event} e - The native event.prototype\r\n   */\r\n  handleCreateImpl() {}\r\n\r\n  /**\r\n   * Handles mouse down events\r\n   * @param {Event} e - The native event\r\n   * @return The result of the {@link Shape#handleMouseDownImpl} method.prototype\r\n   */\r\n  handleMouseDown( e ) {\r\n    //this.handleSelected = false;\r\n\r\n    if ( this.isLocked() ) {\r\n      return;\r\n    }\r\n\r\n    if ( this.isMovable() || this.isResizable() ) {\r\n      this.graph.elementMoving( this );\r\n    }\r\n\r\n    if ( this.getProp( 'selectOnMouseDown' ) ) {\r\n      this.graph.selectShape( this );\r\n    }\r\n\r\n    if ( this.isMovable() ) {\r\n      if ( !this.resizing ) {\r\n        this.graph.emit( 'beforeShapeMove', self );\r\n\r\n        if ( !this.graph.prevent( false ) ) {\r\n          this.moving = true;\r\n          this.moved = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    this._mouseCoords = this.graph._getXY( e );\r\n    return this.handleMouseDownImpl( e, this._mouseCoords );\r\n  }\r\n\r\n  /**\r\n   * Handles mouse click events\r\n   * @param {Event} e - The native event\r\n   * @return The result of the {@link Shape#handleMouseDownClick} method\r\n   * @private\r\n   */\r\n  handleClick( e ) {\r\n    this.graph.emit( 'shapeClicked', this );\r\n    this.emit( 'shapeClicked' );\r\n\r\n    if ( !this.isSelectable() ) {\r\n      return false;\r\n    }\r\n\r\n    if ( !e.shiftKey ) {\r\n      this.graph.unselectShapes();\r\n    }\r\n\r\n    if ( this.getProp( 'selectOnClick' ) ) {\r\n      this.graph.selectShape( this );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles mouse click events\r\n   * @param {Event} e - The native event\r\n   * @return The result of the {@link Shape#handleMouseUpImpl} method\r\n   * @private\r\n   */\r\n  handleMouseMove( e ) {\r\n    if ( ( this.resizing || this.moving ) && !this.isSelected() ) {\r\n      this.graph.selectShape( this );\r\n    }\r\n\r\n    this.graph.emit( 'beforeShapeMouseMove', this );\r\n    this.emit( 'beforeShapeMouseMove' );\r\n\r\n    if ( this.graph.prevent( false ) || !this._mouseCoords ) {\r\n      return false;\r\n    }\r\n\r\n    this.moved = true;\r\n    var coords = this.graph._getXY( e );\r\n    var deltaX = this.getXAxis().getRelVal( coords.x - this._mouseCoords.x ),\r\n      deltaY = this.getYAxis().getRelVal( coords.y - this._mouseCoords.y );\r\n\r\n    if ( deltaX != 0 || deltaY !== 0 ) {\r\n      this.preventUnselect = true;\r\n    }\r\n\r\n    this._mouseCoords = coords;\r\n\r\n    var ret = this.handleMouseMoveImpl(\r\n      e,\r\n      deltaX,\r\n      deltaY,\r\n      coords.x - this._mouseCoords.x,\r\n      coords.y - this._mouseCoords.y\r\n    );\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Handles mouse up events\r\n   * @param {Event} e - The native event\r\n   * @return The result of the {@link Shape#handleMouseUpImpl} method\r\n   * @private\r\n   */\r\n  handleMouseUp( e ) {\r\n    if ( this.moving && this.moved ) {\r\n      this.graph.emit( 'shapeMoved', this );\r\n      this.emit( 'shapeMoved' );\r\n    }\r\n\r\n    if ( this.handleSelected || this.resize ) {\r\n      this.graph.emit( 'shapeResized', this );\r\n      this.emit( 'shapeResized' );\r\n    }\r\n\r\n    this.moving = false;\r\n    this.resizing = false;\r\n    this.handleSelected = false;\r\n    this.graph.elementMoving( false );\r\n\r\n    return this.handleMouseUpImpl( e );\r\n  }\r\n\r\n  /**\r\n   * Handles double click events\r\n   * @param {Event} e - The native event\r\n   * @return The result of the {@link Shape#handleMouseDblClickImpl} method\r\n   * @private\r\n   */\r\n  handleDblClick( e ) {}\r\n\r\n  /**\r\n   * Handles mouse over events\r\n   * @param {Event} e - The native event\r\n   * @return The result of the {@link Shape#handleMouseOverImpl} method\r\n   * @private\r\n   */\r\n  handleMouseOver() {\r\n    if ( this.getProp( 'highlightOnMouseOver' ) ) {\r\n      if ( !this.moving && !this.resizing ) {\r\n        this.highlight();\r\n      }\r\n    }\r\n\r\n    this.graph.emit( 'shapeMouseOver', this );\r\n  }\r\n\r\n  /**\r\n   * Handles mouse out events\r\n   * @param {Event} e - The native event\r\n   * @return The result of the {@link Shape#handleMouseOutImpl} method\r\n   * @private\r\n   */\r\n  handleMouseOut() {\r\n    if ( this.getProp( 'highlightOnMouseOver' ) ) {\r\n      this.unHighlight();\r\n    }\r\n\r\n    this.graph.emit( 'shapeMouseOut', this );\r\n  }\r\n\r\n  /*\r\n   *  Updated July 1st, 2015\r\n   */\r\n\r\n  /**\r\n   * Locks the shape (prevents selection, resizing and moving)\r\n   * @return {Shape} The current shape\r\n   */\r\n  lock() {\r\n    this.setProp( 'locked', true );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unlocks the shape (prevents selection, resizing and moving)\r\n   * @return {Shape} The current shape\r\n   */\r\n  unlock() {\r\n    this.setProp( 'locked', false );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} True if the shape is locked, false otherwise\r\n   */\r\n  isLocked() {\r\n    return this.getProp( 'locked' ) || this.graph.shapesLocked;\r\n  }\r\n\r\n  /**\r\n   * Makes the shape moveable\r\n   * @return {Shape} The current shape\r\n   */\r\n  movable( bln ) {\r\n    this.setProp( 'movable', true );\r\n  }\r\n\r\n  /**\r\n   * Makes the shape non-moveable\r\n   * @return {Shape} The current shape\r\n   */\r\n  unmovable() {\r\n    this.setProp( 'movable', false );\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} True if the shape is movable, false otherwise\r\n   */\r\n  isMovable() {\r\n    return this.getProp( 'movable' );\r\n  }\r\n\r\n  /**\r\n   * Makes the shape resizable\r\n   * @return {Shape} The current shape\r\n   */\r\n  resizable() {\r\n    this.setProp( 'resizable', true );\r\n  }\r\n\r\n  /**\r\n   * Makes the shape non-resizable\r\n   * @return {Shape} The current shape\r\n   */\r\n  unresizable() {\r\n    this.setProp( 'resizable', false );\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} True if the shape is resizable, false otherwise\r\n   */\r\n  isResizable() {\r\n    return this.getProp( 'resizable' );\r\n  }\r\n\r\n  /**\r\n   * Makes the shape selectable\r\n   * @return {Shape} The current shape\r\n   */\r\n  selectable() {\r\n    this.setProp( 'selectable', true );\r\n  }\r\n\r\n  /**\r\n   * Makes the shape non-selectable\r\n   * @return {Shape} The current shape\r\n   */\r\n  unselectable() {\r\n    this.graph.unselectShape( this );\r\n    this.setProp( 'selectable', false );\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} True if the shape is selectable, false otherwise\r\n   */\r\n  isSelectable() {\r\n    return this.getProp( 'selectable' );\r\n  }\r\n\r\n  /**\r\n   * Highlights the shape with attributes\r\n   * @returns {Shape} The current shape\r\n   * @param {Object<String,String>} [ attributes ] - A hashmap of attributes to apply. If omitted, {@link Shape#getHighlightAttributes} will be called\r\n   * @param {String} [ saveDomName=highlight ] - The name to which the current shape attributes will be saved to be recovered later with the {@link Shape#unHighlight} method\r\n   * @example shape.highlight( { fill: 'red', 'fill-opacity': 0.5 } );\r\n   * @see Shape#unHighlight\r\n   */\r\n  highlight( attributes, saveDomName ) {\r\n    if ( !attributes ) {\r\n      attributes = this.getHighlightAttributes();\r\n    }\r\n\r\n    if ( !saveDomName ) {\r\n      saveDomName = 'highlight';\r\n    }\r\n\r\n    util.saveDomAttributes( this._dom, attributes, saveDomName );\r\n    this.highlightImpl();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the highlight properties from the same\r\n   * @returns {Shape} The current shape\r\n   * @param {String} [ saveDomName=highlight ] - The name to which the current shape attributes will be saved to be recovered later with the {@link Shape#unHighlight} method\r\n   * @see Shape#highlight\r\n   */\r\n  unHighlight( saveDomName ) {\r\n    if ( !saveDomName ) {\r\n      saveDomName = 'highlight';\r\n    }\r\n\r\n    util.restoreDomAttributes( this._dom, saveDomName );\r\n    this.unHighlightImpl();\r\n    return this;\r\n  }\r\n\r\n  highlightImpl() {}\r\n  unHighlightImpl() {}\r\n\r\n  /**\r\n   * @returns {Object} The attributes taken by the shape when highlighted\r\n   * @see Shape#highlight\r\n   */\r\n  getHighlightAttributes() {\r\n    return this._highlightAttributes;\r\n  }\r\n\r\n  /**\r\n   * Sets the attributes the shape will take when highlighted\r\n   * @param {Object<String,String>} [ attributes ] - A hashmap of attributes to apply when the shape is highlighted\r\n   * @returns {Shape} The current shape\r\n   * @see Shape#highlight\r\n   */\r\n  setHighlightAttributes( attributes ) {\r\n    this._highlightAttributes = attributes;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the masking id of the shape. Returns null if the shape does not behave as a mask\r\n   * @returns {String} The ```id``` attribute of the shape\r\n   */\r\n  getMaskingID() {\r\n    return this.maskingId;\r\n  }\r\n\r\n  /**\r\n   * Masks the current shape with another shape passed as the first parameter of the method\r\n   * @param {Shape} maskingShape - The shape used to mask the current shape\r\n   * @return {Shape} The current shape\r\n   */\r\n  maskWith( maskingShape ) {\r\n    const maskingId = maskingShape.getMaskingID();\r\n\r\n    if ( maskingId ) {\r\n      this._dom.setAttribute( 'mask', `url(#${maskingId})` );\r\n    } else {\r\n      this._dom.removeAttribute( 'mask' );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manually updates the mask of the shape. This is needed because the shape needs to be surrounded by a white rectangle (because transparent is treated as black and will not render the shape)\r\n   * This method will work well for rectangles but should be overridden for other shapes\r\n   * @return {Shape} The current shape\r\n   * @todo Explore a way to make it compatible for all kinds of shapes. Maybe the masker position should span the whole graph...\r\n   */\r\n  updateMask() {\r\n    return;\r\n    if ( !this.maskDom ) {\r\n      return; // eslint-disable-line no-useless-return\r\n    }\r\n\r\n    var position = {\r\n      x: 'min',\r\n      y: 'min'\r\n    };\r\n    var position2 = {\r\n      x: 'max',\r\n      y: 'max'\r\n    };\r\n\r\n    position = this._getPosition( position );\r\n    position2 = this._getPosition( position2 );\r\n\r\n    this.maskDomWrapper.setAttribute( 'x', Math.min( position.x, position2.x ) );\r\n    this.maskDomWrapper.setAttribute( 'y', Math.min( position.y, position2.y ) );\r\n\r\n    this.maskDomWrapper.setAttribute(\r\n      'width',\r\n      Math.abs( position2.x - position.x )\r\n    );\r\n    this.maskDomWrapper.setAttribute(\r\n      'height',\r\n      Math.abs( position2.y - position.y )\r\n    );\r\n\r\n    for ( var i = 0; i < this._dom.attributes.length; i++ ) {\r\n      this.maskDom.setAttribute(\r\n        this._dom.attributes[ i ].name,\r\n        this._dom.attributes[ i ].value\r\n      );\r\n    }\r\n\r\n    this.maskDom.setAttribute( 'fill', 'black' );\r\n\r\n    return this;\r\n  }\r\n\r\n  labelDblClickListener( e ) {\r\n    var i = parseInt( e.target.getAttribute( 'data-label-i' ) );\r\n\r\n    var self = this;\r\n\r\n    if ( isNaN( i ) ) {\r\n      return;\r\n    }\r\n\r\n    if ( !this.isLabelEditable( i ) ) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    var shapeLabel = document.createElement( 'input' );\r\n    shapeLabel.setAttribute( 'type', 'text' );\r\n    shapeLabel.setAttribute( 'value', self.getProp( 'labelText', i ) );\r\n\r\n    self.graph.wrapper.prepend( shapeLabel );\r\n    shapeLabel.select();\r\n\r\n    util.setCSS( shapeLabel, {\r\n      position: 'absolute',\r\n      marginTop: `${parseInt( e.target.getAttribute( 'y' ).replace( 'px', '' ) ) +\r\n        this.graph.getPaddingTop() -\r\n        10}px`,\r\n      marginLeft: `${parseInt( e.target.getAttribute( 'x' ).replace( 'px', '' ) ) +\r\n        this.graph.getPaddingLeft() -\r\n        50}px`,\r\n      textAlign: 'center',\r\n      width: '100px'\r\n    } );\r\n\r\n    const previousValue = self.getLabelText( i );\r\n\r\n    const blurEvent = function() {\r\n      self.setLabelText( shapeLabel.value, i );\r\n      self._labels[ i ].textContent = shapeLabel.value;\r\n\r\n      const nextValue = shapeLabel.value;\r\n\r\n      shapeLabel.remove();\r\n      shapeLabel.removeEventListener( 'blur', blurEvent );\r\n      shapeLabel = false;\r\n\r\n      self.changed( 'shapeLabelChanged', {\r\n        previousValue: previousValue,\r\n        nextValue: nextValue\r\n      } );\r\n    };\r\n\r\n    shapeLabel.addEventListener( 'blur', blurEvent );\r\n\r\n    shapeLabel.addEventListener( 'keyup', function( e ) {\r\n      if ( e.keyCode === 13 ) {\r\n        blurEvent();\r\n      }\r\n    } );\r\n    shapeLabel.addEventListener( 'keypress', function( e ) {\r\n      e.stopPropagation();\r\n    } );\r\n    shapeLabel.addEventListener( 'keydown', function( e ) {\r\n      e.stopPropagation();\r\n    } );\r\n    shapeLabel.focus();\r\n  }\r\n\r\n  /**\r\n   * Appends the shape DOM to its parent\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  appendToDom() {\r\n    if ( this._forcedParentDom ) {\r\n      this._forcedParentDom.appendChild( this.group );\r\n    } else {\r\n      this.graph.appendShapeToDom( this );\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Forces the DOM parent (instead of the normal layer)\r\n   * @return {Shape} The current shape\r\n   */\r\n  forceParentDom( dom ) {\r\n    this._forcedParentDom = dom;\r\n\r\n    return this;\r\n  }\r\n\r\n  isHTML() {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * @alias Shape#calculatePosition\r\n */\r\nShape.prototype.computePosition = Shape.prototype.calculatePosition;\r\n\r\n/**\r\n * @alias Shape#displayLabel\r\n */\r\nShape.prototype.showLabel = Shape.prototype.displayLabel;\r\n\r\n/**\r\n * @alias Shape#kill\r\n */\r\nShape.prototype.remove = Shape.prototype.kill;\r\n\r\nEventMixin( Shape, 'shape' );\r\n\r\nexport default Shape;","import Shape from './graph.shape.js';\r\n\r\n/**\r\n *  Displays a surface under a line serie\r\n *  @extends GraphShape\r\n */\r\nclass ShapeSurfaceUnderCurve extends Shape {\r\n\r\n  createDom() {\r\n    this._dom = document.createElementNS( this.graph.ns, 'path' );\r\n  }\r\n\r\n  createHandles() {\r\n\r\n    this._createHandles( 2, 'line', {\r\n      'stroke-width': '3',\r\n      'stroke': 'transparent',\r\n      'pointer-events': 'stroke',\r\n      'cursor': 'ew-resize'\r\n    } );\r\n\r\n  }\r\n\r\n  handleMouseMoveImpl( e, deltaX, deltaY ) {\r\n\r\n    if ( this.isLocked() ) {\r\n      return;\r\n    }\r\n\r\n    if ( this.moving ) {\r\n\r\n      this.getPosition( 0 ).deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      this.getPosition( 1 ).deltaPosition( 'x', deltaX, this.getXAxis() );\r\n\r\n    } else if ( this.serie && this.handleSelected ) {\r\n\r\n      this.resizingPosition = this.handleSelected == 1 ? this.getPosition( 0 ) : this.getPosition( 1 );\r\n\r\n      var value = this.serie.getClosestPointToXY( this.getXAxis().getVal( this.graph._getXY( e ).x - this.graph.getPaddingLeft() ) );\r\n\r\n      if ( !value ) {\r\n        return;\r\n      }\r\n\r\n      if ( this.resizingPosition.x != value.xMin ) {\r\n        this.preventUnselect = true;\r\n      }\r\n\r\n      this.resizingPosition.x = value.xMin;\r\n\r\n    } else if ( this.handleSelected ) {\r\n\r\n      this.resizingPosition = this.handleSelected == 1 ? this.getPosition( 0 ) : this.getPosition( 1 );\r\n      this.resizingPosition.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n    }\r\n\r\n    this.applyPosition();\r\n  }\r\n  /*\r\n      redrawImpl: function() {\r\n        //var doDraw = this.setPosition();\r\n        //\tthis.setDom('fill', 'url(#' + 'patternFill' + this.graph._creation + ')')\r\n\r\n        if ( this.position != this.doDraw ) {\r\n          this.group.setAttribute( \"visibility\", this.position ? \"visible\" : 'hidden' );\r\n          this.doDraw = this.position;\r\n        }\r\n      },\r\n  */\r\n  applyPosition() {\r\n\r\n    if ( !this.serie ) {\r\n      return;\r\n    }\r\n\r\n    var posXY = this.computePosition( 0 ),\r\n      posXY2 = this.computePosition( 1 ),\r\n      w = Math.abs( posXY.x - posXY2.x ),\r\n      x = Math.min( posXY.x, posXY2.x );\r\n\r\n    //  this.reversed = x == posXY2.x;\r\n\r\n    if ( w < 2 || x + w < 0 || x > this.graph.getDrawingWidth() ) {\r\n      this.setDom( 'd', '' );\r\n      return false;\r\n    }\r\n\r\n    var v1 = this.serie.getClosestPointToXY( this.getPosition( 0 ).x ),\r\n      v2 = this.serie.getClosestPointToXY( this.getPosition( 1 ).x ),\r\n      v3,\r\n      i,\r\n      j,\r\n      init,\r\n      max,\r\n      k,\r\n      x,\r\n      y,\r\n      firstX,\r\n      firstY,\r\n      currentLine,\r\n      maxY = 0,\r\n      minY = Number.MAX_VALUE;\r\n\r\n    if ( !v1 || !v2 ) {\r\n      return false;\r\n    }\r\n\r\n    if ( v1.xBeforeIndex > v2.xBeforeIndex ) {\r\n      v3 = v1;\r\n      v1 = v2;\r\n      v2 = v3;\r\n\r\n      //this.handleSelected = ( this.handleSelected == 1 ) ? 2 : 1;\r\n    }\r\n\r\n    this.counter = 0;\r\n\r\n    for ( i = v1.dataIndex; i <= v2.dataIndex; i++ ) {\r\n      this.currentLine = '';\r\n      init = i == v1.dataIndex ? v1.xBeforeIndexArr : 0;\r\n      max = i == v2.dataIndex ? v2.xBeforeIndexArr : this.serie.data[ i ].length;\r\n      k = 0;\r\n\r\n      if ( init == max ) {\r\n        max++;\r\n      }\r\n\r\n      for ( j = init; j <= max; j += 2 ) {\r\n\r\n        x = this.serie.getX( this.serie.data[ i ][ j + 0 ] );\r\n        y = this.serie.getY( this.serie.data[ i ][ j + 1 ] );\r\n\r\n        maxY = Math.max( this.serie.data[ i ][ j + 1 ], maxY );\r\n        minY = Math.min( this.serie.data[ i ][ j + 1 ], minY );\r\n\r\n        if ( j == init ) {\r\n          this.firstX = x;\r\n          this.firstY = y;\r\n        }\r\n\r\n        if ( k > 0 ) {\r\n          this.currentLine += ` L ${ x } ${ y } `;\r\n        } else {\r\n          this.currentLine += ` M ${ x } ${ y } `;\r\n        }\r\n\r\n        //this.serie._addPoint( x, y, false, this.currentLine );\r\n        k++;\r\n\r\n      }\r\n\r\n      this.lastX = x;\r\n      this.lastY = y;\r\n\r\n      if ( !this.firstX || !this.firstY || !this.lastX || !this.lastY ) {\r\n        return;\r\n      }\r\n\r\n      this.currentLine += ` V ${ this.getYAxis().getPx( 0 ) } H ${ this.firstX } z`;\r\n      this.setDom( 'd', this.currentLine );\r\n    }\r\n\r\n    this.maxY = this.serie.getY( maxY );\r\n    this.setHandles();\r\n\r\n    this.changed();\r\n\r\n    return true;\r\n  }\r\n\r\n  setHandles() {\r\n\r\n    if ( !this.firstX ) {\r\n      return;\r\n    }\r\n\r\n    var posXY = this.computePosition( 0 ),\r\n      posXY2 = this.computePosition( 1 );\r\n\r\n    if ( posXY.x < posXY2.x ) {\r\n\r\n      this.handles[ 1 ].setAttribute( 'x1', this.firstX );\r\n      this.handles[ 1 ].setAttribute( 'x2', this.firstX );\r\n\r\n      this.handles[ 2 ].setAttribute( 'x1', this.lastX );\r\n      this.handles[ 2 ].setAttribute( 'x2', this.lastX );\r\n\r\n    } else {\r\n\r\n      this.handles[ 1 ].setAttribute( 'x1', this.lastX );\r\n      this.handles[ 1 ].setAttribute( 'x2', this.lastX );\r\n\r\n      this.handles[ 2 ].setAttribute( 'x1', this.firstX );\r\n      this.handles[ 2 ].setAttribute( 'x2', this.firstX );\r\n\r\n    }\r\n    this.handles[ 1 ].setAttribute( 'y1', this.getYAxis().getMaxPx() );\r\n    this.handles[ 1 ].setAttribute( 'y2', this.serie.getY( 0 ) );\r\n\r\n    this.handles[ 2 ].setAttribute( 'y1', this.getYAxis().getMaxPx() );\r\n    this.handles[ 2 ].setAttribute( 'y2', this.serie.getY( 0 ) );\r\n  }\r\n}\r\n\r\nexport default ShapeSurfaceUnderCurve;","import GraphShape from './graph.shape.js';\r\n\r\n/**\r\n * Represents a line\r\n * @extends Shape\r\n * @see Graph#newShape\r\n */\r\nclass ShapeLine extends GraphShape {\r\n  constructor( graph, options ) {\r\n    super( graph, options );\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createDom() {\r\n    this._dom = document.createElementNS( this.graph.ns, 'line' );\r\n\r\n    if ( !this.getStrokeColor() ) {\r\n      this.setStrokeColor( 'black' );\r\n    }\r\n\r\n    if ( this.getStrokeWidth() === undefined ) {\r\n      this.setStrokeWidth( 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the handles\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createHandles() {\r\n    this._createHandles( 2, 'rect', {\r\n      transform: 'translate(-3 -3)',\r\n      width: 6,\r\n      height: 6,\r\n      stroke: 'black',\r\n      fill: 'white',\r\n      cursor: 'nwse-resize'\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Recalculates the positions and applies them\r\n   * @private\r\n   * @return {Boolean} Whether the shape should be redrawn\r\n   */\r\n  applyPosition() {\r\n    var position = this.calculatePosition( 0 );\r\n    var position2 = this.calculatePosition( 1 );\r\n\r\n    if ( !position || !position.x || !position.y ) {\r\n      return;\r\n    }\r\n\r\n    this.setDom( 'x2', position.x );\r\n    this.setDom( 'y2', position.y );\r\n\r\n    this.setDom( 'y1', position2.y );\r\n    this.setDom( 'x1', position2.x );\r\n\r\n    this.currentPos2x = position2.x;\r\n    this.currentPos2y = position2.y;\r\n\r\n    this.currentPos1x = position.x;\r\n    this.currentPos1y = position.y;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Handles mouse move events\r\n   * @private\r\n   */\r\n  handleMouseMoveImpl( e, deltaX, deltaY, deltaXPx, deltaYPx ) {\r\n    if ( this.isLocked() ) {\r\n      return;\r\n    }\r\n\r\n    var pos = this.getPosition( 0 );\r\n    var pos2 = this.getPosition( 1 );\r\n\r\n    var posToChange;\r\n    if ( this.handleSelected == 1 ) {\r\n      posToChange = pos;\r\n    } else if ( this.handleSelected == 2 ) {\r\n      posToChange = pos2;\r\n    }\r\n\r\n    if ( posToChange ) {\r\n      if ( !this._data.vertical ) {\r\n        posToChange.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      }\r\n\r\n      if ( !this._data.horizontal ) {\r\n        posToChange.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n      }\r\n    }\r\n\r\n    if ( this.moving ) {\r\n      console.log( this._data );\r\n      // If the pos2 is defined by a delta, no need to move them\r\n      if ( pos.x && !this._data.noX ) {\r\n        pos.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      }\r\n      if ( pos.y && !this._data.noY ) {\r\n        pos.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n      }\r\n\r\n      // If the pos2 is defined by a delta, no need to move them\r\n      if ( pos2.x && !this._data.noX ) {\r\n        pos2.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      }\r\n      if ( pos2.y && !this._data.noY ) {\r\n        pos2.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n      }\r\n    }\r\n\r\n    if ( this._data.forcedCoords ) {\r\n      var forced = this._data.forcedCoords;\r\n\r\n      if ( forced.y !== undefined ) {\r\n        if ( typeof forced.y == 'function' ) {\r\n          pos2.y = pos.y = forced.y( this );\r\n        } else {\r\n          pos2.y = forced.y;\r\n          pos.y = forced.y;\r\n        }\r\n      }\r\n\r\n      if ( forced.x !== undefined ) {\r\n        if ( typeof forced.x == 'function' ) {\r\n          pos2.x = pos.x = forced.x( this );\r\n        } else {\r\n          pos2.x = forced.x;\r\n          pos.x = forced.x;\r\n        }\r\n      }\r\n    }\r\n\r\n    if ( this.rectEvent ) {\r\n      this.setEventReceptacle();\r\n    }\r\n\r\n    this.redraw();\r\n    this.changed();\r\n    this.setHandles();\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets the handle position\r\n   * @private\r\n   */\r\n  setHandles() {\r\n    if ( !this.areHandlesInDom() ) {\r\n      return;\r\n    }\r\n\r\n    if ( isNaN( this.currentPos1x ) ) {\r\n      return;\r\n    }\r\n\r\n    this.handles[ 1 ].setAttribute( 'x', this.currentPos1x );\r\n    this.handles[ 1 ].setAttribute( 'y', this.currentPos1y );\r\n\r\n    this.handles[ 2 ].setAttribute( 'x', this.currentPos2x );\r\n    this.handles[ 2 ].setAttribute( 'y', this.currentPos2y );\r\n  }\r\n\r\n  /**\r\n   * Creates an line receptacle with the coordinates of the line, but continuous and thicker\r\n   * @return {Shape} The current shape\r\n   */\r\n  setEventReceptacle() {\r\n    if ( !this.currentPos1x ) {\r\n      return;\r\n    }\r\n\r\n    if ( !this.rectEvent ) {\r\n      this.rectEvent = document.createElementNS( this.graph.ns, 'line' );\r\n      this.rectEvent.setAttribute( 'pointer-events', 'stroke' );\r\n      this.rectEvent.setAttribute( 'stroke', 'transparent' );\r\n      this.rectEvent.jsGraphIsShape = this;\r\n      this.group.appendChild( this.rectEvent );\r\n    }\r\n\r\n    this.rectEvent.setAttribute( 'x1', this.currentPos1x );\r\n    this.rectEvent.setAttribute( 'y1', this.currentPos1y );\r\n    this.rectEvent.setAttribute( 'x2', this.currentPos2x );\r\n    this.rectEvent.setAttribute( 'y2', this.currentPos2y );\r\n    this.rectEvent.setAttribute(\r\n      'stroke-width',\r\n      this.getProp( 'strokeWidth' ) + 2\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShapeLine;","import ShapeLine from './graph.shape.line.js';\r\n\r\n/**\r\n *  Displays an arrow\r\n *  @extends GraphShapeLine\r\n */\r\nclass ShapeArrow extends ShapeLine {\r\n\r\n  constructor( graph ) {\r\n\r\n    super( graph );\r\n\r\n  }\r\n\r\n  createDom() {\r\n\r\n    this._dom = document.createElementNS( this.graph.ns, 'line' );\r\n    this._dom.setAttribute( 'marker-end', `url(#arrow${ this.graph._creation })` );\r\n\r\n    this.createHandles( this.nbHandles, 'rect', {\r\n      transform: 'translate(-3 -3)',\r\n      width: 6,\r\n      height: 6,\r\n      stroke: 'black',\r\n      fill: 'white',\r\n      cursor: 'nwse-resize'\r\n    } );\r\n\r\n    this.setStrokeColor( 'black' );\r\n    this.setStrokeWidth( 1 );\r\n  }\r\n}\r\n\r\nexport default ShapeArrow;","import * as util from '../graph.util.js';\r\n\r\nimport Shape from './graph.shape.js';\r\n\r\n/**\r\n * Displays an ellipse\r\n * @extends Shape\r\n */\r\nclass ShapeEllipse extends Shape {\r\n\r\n  constructor( graph, options ) {\r\n    super( graph, options );\r\n  }\r\n\r\n  createDom() {\r\n    this._dom = document.createElementNS( this.graph.ns, 'ellipse' );\r\n  }\r\n\r\n  applyPosition() {\r\n\r\n    var pos = this.computePosition( 0 );\r\n    if ( !pos ) {\r\n      return;\r\n    }\r\n    this.setDom( 'cx', pos.x || 0 );\r\n    this.setDom( 'cy', pos.y || 0 );\r\n\r\n    let posR = this.graph.newPosition( {\r\n\r\n      dx: this.getProp( 'rx' ),\r\n      dy: this.getProp( 'ry' ) || this.getProp( 'rx' )\r\n\r\n    } );\r\n\r\n    let posComputed = this.calculatePosition( posR );\r\n\r\n    this.setDom( 'rx', Math.abs( posComputed.x ) || 0 );\r\n    this.setDom( 'ry', Math.abs( posComputed.y ) || 0 );\r\n    return true;\r\n  }\r\n\r\n  setR( rx, ry ) {\r\n    this.setProp( 'rx', rx );\r\n    this.setProp( 'ry', ry );\r\n    return this;\r\n  }\r\n\r\n  handleMouseUpImpl() {\r\n    this.triggerChange();\r\n  }\r\n\r\n  handleMouseMoveImpl( e, deltaX, deltaY, deltaXPx, deltaYPx ) {\r\n\r\n  }\r\n}\r\n\r\nexport default ShapeEllipse;","import GraphShape from './graph.shape.js';\r\n\r\n/**\r\n * Blank shape used to display label\r\n * Use myShapelabel.setLabelText(); and associated methods\r\n * @extend GraphShape\r\n */\r\nclass ShapeLabel extends GraphShape {\r\n\r\n  constructor( graph, options ) {\r\n\r\n    super( graph, options );\r\n  }\r\n\r\n  createDom() {\r\n    return false;\r\n  }\r\n\r\n  applyPosition() {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default ShapeLabel;","import Shape from './graph.shape.js';\r\n\r\n/**\r\n * Represents a line that extends the Shape class. Used by the plugin {@link PluginSerieLineDifference}\r\n * @extends Shape\r\n * @see Graph#newShape\r\n */\r\nclass ShapePolyline extends Shape {\r\n\r\n  constructor( graph, options ) {\r\n    super( graph, options );\r\n\r\n    this.setProp( 'fillColor', 'none' );\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createDom() {\r\n\r\n    this._dom = document.createElementNS( this.graph.ns, 'path' );\r\n\r\n    if ( !this.getStrokeColor() ) {\r\n      this.setStrokeColor( 'black' );\r\n    }\r\n\r\n    if ( this.getStrokeWidth() === undefined ) {\r\n      this.setStrokeWidth( 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * No handles for the polyline\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createHandles() {}\r\n\r\n  /**\r\n   *  Force the points of the polyline already computed in pixels\r\n   *  @param {String} a SVG string to be used in the ```d``` attribute of the path.\r\n   *  @return {ShapePolyline} The current polyline instance\r\n   */\r\n  setPointsPx( points ) {\r\n    //  this.setProp( 'pxPoints', points );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Recalculates the positions and applies them\r\n   * @private\r\n   * @return {Boolean} Whether the shape should be redrawn\r\n   */\r\n  /**\r\n   * Recalculates the positions and applies them\r\n   * @private\r\n   * @return {Boolean} Whether the shape should be redrawn\r\n   */\r\n  applyPosition() {\r\n\r\n    let str = '';\r\n    let index = 0;\r\n    while ( true ) {\r\n\r\n      let pos = this.getPosition( index );\r\n      if ( pos === undefined ) {\r\n        break;\r\n      }\r\n\r\n      let posXY;\r\n      if ( this.serie ) {\r\n        posXY = pos.compute( this.graph, this.serie.getXAxis(), this.serie.getYAxis(), this.serie );\r\n      } else {\r\n        posXY = pos.compute( this.graph, this.getXAxis(), this.getYAxis() );\r\n      }\r\n\r\n      if ( isNaN( posXY.x ) || isNaN( posXY.y ) ) {\r\n        return;\r\n      }\r\n\r\n      if ( index == 0 ) {\r\n        str += ' M ';\r\n      } else {\r\n        str += ' L ';\r\n      }\r\n\r\n      str += `${posXY.x} ${posXY.y}`;\r\n      index++;\r\n    }\r\n\r\n    this.setDom( 'd', str );\r\n\r\n    this.changed();\r\n    return true;\r\n  }\r\n}\r\n/*\r\n  applyPosition() {\r\n\r\n    let pxPoints;\r\n    let pos = this.computePosition( 0 );\r\n    if ( !pos ) {\r\n      return;\r\n    }\r\n    if ( ( pxPoints = this.getProp( 'pxPoints' ) ) ) {\r\n\r\n      pxPoints = ` M ${ pos.x } ${ pos.y } ${ pxPoints}`;\r\n      this.setDom( 'd', pxPoints );\r\n\r\n    } else if ( this.points ) {\r\n\r\n      var xAxis, yAxis;\r\n\r\n      if ( this.serie ) {\r\n\r\n        xAxis = this.serie.getXAxis();\r\n        yAxis = this.serie.getYAxis();\r\n\r\n      } else if ( this.xAxis && this.yAxis ) {\r\n\r\n        xAxis = this.xAxis;\r\n        yAxis = this.yAxis;\r\n      }\r\n\r\n      this.setDom( 'd', `M ${ this.points.map( function( p ) {\r\n        return `${xAxis.getPx( p[ 0 ] ) }, ${ yAxis.getPx( p[ 1 ] )}`;\r\n      } ).join( ' L ' )}` );\r\n    }\r\n\r\n    this.changed();\r\n    return true;\r\n  }*/\r\n//}\r\n\r\nexport default ShapePolyline;","import Shape from './graph.shape.js';\r\n\r\n/**\r\n * Represents a line that extends the Shape class. Used by the plugin {@link PluginSerieLineDifference}\r\n * @extends Shape\r\n * @see Graph#newShape\r\n */\r\nclass ShapePolyline extends Shape {\r\n\r\n  constructor( graph, options ) {\r\n    super( graph, options );\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createDom() {\r\n\r\n    this._dom = document.createElementNS( this.graph.ns, 'path' );\r\n\r\n    if ( !this.getStrokeColor() ) {\r\n      this.setStrokeColor( 'black' );\r\n    }\r\n\r\n    if ( this.getStrokeWidth() === undefined ) {\r\n      this.setStrokeWidth( 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * No handles for the polyline\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createHandles() {}\r\n\r\n  /**\r\n   *  Force the points of the polyline already computed in pixels\r\n   *  @param {String} a SVG string to be used in the ```d``` attribute of the path.\r\n   *  @return {ShapePolyline} The current polyline instance\r\n   */\r\n  setPointsPx( points ) {\r\n    this.setProp( 'pxPoints', points );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Recalculates the positions and applies them\r\n   * @private\r\n   * @return {Boolean} Whether the shape should be redrawn\r\n   */\r\n  applyPosition() {\r\n\r\n    let str = '';\r\n    let index = 0;\r\n    while ( true ) {\r\n\r\n      let pos = this.getPosition( index );\r\n      if ( pos === undefined ) {\r\n        break;\r\n      }\r\n\r\n      let posXY;\r\n      if ( this.serie ) {\r\n        posXY = pos.compute( this.graph, this.serie.getXAxis(), this.serie.getYAxis(), this.serie );\r\n      } else {\r\n        posXY = pos.compute( this.graph, this.getXAxis(), this.getYAxis() );\r\n      }\r\n\r\n      if ( isNaN( posXY.x ) || isNaN( posXY.y ) ) {\r\n        return;\r\n      }\r\n\r\n      if ( index == 0 ) {\r\n        str += ' M ';\r\n      } else {\r\n        str += ' L ';\r\n      }\r\n\r\n      str += `${posXY.x} ${posXY.y}`;\r\n      index++;\r\n    }\r\n\r\n    str += 'z';\r\n\r\n    this.setDom( 'd', str );\r\n\r\n    this.changed();\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default ShapePolyline;","import GraphPosition from '../graph.position.js';\r\n\r\nimport Shape from './graph.shape.js';\r\n\r\n/**\r\n * Displays an integral with NMR style\r\n * @extends ShapeSurfaceUnderCurve\r\n */\r\nclass ShapeNMRIntegral extends Shape {\r\n\r\n  constructor( graph, options ) {\r\n\r\n    super( graph, options );\r\n\r\n    this.nbHandles = 2;\r\n  }\r\n\r\n  createDom() {\r\n    this._dom = document.createElementNS( this.graph.ns, 'path' );\r\n    this._domShadow = document.createElementNS( this.graph.ns, 'path' );\r\n    this._domShadow.jsGraphIsShape = this;\r\n    this._dom.setAttribute( 'pointer-events', 'stroke' );\r\n    this._domShadow.setAttribute( 'pointer-events', 'stroke' );\r\n    this._domShadow.setAttribute( 'stroke-width', '12' );\r\n    this._domShadow.setAttribute( 'fill', 'transparent' );\r\n    this._domShadow.setAttribute( 'stroke', 'transparent' );\r\n    this.group.appendChild( this._domShadow );\r\n  }\r\n\r\n  initImpl() {\r\n    this.setFillColor( 'transparent' );\r\n    this.setStrokeColor( 'black' );\r\n  }\r\n\r\n  createHandles() {\r\n\r\n    this._createHandles( 2, 'rect', {\r\n      transform: 'translate(-3 -3)',\r\n      width: 6,\r\n      height: 6,\r\n      stroke: 'black',\r\n      fill: 'white'\r\n    } );\r\n\r\n    this.handles[ 1 ].setAttribute( 'fill', 'red' );\r\n  }\r\n\r\n  xor( a, b ) {\r\n    return ( a && !b ) || ( !a && b );\r\n  }\r\n\r\n  applyPosition() {\r\n\r\n    let\r\n      x,\r\n      y,\r\n      xVal,\r\n      yVal,\r\n      axis = this.getAxis(),\r\n      points = [];\r\n\r\n    let currentLine = '',\r\n      baseLine = this.getProp( 'baseLine', 0 ) || 300,\r\n      ratio;\r\n\r\n    if ( !this.serie ) {\r\n      throw 'No serie exists for this shape';\r\n    }\r\n    /*\r\n        this.sortPositions( ( a, b ) => {\r\n          return a.x - b.x;\r\n        } );\r\n\r\n        */\r\n    let pos1 = this.getPosition( 0 );\r\n    let pos2 = this.getPosition( 1 );\r\n\r\n    if ( ( pos1.x < this.serie.getXAxis().getCurrentMin() && pos2.x < this.serie.getXAxis().getCurrentMin() ) || ( pos1.x > this.serie.getXAxis().getCurrentMax() && pos2.x > this.serie.getXAxis().getCurrentMax() ) ) {\r\n      this.setDom( 'd', '' );\r\n      this._domShadow.setAttribute( 'd', '' );\r\n\r\n      this.hideLabel( 0 );\r\n      return false;\r\n    }\r\n\r\n    this.showLabel( 0 );\r\n\r\n    let sum = 0;\r\n\r\n    let j;\r\n    let waveform = this.serie.getWaveform();\r\n\r\n    if ( !waveform ) {\r\n      return;\r\n    }\r\n\r\n    let index1 = waveform.getIndexFromX( pos1[ axis ], true, Math.floor ),\r\n      index2 = waveform.getIndexFromX( pos2[ axis ], true, Math.ceil ),\r\n      index3,\r\n      flipped = false;\r\n\r\n    if ( index1 == index2 ) { // At least one px please !\r\n      if ( waveform.getReductionType() == 'aggregate' ) {\r\n        index2 += 4; // Aggregated state\r\n      } else {\r\n        index2++; // Non aggregated state\r\n      }\r\n    }\r\n\r\n    if ( index2 < index1 ) {\r\n      index3 = index1;\r\n      index1 = index2;\r\n      index2 = index3;\r\n      flipped = true;\r\n    }\r\n\r\n    let firstX, firstY, firstXVal, firstYVal, lastX, lastXVal, lastY, lastYVal;\r\n    let data = waveform.getDataInUse();\r\n\r\n    let condition, incrementation;\r\n\r\n    let normalSums = true;\r\n    if ( waveform.getReductionType() == 'aggregate' ) {\r\n      normalSums = false;\r\n    }\r\n\r\n    if (\r\n      ( waveform.getXMonotoneousAscending() && // Ascending\r\n        1 == 1 ) ||\r\n      ( !waveform.getXMonotoneousAscending() && // Ascending\r\n        1 == 2 )\r\n    ) {\r\n\r\n      j = index2;\r\n      condition = true;\r\n      incrementation = -1;\r\n\r\n    } else {\r\n\r\n      j = index1;\r\n      condition = false;\r\n      incrementation = 1;\r\n    }\r\n\r\n    for ( ; condition ? j >= index1 : j <= index2; j += incrementation ) {\r\n\r\n      xVal = waveform.getX( j, true );\r\n      yVal = waveform.getY( j, true );\r\n\r\n      x = this.serie.getX( xVal );\r\n      y = this.serie.getY( yVal );\r\n\r\n      /*\r\n            if ( ! normalSums && j % 4 == 0 && j >= index1 && data.sums ) { // Sums are located every 4 element\r\n\r\n              sum += data.sums[ j ];// * ( waveform.getX( j, true ) - waveform.getX( j - 3, true ) ); // y * (out-in)\r\n\r\n            } else if( normalSums ) {\r\n      */\r\n      sum += waveform.getY( j, true ); // * ( waveform.getX( j, true ) - waveform.getX( j - 1, true ) ); // y * (out-in)\r\n      //}\r\n\r\n      if ( !firstX ) {\r\n\r\n        firstX = x;\r\n        firstY = y;\r\n        firstXVal = waveform.getX( j );\r\n        firstYVal = waveform.getY( j );\r\n      }\r\n\r\n      if ( lastX == undefined ) {\r\n\r\n        lastX = x;\r\n        lastY = y;\r\n        lastXVal = waveform.getX( j );\r\n        lastYVal = waveform.getY( j );\r\n        continue;\r\n      }\r\n\r\n      if ( x == lastX && y == lastY ) {\r\n        //continue;\r\n      }\r\n\r\n      lastX = x;\r\n      lastY = y;\r\n      //console.log( data, data[ j ] );\r\n\r\n      points.push( [ x, y, sum ] );\r\n      lastXVal = xVal;\r\n    }\r\n\r\n    lastXVal = false;\r\n    lastYVal = false;\r\n    lastX = false;\r\n    lastY = false;\r\n\r\n    if ( sum == 0 ) {\r\n      sum = 1;\r\n    }\r\n\r\n    this._sumVal = waveform.integrate( pos1.x, pos2.x );\r\n\r\n    if ( !this.ratio ) {\r\n      // 150px / unit\r\n      ratio = 200 / sum;\r\n\r\n    } else {\r\n      // Already existing\r\n      ratio = this.ratio * ( this.sumVal / sum );\r\n    }\r\n    let py;\r\n\r\n    if ( points.length == 0 ) {\r\n      return;\r\n    }\r\n\r\n    for ( var i = 0, l = points.length; i < l; i++ ) {\r\n\r\n      py = baseLine - ( points[ i ][ 2 ] ) * ratio;\r\n\r\n      if ( i > 0 && ( ( points[ i - 1 ][ 2 ] > sum / 2 && points[ i ][ 2 ] <= sum / 2 ) || ( points[ i - 1 ][ 2 ] < sum / 2 && points[ i ][ 2 ] >= sum / 2 ) ) ) {\r\n\r\n        let pos = baseLine - ( points[ i - 1 ][ 2 ] + points[ i ][ 2 ] ) / 2 * ratio;\r\n\r\n        this.setPosition( {\r\n          x: `${points[ i ][ 0 ] }px`,\r\n          y: `${pos }px`\r\n\r\n        }, 3 );\r\n\r\n        this.setLabelPosition( this.getPosition( 3 ), 0 );\r\n      }\r\n\r\n      currentLine += ` L ${ points[ i ][ 0 ] }, ${ py } `;\r\n\r\n      this.lastPointX = points[ i ][ 0 ];\r\n      this.lastPointY = py;\r\n    }\r\n\r\n    this.points = points;\r\n    this._sum = sum;\r\n\r\n    if ( this.serie.isFlipped() ) {\r\n      currentLine = ` M ${ baseLine }, ${ firstX } ${ currentLine}`;\r\n    } else {\r\n      currentLine = ` M ${ firstX }, ${ baseLine } ${ currentLine}`;\r\n    }\r\n\r\n    this.firstPointX = firstX;\r\n    this.firstPointY = baseLine;\r\n\r\n    this.setDom( 'd', currentLine );\r\n    this._domShadow.setAttribute( 'd', currentLine );\r\n\r\n    this.firstX = firstX;\r\n    this.firstY = firstY;\r\n    /*\r\n          if ( this._selected ) {\r\n            this.select();\r\n          }\r\n\r\n          this.setHandles();*/\r\n\r\n    ( this.serie.ratioLabel && this.updateIntegralValue( this.serie.ratioLabel ) ) || this.updateLabels();\r\n\r\n    this.changed();\r\n    this.handleCondition = !this.xor( incrementation == -1, flipped );\r\n    this.setHandles();\r\n\r\n    this.updateIntegralValue();\r\n\r\n    return true;\r\n  }\r\n\r\n  updateIntegralValue( ratioLabel = this.serie.ratioLabel, forceValue ) {\r\n    console.log( ratioLabel );\r\n    if ( ratioLabel ) {\r\n      this.serie.ratioLabel = ratioLabel;\r\n    }\r\n\r\n    if ( !isNaN( forceValue ) && !isNaN( this.sumVal ) && this.sumVal ) {\r\n      this.serie.ratioLabel = forceValue / this.sumVal;\r\n    }\r\n\r\n    this.setLabelText( ratioLabel ? ( Math.round( 100 * this.sumVal * ratioLabel ) / 100 ).toPrecision( 3 ) : 'N/A', 0 );\r\n    this.updateLabels();\r\n    return this.serie.ratioLabel;\r\n  }\r\n\r\n  getAxis() {\r\n    return this._data.axis || 'x';\r\n  }\r\n\r\n  /**\r\n   * User to screen coordinate transform. In (unit)/(px), (unit) being the unit of the integral (x * y)\r\n   * @type {Number}\r\n   */\r\n  set ratio( r ) {\r\n    this._ratio = r;\r\n  }\r\n\r\n  get ratio() {\r\n    return this._ratio;\r\n  }\r\n\r\n  get sum() {\r\n    return this._sum;\r\n  }\r\n\r\n  get sumVal() {\r\n    return this._sumVal;\r\n  }\r\n\r\n  selectStyle() {\r\n    this.setDom( 'stroke-width', '2px' );\r\n  }\r\n\r\n  selectHandles() {} // Cancel areaundercurve\r\n\r\n  setHandles() {\r\n\r\n    if ( this.points == undefined ) {\r\n      return;\r\n    }\r\n\r\n    if ( !this.isSelected() ) {\r\n      return;\r\n    }\r\n\r\n    this.addHandles();\r\n\r\n    if ( this.handleCondition ) {\r\n\r\n      this.handles[ 1 ].setAttribute( 'x', this.firstPointX );\r\n      this.handles[ 1 ].setAttribute( 'y', this.firstPointY );\r\n      this.handles[ 2 ].setAttribute( 'x', this.lastPointX );\r\n      this.handles[ 2 ].setAttribute( 'y', this.lastPointY );\r\n\r\n    } else {\r\n\r\n      this.handles[ 2 ].setAttribute( 'x', this.firstPointX );\r\n      this.handles[ 2 ].setAttribute( 'y', this.firstPointY );\r\n      this.handles[ 1 ].setAttribute( 'x', this.lastPointX );\r\n      this.handles[ 1 ].setAttribute( 'y', this.lastPointY );\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles mouse move events\r\n   * @private\r\n   */\r\n  handleMouseMoveImpl( e, deltaX, deltaY, deltaXPx, deltaYPx ) {\r\n\r\n    if ( this.isLocked() ) {\r\n      return;\r\n    }\r\n\r\n    var pos = this.getPosition( 0 );\r\n    var pos2 = this.getPosition( 1 );\r\n\r\n    var posToChange;\r\n\r\n    if ( this.handleSelected == 1 ) {\r\n\r\n      posToChange = pos;\r\n\r\n    } else if ( this.handleSelected == 2 ) {\r\n\r\n      posToChange = pos2;\r\n    }\r\n\r\n    if ( posToChange ) {\r\n\r\n      if ( !this._data.vertical ) {\r\n        posToChange.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      }\r\n    }\r\n\r\n    if ( this.moving ) {\r\n\r\n      // If the pos2 is defined by a delta, no need to move them\r\n      if ( pos.x ) {\r\n        pos.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      }\r\n\r\n      // If the pos2 is defined by a delta, no need to move them\r\n      if ( pos2.x ) {\r\n        pos2.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      }\r\n    }\r\n\r\n    if ( this.rectEvent ) {\r\n      this.setEventReceptacle();\r\n    }\r\n\r\n    this.redraw();\r\n    this.changed();\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default ShapeNMRIntegral;","import * as util from '../graph.util.js';\r\n\r\nimport GraphShape from './graph.shape.js';\r\n\r\n/**\r\n * Represents a rectangle that extends the Shape class\r\n * @class ShapeRectangle\r\n * @augments Shape\r\n * @see Graph#newShape\r\n */\r\nclass ShapeRectangle extends GraphShape {\r\n  constructor( graph, options ) {\r\n    super( graph, options );\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createDom() {\r\n    this._dom = document.createElementNS( this.graph.ns, 'rect' );\r\n\r\n    if ( !this.getStrokeColor() ) {\r\n      this.setStrokeColor( 'black' );\r\n    }\r\n\r\n    if ( this.getStrokeWidth() === undefined ) {\r\n      this.setStrokeWidth( 1 );\r\n    }\r\n\r\n    if ( !this.getFillColor() ) {\r\n      this.setFillColor( 'transparent' );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Creates the Handles\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createHandles() {\r\n    if ( !this.hasHandles() ) {\r\n      return;\r\n    }\r\n\r\n    /*\r\n          this._data.handles = this._data.handles || {\r\n            type: 'corners'\r\n          };\r\n    */\r\n\r\n    var handles = this.getProp( 'handles' );\r\n\r\n    if ( typeof handles != 'object' ) {\r\n      handles = {};\r\n    }\r\n\r\n    if ( !handles.type ) {\r\n      handles.type = 'corners';\r\n    }\r\n\r\n    switch ( handles.type ) {\r\n      case 'sides':\r\n        util.extend( handles, {\r\n          sides: {\r\n            top: true,\r\n            bottom: true,\r\n            left: true,\r\n            right: true\r\n          }\r\n        } );\r\n\r\n        var j = 0;\r\n        for ( var i in handles.sides ) {\r\n          if ( handles.sides[ i ] ) {\r\n            j++;\r\n          }\r\n        }\r\n\r\n        this._createHandles( j, 'g' ).map( function( g ) {\r\n          var r = document.createElementNS( self.graph.ns, 'rect' );\r\n          r.setAttribute( 'x', '-3' );\r\n          r.setAttribute( 'width', '6' );\r\n          r.setAttribute( 'y', '-6' );\r\n          r.setAttribute( 'height', '12' );\r\n          r.setAttribute( 'stroke', 'black' );\r\n          r.setAttribute( 'fill', 'white' );\r\n          r.setAttribute( 'cursor', 'pointer' );\r\n\r\n          g.appendChild( r );\r\n        } );\r\n\r\n        var j = 1;\r\n\r\n        for ( var i in handles.sides ) {\r\n          if ( handles.sides[ i ] ) {\r\n            this.handles[ i ] = this[ `handle${j}` ];\r\n            this.sides[ j ] = i;\r\n            j++;\r\n          }\r\n        }\r\n\r\n        break;\r\n\r\n      case 'corners':\r\n        this._createHandles( 4, 'rect', {\r\n          transform: 'translate(-3 -3)',\r\n          width: 6,\r\n          height: 6,\r\n          stroke: 'black',\r\n          fill: 'white'\r\n        } );\r\n\r\n        if ( this.handles ) {\r\n          this.handles[ 2 ].setAttribute( 'cursor', 'nesw-resize' );\r\n          this.handles[ 4 ].setAttribute( 'cursor', 'nesw-resize' );\r\n\r\n          this.handles[ 1 ].setAttribute( 'cursor', 'nwse-resize' );\r\n          this.handles[ 3 ].setAttribute( 'cursor', 'nwse-resize' );\r\n        }\r\n\r\n        break;\r\n\r\n      case 'seamlessX':\r\n        this._createHandles( 2, 'rect', {\r\n          transform: 'translate(-3 -3)',\r\n          stroke: 'transparent',\r\n          fill: 'transparent',\r\n          width: '20px',\r\n          cursor: 'ew-resize'\r\n        } );\r\n\r\n        break;\r\n    }\r\n\r\n    super.createHandles();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the position\r\n   * @memberof ShapeRectangle\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  applyPosition() {\r\n    var pos = this.computePosition( 0 ),\r\n      pos2 = this.computePosition( 1 ),\r\n      x,\r\n      y,\r\n      width,\r\n      height;\r\n\r\n    if ( !pos || !pos2 ) {\r\n      return;\r\n    }\r\n\r\n    if ( pos.x < pos2.x ) {\r\n      x = pos.x;\r\n      width = pos2.x - pos.x;\r\n    } else {\r\n      x = pos2.x;\r\n      width = pos.x - pos2.x;\r\n    }\r\n\r\n    if ( pos.y < pos2.y ) {\r\n      y = pos.y;\r\n      height = pos2.y - pos.y;\r\n    } else {\r\n      y = pos2.y;\r\n      height = pos.y - pos2.y;\r\n    }\r\n\r\n    this.currentX = x;\r\n    this.currentY = y;\r\n    this.currentW = width;\r\n    this.currentH = height;\r\n\r\n    if ( !isNaN( x ) && !isNaN( y ) && x !== false && y !== false ) {\r\n      this.setDom( 'width', width );\r\n      this.setDom( 'height', height );\r\n      this.setDom( 'x', x );\r\n      this.setDom( 'y', y );\r\n\r\n      this.setHandles();\r\n      this.updateMask();\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Implements mouse move event\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  handleMouseMoveImpl( e, deltaX, deltaY, deltaXPx, deltaYPx ) {\r\n    var handles = this.getProp( 'handles' );\r\n\r\n    if ( !this.moving && !this.handleSelected ) {\r\n      return;\r\n    }\r\n\r\n    var pos = this.getPosition( 0 );\r\n    var pos2 = this.getPosition( 1 );\r\n\r\n    var invX = this.getXAxis().isFlipped(),\r\n      invY = this.getYAxis().isFlipped(),\r\n      posX = pos.x,\r\n      posY = pos.y,\r\n      pos2X = pos2.x,\r\n      pos2Y = pos2.y;\r\n\r\n    if ( this.moving ) {\r\n      pos.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      pos.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n\r\n      pos2.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n      pos2.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n    } else {\r\n      switch ( handles.type ) {\r\n        case 'seamlessX':\r\n          // Do nothing for now\r\n\r\n          switch ( this.handleSelected ) {\r\n            case 1:\r\n              pos.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n              break;\r\n\r\n            case 2:\r\n              pos2.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n              break;\r\n          }\r\n\r\n          break;\r\n\r\n        case 'sides':\r\n          // Do nothing for now\r\n\r\n          switch ( this.sides[ this.handleSelected ] ) {\r\n            case 'left':\r\n              pos.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n              break;\r\n\r\n            case 'right':\r\n              pos2.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n              break;\r\n\r\n            case 'top':\r\n              pos.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n              break;\r\n\r\n            case 'bottom':\r\n              pos2.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n              break;\r\n          }\r\n\r\n          break;\r\n\r\n        case 'corners':\r\n        default:\r\n          if ( this.handleSelected == 1 ) {\r\n            pos.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n            pos.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n          } else if ( this.handleSelected == 2 ) {\r\n            pos2.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n            pos.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n          } else if ( this.handleSelected == 3 ) {\r\n            pos2.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n            pos2.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n          } else if ( this.handleSelected == 4 ) {\r\n            pos.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n            pos2.deltaPosition( 'y', deltaY, this.getYAxis() );\r\n          }\r\n\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.redraw();\r\n    this.changed();\r\n    this.setHandles();\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Places handles properly\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  setHandles() {\r\n    if ( this.isLocked() || ( !this.isSelectable() && !this._staticHandles ) ) {\r\n      return;\r\n    }\r\n\r\n    if ( !this.handlesInDom ) {\r\n      return;\r\n    }\r\n\r\n    var pos = this.computePosition( 0 );\r\n    var pos2 = this.computePosition( 1 );\r\n\r\n    var handles = this.getProp( 'handles' );\r\n\r\n    switch ( handles.type ) {\r\n      case 'seamlessX':\r\n        if ( this.handles[ 1 ] ) {\r\n          this.handles[ 1 ].setAttribute(\r\n            'transform',\r\n            `translate(-10) translate(${pos.x})`\r\n          );\r\n          this.handles[ 1 ].setAttribute( 'height', Math.abs( pos2.y - pos.y ) );\r\n          this.handles[ 1 ].setAttribute( 'y', Math.min( pos2.y, pos.y ) );\r\n        }\r\n\r\n        if ( this.handles[ 2 ] ) {\r\n          this.handles[ 2 ].setAttribute(\r\n            'transform',\r\n            `translate(-10)  translate(${pos2.x})`\r\n          );\r\n          this.handles[ 2 ].setAttribute( 'height', Math.abs( pos2.y - pos.y ) );\r\n          this.handles[ 2 ].setAttribute( 'y', Math.min( pos2.y, pos.y ) );\r\n        }\r\n\r\n        break;\r\n\r\n      case 'sides':\r\n        if ( this.handles.left ) {\r\n          this.handles.left.setAttribute(\r\n            'transform',\r\n            `translate(${this.currentX} ${this.currentY + this.currentH / 2})`\r\n          );\r\n        }\r\n\r\n        if ( this.handles.right ) {\r\n          this.handles.right.setAttribute(\r\n            'transform',\r\n            `translate( ${this.currentX + this.currentW} ${this.currentY +\r\n            this.currentH / 2})`\r\n          );\r\n        }\r\n\r\n        if ( this.handles.top ) {\r\n          this.handles.top.setAttribute(\r\n            'transform',\r\n            `translate( ${this.currentX + this.currentW / 2} ${this.currentY})`\r\n          );\r\n        }\r\n\r\n        if ( this.handles.bottom ) {\r\n          this.handles.bottom.setAttribute(\r\n            'transform',\r\n            `translate( ${this.currentX + this.currentW / 2} ${this.currentY +\r\n            this.currentH})`\r\n          );\r\n        }\r\n\r\n        break;\r\n\r\n      case 'corners':\r\n      default:\r\n        this.handles[ 1 ].setAttribute( 'x', pos.x );\r\n        this.handles[ 1 ].setAttribute( 'y', pos.y );\r\n\r\n        this.handles[ 2 ].setAttribute( 'x', pos2.x );\r\n        this.handles[ 2 ].setAttribute( 'y', pos.y );\r\n\r\n        this.handles[ 3 ].setAttribute( 'x', pos2.x );\r\n        this.handles[ 3 ].setAttribute( 'y', pos2.y );\r\n\r\n        this.handles[ 4 ].setAttribute( 'x', pos.x );\r\n        this.handles[ 4 ].setAttribute( 'y', pos2.y );\r\n\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ShapeRectangle;","import ShapeRect from './graph.shape.rect.js';\r\n\r\nclass ShapePeakIntegration2D extends ShapeRect {\r\n\r\n  constructor( graph, options ) {\r\n\r\n    super( graph, options );\r\n    this.nbHandles = 4;\r\n  }\r\n\r\n  createDom() {\r\n\r\n    this._dom = document.createElementNS( this.graph.ns, 'rect' );\r\n    this._dom.element = this;\r\n\r\n    this.createHandles( this.nbHandles, 'rect', {\r\n      transform: 'translate(-3 -3)',\r\n      width: 6,\r\n      height: 6,\r\n      stroke: 'black',\r\n      fill: 'white',\r\n      cursor: 'nwse-resize'\r\n    } );\r\n  }\r\n\r\n  redrawImpl() {\r\n\r\n    this.setPosition();\r\n    this.setHandles();\r\n    this.setBindableToDom( this._dom );\r\n  }\r\n\r\n}\r\n\r\nexport default ShapePeakIntegration2D;","import Shape from './graph.shape.js';\r\n\r\n/**\r\n *  Displays a cross\r\n *  @extends Shape\r\n */\r\nclass ShapeCross extends Shape {\r\n\r\n  constructor( graph, options ) {\r\n    super( graph, options );\r\n    this.nbHandles = 1;\r\n  }\r\n\r\n  /**\r\n   * Width of the cross, also available from the constructor\r\n   * @type {Number} width\r\n   */\r\n  get width() {\r\n    return this.options.width || 10;\r\n  }\r\n\r\n  set width( l ) {\r\n    this.options.width = l;\r\n  }\r\n\r\n  createDom() {\r\n\r\n    this._dom = document.createElementNS( this.graph.ns, 'path' );\r\n    this._dom.setAttribute( 'd', `M -${ this.width / 2 } 0 h ${ this.width } m -${ this.width / 2 } -${ this.width / 2 } v ${ this.width }` );\r\n\r\n  }\r\n\r\n  createHandles() {\r\n\r\n    this._createHandles( this.nbHandles, 'rect', {\r\n      transform: 'translate(-3 -3)',\r\n      width: 6,\r\n      height: 6,\r\n      stroke: 'black',\r\n      fill: 'white',\r\n      cursor: 'nwse-resize'\r\n    } );\r\n\r\n  }\r\n  applyPosition() {\r\n\r\n    var position = this.calculatePosition( 0 );\r\n    if ( !position || !position.x || !position.y ) {\r\n      return;\r\n    }\r\n\r\n    this.setDom( 'transform', `translate( ${ position.x }, ${ position.y })` );\r\n\r\n    this.currentPos1x = position.x;\r\n    this.currentPos1y = position.y;\r\n\r\n    return true;\r\n  }\r\n\r\n  redrawImpl() {\r\n\r\n    this.setHandles();\r\n  }\r\n\r\n  handleCreateImpl() {\r\n\r\n  }\r\n\r\n  handleMouseDownImpl( e ) {\r\n\r\n    this.moving = true;\r\n\r\n    return true;\r\n  }\r\n\r\n  handleMouseUpImpl() {\r\n\r\n    this.triggerChange();\r\n    return true;\r\n  }\r\n\r\n  handleMouseMoveImpl( e, deltaX, deltaY, deltaXPx, deltaYPx ) {\r\n\r\n    if ( this.isLocked() ) {\r\n      return;\r\n    }\r\n\r\n    var pos = this.getFromData( 'pos' );\r\n\r\n    if ( this.moving ) {\r\n\r\n      pos.x = this.graph.deltaPosition( pos.x, deltaX, this.getXAxis() );\r\n      pos.y = this.graph.deltaPosition( pos.y, deltaY, this.getYAxis() );\r\n    }\r\n\r\n    this.redrawImpl();\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n  setHandles() {\r\n\r\n    if ( !this.areHandlesInDom() ) {\r\n      return;\r\n    }\r\n\r\n    if ( isNaN( this.currentPos1x ) ) {\r\n      return;\r\n    }\r\n\r\n    this.handles[ 1 ].setAttribute( 'x', this.currentPos1x );\r\n    this.handles[ 1 ].setAttribute( 'y', this.currentPos1y );\r\n  }\r\n\r\n  selectStyle() {\r\n    this.setDom( 'stroke', 'red' );\r\n    this.setDom( 'stroke-width', '2' );\r\n  }\r\n}\r\n\r\nexport default ShapeCross;","import ShapeLine from './graph.shape.line.js';\r\n\r\n/**\r\n *  Shows a horizontal line with three little vertical bars. Very useful to demonstrate a peak start, end and middle value\r\n *  @extends ShapeLine\r\n */\r\nclass ShapePeakBoundaries extends ShapeLine {\r\n\r\n  constructor( graph ) {\r\n    super( graph );\r\n    this.lineHeight = 6;\r\n  }\r\n\r\n  createDom() {\r\n\r\n    this._dom = document.createElementNS( this.graph.ns, 'line' );\r\n    this.line1 = document.createElementNS( this.graph.ns, 'line' );\r\n    this.line2 = document.createElementNS( this.graph.ns, 'line' );\r\n    this.line3 = document.createElementNS( this.graph.ns, 'line' );\r\n\r\n    this.rectBoundary = document.createElementNS( this.graph.ns, 'path' );\r\n\r\n    this.rectBoundary.setAttribute( 'fill', 'transparent' );\r\n    this.rectBoundary.setAttribute( 'stroke', 'none' );\r\n    this.rectBoundary.setAttribute( 'pointer-events', 'fill' );\r\n\r\n    this.rectBoundary.jsGraphIsShape = true;\r\n\r\n    this.group.appendChild( this.rectBoundary );\r\n    this.group.appendChild( this.line1 );\r\n    this.group.appendChild( this.line2 );\r\n    this.group.appendChild( this.line3 );\r\n    this._dom.element = this;\r\n  }\r\n\r\n  createHandles() {\r\n    this._createHandles( 3, 'rect', {\r\n      transform: 'translate(-3 -3)',\r\n      width: 6,\r\n      height: 6,\r\n      stroke: 'black',\r\n      fill: 'white',\r\n      cursor: 'nwse-resize'\r\n    } );\r\n  }\r\n\r\n  redrawImpl() {\r\n\r\n    this.line1.setAttribute( 'stroke', this.getStrokeColor() );\r\n    this.line2.setAttribute( 'stroke', this.getStrokeColor() );\r\n    this.line3.setAttribute( 'stroke', this.getStrokeColor() );\r\n\r\n    this.line1.setAttribute( 'stroke-width', this.getStrokeWidth() );\r\n    this.line2.setAttribute( 'stroke-width', this.getStrokeWidth() );\r\n    this.line3.setAttribute( 'stroke-width', this.getStrokeWidth() );\r\n\r\n    this.setHandles();\r\n    this.redrawLines();\r\n  }\r\n\r\n  /**\r\n   * @memberof ShapePeakBoundaries\r\n   * Redraws the vertical lines according to the positions.\r\n   * Position 0 is the left line, position 1 is the right line and position 2 is the center line\r\n   * @returns {ShapePeakBoundaries} The shape instance\r\n   */\r\n  redrawLines() {\r\n\r\n    var posLeft = this.computePosition( 0 );\r\n    var posRight = this.computePosition( 1 );\r\n    var posCenter = this.computePosition( 2 );\r\n\r\n    if ( posLeft.x && posRight.x && posCenter.x && this.posYPx ) {\r\n\r\n      var height = this.lineHeight;\r\n      this.rectBoundary.setAttribute( 'd', `M ${ posLeft.x } ${ this.posYPx - height } v ${ 2 * height } H ${ posRight.x } v ${ -2 * height }z` );\r\n      this.line1.setAttribute( 'x1', posLeft.x );\r\n      this.line1.setAttribute( 'x2', posLeft.x );\r\n\r\n      this.line2.setAttribute( 'x1', posRight.x );\r\n      this.line2.setAttribute( 'x2', posRight.x );\r\n\r\n      this.line3.setAttribute( 'x1', posCenter.x );\r\n      this.line3.setAttribute( 'x2', posCenter.x );\r\n\r\n      this._dom.setAttribute( 'x1', posLeft.x );\r\n      this._dom.setAttribute( 'x2', posRight.x );\r\n\r\n      this.redrawY( height );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @memberof ShapePeakBoundaries\r\n   * Redraws the vertical positions of the shape\r\n   * @returns {ShapePeakBoundaries} The shape instance\r\n   */\r\n  redrawY() {\r\n\r\n    if ( !this.posYPx ) {\r\n      return this;\r\n    }\r\n\r\n    var height = this.lineHeight;\r\n\r\n    this.line1.setAttribute( 'y1', this.posYPx - height );\r\n    this.line1.setAttribute( 'y2', this.posYPx + height );\r\n\r\n    this.line2.setAttribute( 'y1', this.posYPx - height );\r\n    this.line2.setAttribute( 'y2', this.posYPx + height );\r\n\r\n    this.line3.setAttribute( 'y1', this.posYPx - height );\r\n    this.line3.setAttribute( 'y2', this.posYPx + height );\r\n\r\n    this._dom.setAttribute( 'y1', this.posYPx );\r\n    this._dom.setAttribute( 'y2', this.posYPx );\r\n\r\n    return this;\r\n  }\r\n\r\n  setHandles() {\r\n\r\n    if ( !this.posYPx ) {\r\n      return;\r\n    }\r\n\r\n    var posLeft = this.computePosition( 0 );\r\n    var posRight = this.computePosition( 1 );\r\n    var posCenter = this.computePosition( 2 );\r\n\r\n    if ( posLeft.x && posRight.x && posCenter.x ) {\r\n\r\n      this.handles[ 1 ].setAttribute( 'x', posLeft.x );\r\n      this.handles[ 1 ].setAttribute( 'y', this.posYPx );\r\n\r\n      this.handles[ 2 ].setAttribute( 'x', posRight.x );\r\n      this.handles[ 2 ].setAttribute( 'y', this.posYPx );\r\n\r\n      this.handles[ 3 ].setAttribute( 'x', posCenter.x );\r\n      this.handles[ 3 ].setAttribute( 'y', this.posYPx );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @memberof ShapePeakBoundaries\r\n   * Sets the y position of the shape\r\n   * @param {Number} y - The y position in px\r\n   * @returns {ShapePeakBoundaries} The shape instance\r\n   */\r\n  setY( y ) {\r\n    this.posYPx = y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @memberof ShapePeakBoundaries\r\n   * Sets the height of the peak lines\r\n   * @param {Number} height - The height of the lines in px\r\n   * @returns {ShapePeakBoundaries} The shape instance\r\n   */\r\n  setLineHeight( height ) {\r\n    this.lineHeihgt = height;\r\n  }\r\n\r\n  handleMouseMoveImpl( e, deltaX, deltaY ) {\r\n\r\n    if ( this.isLocked() ) {\r\n      return;\r\n    }\r\n\r\n    var posLeft = this.getPosition( 0 );\r\n    var posRight = this.getPosition( 1 );\r\n    var posCenter = this.getPosition( 2 );\r\n\r\n    switch ( this.handleSelected ) {\r\n\r\n      case 1: // left\r\n        posLeft.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n\r\n        if ( Math.abs( posCenter.x - posRight.x ) > Math.abs( posRight.x - posLeft.x ) || Math.abs( posCenter.x - posLeft.x ) > Math.abs( posRight.x - posLeft.x ) ) {\r\n          posCenter.x = posLeft.x + ( posRight.x - posLeft.x ) * 0.1;\r\n        }\r\n        break;\r\n\r\n      case 2: // left\r\n\r\n        posRight.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n\r\n        if ( Math.abs( posCenter.x - posRight.x ) > Math.abs( posRight.x - posLeft.x ) || Math.abs( posCenter.x - posLeft.x ) > Math.abs( posRight.x - posLeft.x ) ) {\r\n          posCenter.x = posRight.x + ( posLeft.x - posRight.x ) * 0.1;\r\n        }\r\n\r\n        break;\r\n\r\n      case 3: // left\r\n\r\n        posCenter.deltaPosition( 'x', deltaX, this.getXAxis() );\r\n\r\n        if ( Math.abs( posCenter.x - posRight.x ) > Math.abs( posRight.x - posLeft.x ) || Math.abs( posCenter.x - posLeft.x ) > Math.abs( posRight.x - posLeft.x ) ) {\r\n          return;\r\n        }\r\n\r\n        break;\r\n\r\n    }\r\n\r\n    this.setLabelPosition( {\r\n      y: this.getLabelPosition( 0 ).y,\r\n      x: posCenter.x\r\n    } );\r\n\r\n    this.updateLabels();\r\n    this.redrawLines();\r\n    this.setHandles();\r\n  }\r\n\r\n  applyPosition() {\r\n\r\n    this.redrawLines();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nexport default ShapePeakBoundaries;","import {\r\n  isNumeric\r\n} from '../graph.util.js';\r\n\r\nimport GraphShape from './graph.shape.js';\r\n\r\n/**\r\n * Represents a line\r\n * @extends Shape\r\n * @see Graph#newShape\r\n */\r\nclass ShapeHTML extends GraphShape {\r\n\r\n  constructor( graph, options ) {\r\n    super( graph, options );\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createDom() {\r\n\r\n    this._dom = document.createElement( 'div' );\r\n    //  this._dom.setAttribute( \"requiredExtensions\", \"http://www.w3.org/1999/xhtml\" );\r\n\r\n    this._dom.setAttribute( 'style', 'position: absolute' );\r\n    let div = document.createElement( 'div' );\r\n    this._dom.appendChild( div );\r\n    this.div = div;\r\n  }\r\n\r\n  /**\r\n   * Creates the handles\r\n   * @private\r\n   * @return {Shape} The current shape\r\n   */\r\n  createHandles() {\r\n\r\n  }\r\n\r\n  setHeight( height ) {\r\n    this.setProp( 'height', height );\r\n  }\r\n\r\n  setWidth( width ) {\r\n    this.setProp( 'width', width );\r\n  }\r\n\r\n  setContent( content ) {\r\n    this.setProp( 'content', content );\r\n  }\r\n\r\n  setRenderer( method ) {\r\n    this._renderer = method;\r\n  }\r\n\r\n  redraw() {\r\n\r\n    if ( this._renderer ) {\r\n      this._renderer( this.div );\r\n    } else {\r\n      this.div.innerHTML = this.getProp( 'content' );\r\n    }\r\n    super.redraw( ...arguments );\r\n  }\r\n\r\n  /**\r\n   * Recalculates the positions and applies them\r\n   * @private\r\n   * @return {Boolean} Whether the shape should be redrawn\r\n   */\r\n  applyPosition() {\r\n\r\n    var position = this.calculatePosition( 0 );\r\n\r\n    if ( !position || !isNumeric( position.x ) || !isNumeric( position.y ) ) {\r\n      return;\r\n    }\r\n    this._dom.style.left = `${position.x }px`;\r\n    this._dom.style.top = `${position.y }px`;\r\n\r\n    this.currentPosX = position.x;\r\n    this.currentPosY = position.y;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Handles mouse move events\r\n   * @private\r\n   */\r\n  handleMouseMoveImpl( e, deltaX, deltaY, deltaXPx, deltaYPx ) {\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets the handle position\r\n   * @private\r\n   */\r\n  setHandles() {\r\n\r\n  }\r\n\r\n  isHTML() {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default ShapeHTML;","import EventMixin from '../mixins/graph.mixin.event_graph.js'\r\n/**\r\n * Represents a plugin\r\n * @interface\r\n */\r\nclass Plugin {\r\n\r\n  static\r\n  default () {\r\n    return {};\r\n  }\r\n\r\n  constructor( options ) {\r\n    this.options = Object.assign( {}, Plugin.default(), this.constructor.default(), options );\r\n  }\r\n\r\n  /**\r\n   * Init function called by jsGraph on load\r\n   */\r\n  init( graph ) {\r\n    this.graph = graph;\r\n  }\r\n\r\n  /**\r\n   * Handles the mousedown event from jsGraph\r\n   * @param {Graph} graph - The graph instance\r\n   * @param {Number} x - The x position in px\r\n   * @param {Number} y - The y position in px\r\n   * @param {Event} e - The original event\r\n   * @param {SVGElement} target - The target element\r\n   */\r\n  onMouseDown() {}\r\n\r\n  /**\r\n   * Handles the mouseup event from jsGraph\r\n   * @param {Graph} graph - The graph instance\r\n   * @param {Number} x - The x position in px\r\n   * @param {Number} y - The y position in px\r\n   * @param {Event} e - The original event\r\n   * @param {SVGElement} target - The target element\r\n   */\r\n  onMouseUp() {}\r\n\r\n  /**\r\n   * Handles the mousemove event from jsGraph\r\n   * @param {Graph} graph - The graph instance\r\n   * @param {Number} x - The x position in px\r\n   * @param {Number} y - The y position in px\r\n   * @param {Event} e - The original event\r\n   * @param {SVGElement} target - The target element\r\n   */\r\n  onMouseMove() {}\r\n}\r\n\r\nEventMixin( Plugin, \"plugin\" );\r\nexport default Plugin;","import Plugin from './graph.plugin.js';\r\n\r\n/**\r\n * Constructor for the drag plugin. Do not use this constructor directly.\r\n * @class PluginDrag\r\n * @implements Plugin\r\n */\r\nclass PluginDrag extends Plugin {\r\n\r\n  static\r\n  default () {\r\n    return {\r\n\r\n      dragX: true,\r\n      dragY: true,\r\n      persistanceX: false,\r\n      persistanceY: false\r\n\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  init( graph ) {\r\n\r\n    this.graph = graph;\r\n    this.time = null;\r\n    this.totaltime = 2000;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseDown( graph, x, y, e, target ) {\r\n    this._draggingX = x;\r\n    this._draggingY = y;\r\n\r\n    this._lastDraggingX = this._draggingX;\r\n    this._lastDraggingY = this._draggingY;\r\n\r\n    this.stopAnimation = true;\r\n\r\n    this.moved = false;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @memberof PluginDrag\r\n   * @private\r\n   */\r\n  onMouseMove( graph, x, y, e, target ) {\r\n\r\n    var deltaX = x - this._draggingX;\r\n    var deltaY = y - this._draggingY;\r\n\r\n    if ( this.options.dragX ) {\r\n      graph._applyToAxes( function( axis ) {\r\n        axis.setCurrentMin( axis.getVal( axis.getMinPx() - deltaX ) );\r\n        axis.setCurrentMax( axis.getVal( axis.getMaxPx() - deltaX ) );\r\n      }, false, true, false );\r\n    }\r\n\r\n    if ( this.options.dragY ) {\r\n\r\n      graph._applyToAxes( function( axis ) {\r\n        axis.setCurrentMin( axis.getVal( axis.getMinPx() - deltaY ) );\r\n        axis.setCurrentMax( axis.getVal( axis.getMaxPx() - deltaY ) );\r\n      }, false, false, true );\r\n    }\r\n\r\n    this._lastDraggingX = this._draggingX;\r\n    this._lastDraggingY = this._draggingY;\r\n\r\n    this._draggingX = x;\r\n    this._draggingY = y;\r\n\r\n    this.moved = true;\r\n\r\n    this.time = Date.now();\r\n\r\n    this.emit( 'dragging' );\r\n\r\n    graph.draw( true );\r\n\r\n  }\r\n\r\n  onMouseUp( graph, x, y, e, target ) {\r\n\r\n    var dt = ( Date.now() - this.time );\r\n\r\n    if ( x == this._lastDraggingX || y == this._lastDraggingY ) {\r\n\r\n      if ( this.moved ) {\r\n        this.emit( 'dragged' );\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this.speedX = ( x - this._lastDraggingX ) / dt;\r\n    this.speedY = ( y - this._lastDraggingY ) / dt;\r\n\r\n    if ( isNaN( this.speedX ) || isNaN( this.speedY ) ) {\r\n      this.emit( 'dragged' );\r\n      return;\r\n    }\r\n\r\n    graph._applyToAxes( function( axis ) {\r\n      axis._pluginDragMin = axis.getCurrentMin();\r\n      axis._pluginDragMax = axis.getCurrentMax();\r\n    }, false, true, true );\r\n\r\n    this.stopAnimation = false;\r\n    this.accelerationX = -this.speedX / this.totaltime;\r\n    this.accelerationY = -this.speedY / this.totaltime;\r\n\r\n    if ( this.options.persistanceX || this.options.persistanceY ) {\r\n\r\n      this._persistanceMove( graph );\r\n\r\n    } else {\r\n\r\n      this.emit( 'dragged' );\r\n    }\r\n\r\n  }\r\n\r\n  _persistanceMove( graph ) {\r\n\r\n    var self = this;\r\n\r\n    if ( self.stopAnimation ) {\r\n      self.emit( 'dragged' );\r\n      return;\r\n    }\r\n\r\n    window.requestAnimationFrame( function() {\r\n\r\n      var dt = Date.now() - self.time;\r\n      var dx = ( 0.5 * self.accelerationX * dt + self.speedX ) * dt;\r\n      var dy = ( 0.5 * self.accelerationY * dt + self.speedY ) * dt;\r\n\r\n      if ( self.options.persistanceX ) {\r\n\r\n        graph._applyToAxes( function( axis ) {\r\n\r\n          axis.setCurrentMin( -axis.getRelVal( dx ) + axis._pluginDragMin );\r\n          axis.setCurrentMax( -axis.getRelVal( dx ) + axis._pluginDragMax );\r\n\r\n          axis.cacheCurrentMin();\r\n          axis.cacheCurrentMax();\r\n          axis.cacheInterval();\r\n\r\n        }, false, true, false );\r\n      }\r\n\r\n      if ( self.options.persistanceY ) {\r\n\r\n        graph._applyToAxes( function( axis ) {\r\n\r\n          axis.setCurrentMin( -axis.getRelVal( dy ) + axis._pluginDragMin );\r\n          axis.setCurrentMax( -axis.getRelVal( dy ) + axis._pluginDragMax );\r\n\r\n          axis.cacheCurrentMin();\r\n          axis.cacheCurrentMax();\r\n          axis.cacheInterval();\r\n\r\n        }, false, false, true );\r\n      }\r\n\r\n      graph.draw();\r\n\r\n      if ( dt < self.totaltime ) {\r\n        self.emit( 'dragging' );\r\n        self._persistanceMove( graph );\r\n      } else {\r\n        self.emit( 'dragged' );\r\n      }\r\n\r\n    } );\r\n\r\n  }\r\n}\r\n\r\nexport default PluginDrag;","import * as util from '../graph.util.js';\r\n\r\nimport Plugin from './graph.plugin.js';\r\n\r\n/**\r\n * @class PluginShape\r\n * @implements Plugin\r\n */\r\nclass PluginShape extends Plugin {\r\n\r\n  constructor() {\r\n    super( ...arguments );\r\n  }\r\n\r\n  static\r\n  default () {\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Init method\r\n   * @private\r\n   */\r\n  init( graph, options ) {\r\n\r\n    super.init( graph, options );\r\n    this.shapeType = options.type;\r\n  }\r\n\r\n  /**\r\n   * Sets the shape that is created by the plugin\r\n   * @param {String} shapeType - The type of the shape\r\n   */\r\n  setShape( shapeType ) {\r\n    this.shapeInfo.shapeType = shapeType;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseDown( graph, x, y, e, target ) {\r\n\r\n    if ( !this.shapeType && !this.options.url ) {\r\n      return;\r\n    }\r\n\r\n    var self = this,\r\n      selfPlugin = this;\r\n\r\n    var xVal, yVal;\r\n\r\n    this.count = this.count || 0;\r\n\r\n    x -= graph.getPaddingLeft();\r\n    y -= graph.getPaddingTop();\r\n\r\n    xVal = graph.getXAxis().getVal( x );\r\n    yVal = graph.getYAxis().getVal( y );\r\n\r\n    var shapeInfo = {\r\n\r\n      position: [ {\r\n        x: xVal,\r\n        y: yVal\r\n      }, {\r\n        x: xVal,\r\n        y: yVal\r\n      } ],\r\n\r\n      onChange: function( newData ) {\r\n        graph.triggerEvent( 'onAnnotationChange', newData );\r\n      },\r\n\r\n      locked: false,\r\n      selectable: true,\r\n      resizable: true,\r\n      movable: true\r\n    };\r\n\r\n    let shapeProperties = this.options.properties;\r\n\r\n    util.extend( true, shapeInfo, this.options );\r\n\r\n    this.emit( 'beforeNewShape', e, shapeInfo );\r\n\r\n    if ( this.graph.prevent( false ) ) {\r\n      return;\r\n    }\r\n\r\n    var shape = graph.newShape( shapeInfo.type, shapeInfo, false, shapeProperties );\r\n\r\n    this.emit( 'createdShape', e, shape );\r\n\r\n    if ( shape ) {\r\n      self.currentShape = shape;\r\n      self.currentShapeEvent = e;\r\n    }\r\n\r\n    graph.once( 'mouseUp', () => {\r\n      if ( !this.currentShape ) { // The mouse has moved\r\n        self.emit( 'newShape', e, shape );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseMove( graph, x, y, e ) {\r\n\r\n    if ( this.currentShape ) {\r\n      this.count++;\r\n\r\n      var shape = this.currentShape;\r\n\r\n      this.currentShape = false;\r\n\r\n      if ( graph.selectedSerie && !shape.serie ) {\r\n        shape.setSerie( graph.selectedSerie );\r\n      }\r\n\r\n      shape.resizing = true;\r\n\r\n      if ( shape.options && shape.options.onCreate ) {\r\n        shape.options.onCreate.call( shape );\r\n      }\r\n\r\n      shape.draw();\r\n      graph.selectShape( shape );\r\n      shape.handleMouseDown( this.currentShapeEvent, true );\r\n      shape.handleSelected = this.options.handleSelected || 1;\r\n      shape.handleMouseMove( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseUp() {\r\n\r\n    if ( this.currentShape ) {\r\n      // No need to kill it as it hasn't been actually put in the dom right now\r\n\r\n      // Norman 30 July 2017: Yes but it's added in the jsGraph stack. We need to remove it. See #176\r\n      // From now on killing the shape will result in removing it from the stack as well.\r\n      this.currentShape.kill();\r\n      this.currentShape = false;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default PluginShape;","import * as util from '../graph.util.js';\r\n\r\nimport Plugin from './graph.plugin.js';\r\n\r\n/**\r\n * @extends Plugin\r\n */\r\nclass PluginSelectScatter extends Plugin {\r\n\r\n  constructor() {\r\n    super( ...arguments );\r\n  }\r\n\r\n  static\r\n  default () {\r\n    return {};\r\n  }\r\n  /**\r\n   * Init method\r\n   * @private\r\n   */\r\n  init( graph, options ) {\r\n\r\n    this._path = document.createElementNS( graph.ns, 'path' );\r\n\r\n    util.setAttributeTo( this._path, {\r\n      'display': 'none',\r\n      'fill': 'rgba(0,0,0,0.1)',\r\n      'stroke': 'rgba(0,0,0,1)',\r\n      'shape-rendering': 'crispEdges',\r\n      'x': 0,\r\n      'y': 0,\r\n      'height': 0,\r\n      'width': 0,\r\n      'd': ''\r\n    } );\r\n\r\n    this.graph = graph;\r\n\r\n    graph.dom.appendChild( this._path );\r\n  }\r\n\r\n  /**\r\n   * Assigns the scatter serie that should be selected to the plugin\r\n   * @param {ScatterSerie} serie - The serie\r\n   * @return {PluginSelectScatter} The current plugin instance\r\n   */\r\n  setSerie( serie ) {\r\n    this.options.serie = serie;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseDown( graph, x, y, e, mute ) {\r\n\r\n    if ( !this.options.serie ) {\r\n      return;\r\n    }\r\n\r\n    const serie = graph.getSerie( this.options.serie );\r\n\r\n    this.path = `M ${x} ${y} `;\r\n    this.currentX = x;\r\n    this.currentY = y;\r\n\r\n    this.xs = [ serie.getXAxis().getVal( x - graph.getPaddingLeft() ) ];\r\n    this.ys = [ serie.getYAxis().getVal( y - graph.getPaddingTop() ) ];\r\n    this._path.setAttribute( 'd', '' );\r\n    this._path.setAttribute( 'display', 'block' );\r\n\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseMove( graph, x, y, e, mute ) {\r\n\r\n    if ( !this.options.serie ) {\r\n      return;\r\n    }\r\n\r\n    const serie = graph.getSerie( this.options.serie );\r\n\r\n    if ( Math.pow( ( x - this.currentX ), 2 ) + Math.pow( ( y - this.currentY ), 2 ) > 25 ) {\r\n\r\n      this.path += ` L ${x} ${y} `;\r\n      this.currentX = x;\r\n      this.currentY = y;\r\n\r\n      this.xs.push( serie.getXAxis().getVal( x - graph.getPaddingLeft() ) );\r\n      this.ys.push( serie.getYAxis().getVal( y - graph.getPaddingTop() ) );\r\n\r\n      this._path.setAttribute( 'd', `${this.path} z` );\r\n\r\n      this.findPoints();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  findPoints() {\r\n\r\n    if ( !this.options.serie ) {\r\n      return;\r\n    }\r\n\r\n    const serie = this.graph.getSerie( this.options.serie );\r\n\r\n    var data = serie.waveform;\r\n    var selected = [];\r\n    var counter = 0,\r\n      j2;\r\n    for ( var i = 0, l = data.getLength(); i < l; i += 1 ) {\r\n\r\n      counter = 0;\r\n      for ( var j = 0, k = this.xs.length; j < k; j += 1 ) {\r\n\r\n        if ( j == k - 1 ) {\r\n          j2 = 0;\r\n        } else {\r\n          j2 = j + 1;\r\n        }\r\n\r\n        if ( ( ( this.ys[ j ] < data.getY( i ) && this.ys[ j2 ] > data.getY( i ) ) || ( this.ys[ j ] > data.getY( i ) && this.ys[ j2 ] < data.getY( i ) ) ) ) {\r\n\r\n          if ( data.getX( i ) > ( ( data.getY( i ) - this.ys[ j ] ) / ( this.ys[ j2 ] - this.ys[ j ] ) ) * ( this.xs[ j2 ] - this.xs[ j ] ) + this.xs[ j ] ) {\r\n            counter++;\r\n          }\r\n        }\r\n      }\r\n\r\n      if ( counter % 2 == 1 ) {\r\n\r\n        selected.push( i );\r\n        serie.selectMarker( i, true, 'selected' );\r\n      } else {\r\n        serie.unselectMarker( i );\r\n      }\r\n\r\n    }\r\n\r\n    this.selected = selected;\r\n    this.emit( 'selectionProcess', selected );\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseUp( graph, x, y, e ) {\r\n    this._path.setAttribute( 'display', 'none' );\r\n    this.emit( 'selectionEnd', this.selected );\r\n  }\r\n\r\n}\r\n\r\nexport default PluginSelectScatter;","import * as util from '../graph.util.js';\r\n\r\nimport Plugin from './graph.plugin.js';\r\n\r\n/**\r\n * @class PluginZoom\r\n * @implements Plugin\r\n */\r\nclass PluginZoom extends Plugin {\r\n\r\n  constructor() {\r\n    super( ...arguments );\r\n  }\r\n\r\n  static\r\n  default () {\r\n\r\n    return {\r\n      'axes': 'all'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Init method\r\n   * @private\r\n   */\r\n  init( graph, options ) {\r\n\r\n    this._zoomingGroup = document.createElementNS( graph.ns, 'g' );\r\n    this._zoomingSquare = document.createElementNS( graph.ns, 'rect' );\r\n    this._zoomingSquare.setAttribute( 'display', 'none' );\r\n\r\n    util.setAttributeTo( this._zoomingSquare, {\r\n      'display': 'none',\r\n      'fill': 'rgba(171,12,12,0.2)',\r\n      'stroke': 'rgba(171,12,12,1)',\r\n      'shape-rendering': 'crispEdges',\r\n      'x': 0,\r\n      'y': 0,\r\n      'height': 0,\r\n      'width': 0,\r\n      'pointer-events': 'none'\r\n    } );\r\n\r\n    this.graph = graph;\r\n    graph.groupEvent.appendChild( this._zoomingGroup );\r\n    this._zoomingGroup.appendChild( this._zoomingSquare );\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseDown( graph, x, y, e, mute ) {\r\n\r\n    var zoomMode = this.options.zoomMode;\r\n\r\n    if ( !zoomMode ) {\r\n      return;\r\n    }\r\n\r\n    this._zoomingMode = zoomMode;\r\n\r\n    if ( x === undefined ) {\r\n      this._backedUpZoomMode = this._zoomingMode;\r\n      this._zoomingMode = 'y';\r\n      x = 0;\r\n    }\r\n\r\n    if ( y === undefined ) {\r\n      this._backedUpZoomMode = this._zoomingMode;\r\n      this._zoomingMode = 'x';\r\n      y = 0;\r\n    }\r\n\r\n    this._zoomingXStart = x;\r\n    this._zoomingYStart = y;\r\n    this.x1 = x - graph.getPaddingLeft();\r\n    this.y1 = y - graph.getPaddingTop();\r\n\r\n    this._zoomingSquare.setAttribute( 'width', 0 );\r\n    this._zoomingSquare.setAttribute( 'height', 0 );\r\n    this._zoomingSquare.setAttribute( 'display', 'block' );\r\n\r\n    switch ( this._zoomingMode ) {\r\n\r\n      case 'x':\r\n        this._zoomingSquare.setAttribute( 'y', graph.options.paddingTop );\r\n        this._zoomingSquare.setAttribute( 'height', graph.getDrawingHeight() - graph.shift.bottom );\r\n        break;\r\n\r\n      case 'y':\r\n        this._zoomingSquare.setAttribute( 'x', graph.options.paddingLeft /* + this.shift[1]*/ );\r\n        this._zoomingSquare.setAttribute( 'width', graph.getDrawingWidth() /* - this.shift[1] - this.shift[2]*/ );\r\n        break;\r\n\r\n      case 'forceY2':\r\n\r\n        this.y2 = graph.getYAxis().getPx( this.options.forcedY ) + graph.options.paddingTop;\r\n\r\n        break;\r\n\r\n    }\r\n\r\n    if ( this.options.onZoomStart && !mute ) {\r\n      this.options.onZoomStart( graph, x, y, e, mute );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseMove( graph, x, y, e, mute ) {\r\n\r\n    //\tthis._zoomingSquare.setAttribute('display', 'none');\r\n\r\n    //\tthis._zoomingSquare.setAttribute('transform', 'translate(' + Math.random() + ', ' + Math.random() + ') scale(10, 10)');\r\n    switch ( this._zoomingMode ) {\r\n\r\n      case 'xy':\r\n        this._zoomingSquare.setAttribute( 'x', Math.min( this._zoomingXStart, x ) );\r\n        this._zoomingSquare.setAttribute( 'y', Math.min( this._zoomingYStart, y ) );\r\n        this._zoomingSquare.setAttribute( 'width', Math.abs( this._zoomingXStart - x ) );\r\n        this._zoomingSquare.setAttribute( 'height', Math.abs( this._zoomingYStart - y ) );\r\n\r\n        break;\r\n\r\n      case 'forceY2':\r\n        this._zoomingSquare.setAttribute( 'y', Math.min( this._zoomingYStart, this.y2 ) );\r\n        this._zoomingSquare.setAttribute( 'height', Math.abs( this._zoomingYStart - this.y2 ) );\r\n        this._zoomingSquare.setAttribute( 'x', Math.min( this._zoomingXStart, x ) );\r\n        this._zoomingSquare.setAttribute( 'width', Math.abs( this._zoomingXStart - x ) );\r\n\r\n        break;\r\n\r\n      case 'x':\r\n        this._zoomingSquare.setAttribute( 'x', Math.min( this._zoomingXStart, x ) );\r\n        this._zoomingSquare.setAttribute( 'width', Math.abs( this._zoomingXStart - x ) );\r\n\r\n        break;\r\n\r\n      case 'y':\r\n        this._zoomingSquare.setAttribute( 'y', Math.min( this._zoomingYStart, y ) );\r\n        this._zoomingSquare.setAttribute( 'height', Math.abs( this._zoomingYStart - y ) );\r\n        break;\r\n\r\n    }\r\n\r\n    if ( this.options.onZoomMove && !mute ) {\r\n\r\n      this.options.onZoomMove( graph, x, y, e, mute );\r\n    }\r\n    //\t\tthis._zoomingSquare.setAttribute('display', 'block');\r\n\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseUp( graph, x, y, e, mute ) {\r\n    var self = this;\r\n    this.removeZone();\r\n\r\n    var _x = x - graph.options.paddingLeft;\r\n    var _y = y - graph.options.paddingTop;\r\n\r\n    this.emit( 'beforeZoom', {\r\n      graph: graph,\r\n      x: x,\r\n      y: y,\r\n      e: e,\r\n      mute: mute\r\n    } );\r\n\r\n    if ( graph.prevent( false ) ) {\r\n\r\n      // This doesn't work !\r\n      //graph.prevent( true ); // Cancel future click event\r\n      return;\r\n    }\r\n\r\n    if ( ( x - this._zoomingXStart == 0 && this._zoomingMode != 'y' ) || ( y - this._zoomingYStart == 0 && this._zoomingMode != 'x' ) ) {\r\n      return;\r\n    }\r\n\r\n    if ( this.options.transition || this.options.smooth ) {\r\n\r\n      let modeX = false,\r\n        modeY = false;\r\n\r\n      if ( this._zoomingMode == 'x' || this._zoomingMode == 'xy' || this._zoomingMode == 'forceY2' ) {\r\n\r\n        this.fullX = false;\r\n        this.toAxes( function( axis ) {\r\n\r\n          axis._pluginZoomMin = axis.getCurrentMin();\r\n          axis._pluginZoomMax = axis.getCurrentMax();\r\n\r\n          axis._pluginZoomMinFinal = Math.min( axis.getVal( _x ), axis.getVal( self.x1 ) );\r\n          axis._pluginZoomMaxFinal = Math.max( axis.getVal( _x ), axis.getVal( self.x1 ) );\r\n        }, false, true, false );\r\n\r\n        modeX = true;\r\n\r\n      }\r\n\r\n      if ( this._zoomingMode == 'y' || this._zoomingMode == 'xy' ) {\r\n\r\n        this.fullY = false;\r\n        this.toAxes( function( axis ) {\r\n\r\n          axis._pluginZoomMin = axis.getCurrentMin();\r\n          axis._pluginZoomMax = axis.getCurrentMax();\r\n\r\n          axis._pluginZoomMinFinal = Math.min( axis.getVal( _y ), axis.getVal( self.y1 ) );\r\n          axis._pluginZoomMaxFinal = Math.max( axis.getVal( _y ), axis.getVal( self.y1 ) );\r\n\r\n        }, false, false, true );\r\n\r\n        modeY = true;\r\n      }\r\n\r\n      if ( this._zoomingMode == 'forceY2' ) {\r\n\r\n        this.fullY = false;\r\n        this.toAxes( function( axis ) {\r\n\r\n          axis._pluginZoomMin = axis.getCurrentMin();\r\n          axis._pluginZoomMax = axis.getCurrentMax();\r\n\r\n          axis._pluginZoomMinFinal = Math.min( axis.getVal( self.y2 ), axis.getVal( self.y1 ) );\r\n          axis._pluginZoomMaxFinal = Math.max( axis.getVal( self.y2 ), axis.getVal( self.y1 ) );\r\n\r\n        }, false, false, true );\r\n\r\n        modeY = true;\r\n      }\r\n\r\n      this.transition( modeX, modeY, 'zoomEnd' );\r\n\r\n    } else {\r\n\r\n      switch ( this._zoomingMode ) {\r\n        case 'x':\r\n          this.fullX = false;\r\n          this.toAxes( '_doZoom', [ _x, this.x1 ], true, false );\r\n          break;\r\n        case 'y':\r\n          this.fullY = false;\r\n          this.toAxes( '_doZoom', [ _y, this.y1 ], false, true );\r\n          break;\r\n        case 'xy':\r\n          this.fullX = false;\r\n          this.fullY = false;\r\n          this.toAxes( '_doZoom', [ _x, this.x1 ], true, false );\r\n          this.toAxes( '_doZoom', [ _y, this.y1 ], false, true );\r\n          break;\r\n\r\n        case 'forceY2':\r\n\r\n          this.fullX = false;\r\n          this.fullY = false;\r\n\r\n          this.toAxes( '_doZoom', [ _x, this.x1 ], true, false );\r\n          this.toAxes( '_doZoom', [ this.y1, this.y2 ], false, true );\r\n\r\n          break;\r\n      }\r\n\r\n      //  graph.prevent( true ); // WHat are you doing ??\r\n      graph.draw();\r\n\r\n      if ( this._backedUpZoomMode ) {\r\n        this._zoomingMode = this._backedUpZoomMode;\r\n      }\r\n\r\n      this.emit( 'zoomed' );\r\n\r\n      graph.pluginYieldActiveState();\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  removeZone() {\r\n\r\n    this._zoomingSquare.setAttribute( 'display', 'none' );\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onMouseWheel( delta, e, coordX, coordY, options ) {\r\n\r\n    if ( !options ) {\r\n      options = {};\r\n    }\r\n\r\n    if ( !options.baseline ) {\r\n      options.baseline = 0;\r\n    }\r\n\r\n    let baseline = options.baseline;\r\n\r\n    if ( options.baseline == 'mousePosition' ) {\r\n      baseline = this.graph.getYAxis().getVal( coordY );\r\n    }\r\n\r\n    /*var serie;\r\n    if ( ( serie = this.graph.getSelectedSerie() ) ) {\r\n\r\n      if ( serie.getYAxis().handleMouseWheel( delta, e ) ) {\r\n        return;\r\n      }\r\n    }*/\r\n\r\n    var doX = ( options.direction == 'x' );\r\n    var doY = !( options.direction !== 'y' );\r\n\r\n    this.toAxes( 'handleMouseWheel', [ delta, e, baseline ], doX, doY );\r\n\r\n    this.graph.drawSeries();\r\n\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  onDblClick( x, y, e, pref, mute ) {\r\n\r\n    var graph = this.graph;\r\n    this.emit( 'beforeDblClick', {\r\n      graph: graph,\r\n      x: x,\r\n      y: y,\r\n      pref: pref,\r\n      e: e,\r\n      mute: mute\r\n    } );\r\n\r\n    if ( graph.prevent( false ) ) {\r\n      return;\r\n    }\r\n\r\n    if ( this.options.transition || this.options.smooth ) {\r\n\r\n      var modeX = false,\r\n        modeY = false;\r\n\r\n      if ( pref.mode == 'xtotal' || pref.mode == 'total' ) {\r\n\r\n        this.toAxes( function( axis ) {\r\n          axis._pluginZoomMin = axis.getCurrentMin();\r\n          axis._pluginZoomMax = axis.getCurrentMax();\r\n\r\n          axis._pluginZoomMinFinal = axis.getMinValue() - ( axis.options.axisDataSpacing.min * axis.getInterval() );\r\n          axis._pluginZoomMaxFinal = axis.getMaxValue() + ( axis.options.axisDataSpacing.max * axis.getInterval() );\r\n\r\n        }, false, true, false );\r\n\r\n        modeX = true;\r\n\r\n      }\r\n\r\n      if ( pref.mode == 'ytotal' || pref.mode == 'total' ) {\r\n\r\n        this.toAxes( function( axis ) {\r\n\r\n          axis._pluginZoomMin = axis.getCurrentMin();\r\n          axis._pluginZoomMax = axis.getCurrentMax();\r\n\r\n          axis._pluginZoomMinFinal = axis.getMinValue() - ( axis.options.axisDataSpacing.min * axis.getInterval() );\r\n          axis._pluginZoomMaxFinal = axis.getMaxValue() + ( axis.options.axisDataSpacing.max * axis.getInterval() );\r\n\r\n        }, false, false, true );\r\n\r\n        modeY = true;\r\n\r\n      }\r\n\r\n      let x, y;\r\n\r\n      if ( pref.mode == 'gradualX' || pref.mode == 'gradualY' || pref.mode == 'gradual' || pref.mode == 'gradualXY' ) {\r\n\r\n        x = false,\r\n          y = false;\r\n\r\n        if ( pref.mode == 'gradualX' || pref.mode == 'gradual' || pref.mode == 'gradualXY' ) {\r\n          x = true;\r\n          modeX = true;\r\n        }\r\n\r\n        if ( pref.mode == 'gradualY' || pref.mode == 'gradual' || pref.mode == 'gradualXY' ) {\r\n          y = true;\r\n          modeY = true;\r\n        }\r\n\r\n        this.toAxes( function( axis ) {\r\n\r\n          axis._pluginZoomMin = axis.getCurrentMin();\r\n          axis._pluginZoomMax = axis.getCurrentMax();\r\n\r\n          axis._pluginZoomMinFinal = axis.getCurrentMin() - ( axis.getCurrentMax() - axis.getCurrentMin() );\r\n          axis._pluginZoomMaxFinal = axis.getCurrentMax() + ( axis.getCurrentMax() - axis.getCurrentMin() );\r\n\r\n        }, false, x, y );\r\n\r\n      }\r\n\r\n      this.transition( modeX, modeY, 'dblClick' );\r\n      return;\r\n    }\r\n\r\n    var xAxis = this.graph.getXAxis(),\r\n      yAxis = this.graph.getYAxis();\r\n\r\n    if ( pref.mode == 'xtotal' ) {\r\n\r\n      this.toAxes( 'setMinMaxToFitSeries', null, true, false );\r\n      this.fullX = true;\r\n      this.fullY = false;\r\n\r\n    } else if ( pref.mode == 'ytotal' ) {\r\n\r\n      this.toAxes( 'setMinMaxToFitSeries', null, false, true );\r\n      this.fullX = false;\r\n      this.fullY = true;\r\n\r\n    } else if ( pref.mode == 'total' ) {\r\n\r\n      this.toAxes( 'setMinMaxToFitSeries', null, true, true );\r\n\r\n      this.fullX = true;\r\n      this.fullY = true;\r\n      // Nothing to do here\r\n      /*        this.graph._applyToAxes( function( axis ) {\r\n\r\n          axis.emit( 'zoom', axis.currentAxisMin, axis.currentAxisMax, axis );\r\n\r\n        }, null, true, true );\r\n*/\r\n    } else {\r\n\r\n      x -= this.graph.options.paddingLeft;\r\n      y -= this.graph.options.paddingTop;\r\n\r\n      var\r\n        xMin = xAxis.getCurrentMin(),\r\n        xMax = xAxis.getCurrentMax(),\r\n        xActual = xAxis.getVal( x ),\r\n        diffX = xMax - xMin,\r\n\r\n        yMin = yAxis.getCurrentMin(),\r\n        yMax = yAxis.getCurrentMax(),\r\n        yActual = yAxis.getVal( y ),\r\n        diffY = yMax - yMin;\r\n\r\n      if ( pref.mode == 'gradualXY' || pref.mode == 'gradualX' ) {\r\n\r\n        var ratio = ( xActual - xMin ) / ( xMax - xMin );\r\n        xMin = Math.max( xAxis.getMinValue() - xAxis.getInterval() * xAxis.options.axisDataSpacing.min, xMin - diffX * ratio );\r\n        xMax = Math.min( xAxis.getMaxValue() + xAxis.getInterval() * xAxis.options.axisDataSpacing.max, xMax + diffX * ( 1 - ratio ) );\r\n        xAxis.setCurrentMin( xMin );\r\n        xAxis.setCurrentMax( xMax );\r\n\r\n        if ( xAxis.options.onZoom ) {\r\n          xAxis.options.onZoom( xMin, xMax );\r\n        }\r\n\r\n        xAxis.cacheCurrentMin();\r\n        xAxis.cacheCurrentMax();\r\n        xAxis.cacheInterval();\r\n\r\n      }\r\n\r\n      if ( pref.mode == 'gradualXY' || pref.mode == 'gradualY' ) {\r\n\r\n        var ratio = ( yActual - yMin ) / ( yMax - yMin );\r\n        yMin = Math.max( yAxis.getMinValue() - yAxis.getInterval() * yAxis.options.axisDataSpacing.min, yMin - diffY * ratio );\r\n        yMax = Math.min( yAxis.getMaxValue() + yAxis.getInterval() * yAxis.options.axisDataSpacing.max, yMax + diffY * ( 1 - ratio ) );\r\n        yAxis.setCurrentMin( yMin );\r\n        yAxis.setCurrentMax( yMax );\r\n\r\n        if ( yAxis.options.onZoom ) {\r\n          yAxis.options.onZoom( yMin, yMax );\r\n        }\r\n\r\n        yAxis.cacheCurrentMin();\r\n        yAxis.cacheCurrentMax();\r\n        yAxis.cacheInterval();\r\n\r\n      }\r\n\r\n    }\r\n\r\n    graph.pluginYieldActiveState();\r\n\r\n    this.graph.draw();\r\n    /*\r\n        this.emit( \"dblClick\", {\r\n          graph: graph,\r\n          x: x,\r\n          y: y,\r\n          pref: pref,\r\n          e: e,\r\n          mute: mute\r\n        } );\r\n\r\n        if ( this.options.onDblClick && !mute ) {\r\n          this.options.onDblClick( graph, x, y, e, mute );\r\n        }*/\r\n\r\n  }\r\n\r\n  transition( modeX, modeY, eventName ) {\r\n\r\n    var self = this,\r\n      maxTime = 500;\r\n\r\n    if ( !self.gradualUnzoomStart ) {\r\n      self.gradualUnzoomStart = Date.now();\r\n    }\r\n\r\n    window.requestAnimationFrame( function() {\r\n\r\n      var dt = Date.now() - self.gradualUnzoomStart;\r\n\r\n      if ( dt > maxTime ) {\r\n        dt = maxTime;\r\n      }\r\n      var progress = Math.sin( dt / maxTime * Math.PI / 2 );\r\n\r\n      self.toAxes( function( axis ) {\r\n\r\n        axis.setCurrentMin( axis._pluginZoomMin + ( axis._pluginZoomMinFinal - axis._pluginZoomMin ) * progress );\r\n        axis.setCurrentMax( axis._pluginZoomMax + ( axis._pluginZoomMaxFinal - axis._pluginZoomMax ) * progress );\r\n\r\n        axis.cacheCurrentMin();\r\n        axis.cacheCurrentMax();\r\n        axis.cacheInterval();\r\n\r\n      }, false, modeX, modeY );\r\n\r\n      self.graph.draw();\r\n\r\n      if ( dt < maxTime ) {\r\n\r\n        self.transition( modeX, modeY, eventName );\r\n        self.emit( 'zooming' );\r\n\r\n      } else {\r\n\r\n        self.emit( 'zoomed' );\r\n        self.graph.pluginYieldActiveState();\r\n\r\n        if ( eventName ) {\r\n          self.emit( eventName );\r\n        }\r\n        self.gradualUnzoomStart = 0;\r\n\r\n      }\r\n\r\n    } );\r\n  }\r\n\r\n  isFullX() {\r\n    return this.fullX;\r\n  }\r\n\r\n  isFullY() {\r\n    return this.fullY;\r\n  }\r\n\r\n  toAxes( func, params, tb, lr ) {\r\n\r\n    var axes = this.options.axes;\r\n\r\n    if ( !axes || ( axes == 'serieSelected' && !this.graph.getSelectedSerie() ) ) {\r\n      axes = 'all';\r\n    }\r\n\r\n    switch ( axes ) {\r\n\r\n      case 'all':\r\n        this.graph._applyToAxes.apply( this.graph, arguments );\r\n        break;\r\n\r\n      case 'serieSelected':\r\n\r\n        var serie = this.graph.getSelectedSerie();\r\n        if ( serie ) {\r\n\r\n          if ( tb ) {\r\n\r\n            if ( typeof func == 'string' ) {\r\n              serie.getXAxis()[ func ].apply( serie.getXAxis(), params );\r\n            } else {\r\n              func.apply( serie.getXAxis(), params );\r\n            }\r\n          }\r\n\r\n          if ( lr ) {\r\n\r\n            if ( typeof func == 'string' ) {\r\n              serie.getYAxis()[ func ].apply( serie.getYAxis(), params );\r\n            } else {\r\n              func.apply( serie.getYAxis(), params );\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n        break;\r\n\r\n      default:\r\n\r\n        if ( !Array.isArray( axes ) ) {\r\n          axes = [ axes ];\r\n        }\r\n\r\n        for ( let axis of axes ) {\r\n\r\n          if ( axis.isX() && tb ) { // Not the best check\r\n\r\n            if ( typeof func == 'string' ) {\r\n              axis[ func ].apply( axis, params );\r\n            } else {\r\n              func.apply( axis, params );\r\n            }\r\n\r\n          } else if ( axis.isY() && lr ) { // Not the best check\r\n\r\n            if ( typeof func == 'string' ) {\r\n              axis[ func ].apply( axis, params );\r\n            } else {\r\n              func.apply( axis, params );\r\n            }\r\n\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default PluginZoom;","var memory = {},\r\n  memoryHead = {},\r\n  memoryCount = {},\r\n  memoryLimit = {};\r\n\r\nfunction emptyMemory( store ) {\r\n  memory[ store ] = {};\r\n  memoryCount[ store ] = 0;\r\n}\r\n\r\nfunction createStoreMemory( store, limit ) {\r\n  limit = limit || 50;\r\n  if ( !memory[ store ] ) {\r\n    memory[ store ] = {};\r\n    memoryCount[ store ] = 0;\r\n  }\r\n\r\n  memoryLimit[ store ] = limit;\r\n}\r\n\r\nfunction getFromMemory( store, index ) {\r\n  var obj, head;\r\n\r\n  if ( memory[ store ] && memory[ store ][ index ] ) {\r\n\r\n    head = memoryHead[ store ];\r\n\r\n    obj = memory[ store ][ index ];\r\n    obj.prev = head;\r\n    obj.next = head.next;\r\n    head.next.prev = obj;\r\n    head.next = obj;\r\n\r\n    memoryHead[ store ] = obj;\r\n    return obj.data;\r\n  }\r\n}\r\n\r\nfunction storeInMemory( store, index, data ) {\r\n\r\n  var toStore, toDelete, head;\r\n  if ( memory[ store ] && memoryCount[ store ] !== undefined && memoryLimit[ store ] ) {\r\n    head = memoryHead[ store ];\r\n\r\n    if ( memory[ store ][ index ] ) {\r\n\r\n      getFromMemory( store, index );\r\n      memory[ store ][ index ].data.data = data;\r\n      memory[ store ][ index ].data.timeout = Date.now();\r\n\r\n    } else {\r\n\r\n      toStore = {\r\n        data: {\r\n          data: data,\r\n          timeout: Date.now()\r\n        }\r\n      };\r\n\r\n      if ( typeof head == 'undefined' ) {\r\n        toStore.prev = toStore;\r\n        toStore.next = toStore;\r\n      } else {\r\n        toStore.prev = head.prev;\r\n        toStore.next = head.next;\r\n        head.next.prev = toStore;\r\n        head.next = toStore;\r\n      }\r\n\r\n      memoryHead[ store ] = toStore;\r\n      memory[ store ][ index ] = toStore;\r\n      memoryCount[ store ]++;\r\n    }\r\n\r\n    // Remove oldest one\r\n    if ( memoryCount[ store ] > memoryLimit[ store ] && head ) {\r\n      toDelete = head.next;\r\n      head.next.next.prev = head;\r\n      head.next = head.next.next;\r\n      toDelete.next.next = undefined;\r\n      toDelete.next.prev = undefined;\r\n      memoryCount[ store ]--;\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport function create( store, limitMemory ) {\r\n  createStoreMemory( store, limitMemory );\r\n}\r\n\r\nexport function get( store, index ) {\r\n  var result;\r\n  if ( ( result = getFromMemory( store, index ) ) != undefined ) {\r\n    return result;\r\n  }\r\n}\r\n\r\nexport function store( store, index, value ) {\r\n  storeInMemory( store, index, value );\r\n  return value;\r\n}\r\n\r\nexport function empty( store ) {\r\n  emptyMemory( store );\r\n}\r\n\r\nexport function exist( store ) {\r\n  return ( memory[ store ] );\r\n}\r\n\r\nexport default get;","import Graph from '../graph.core.js';\r\nimport LRU from '../graph.lru.js';\r\nimport * as util from '../graph.util.js';\r\n\r\nimport Plugin from './graph.plugin.js';\r\n\r\n/**\r\n * @class PluginTimeSerieManager\r\n * @implements Plugin\r\n */\r\nclass PluginTimeSerieManager extends Plugin {\r\n\r\n  constructor() {\r\n\r\n    super( ...arguments );\r\n\r\n    this.series = [];\r\n    this.plugins = [];\r\n    this.currentSlots = {};\r\n\r\n    this.requestLevels = new Map();\r\n    this.update = ( noRecalculate, force ) => {\r\n\r\n      this.series.forEach( function( serie ) {\r\n\r\n        this.updateSerie( serie, noRecalculate );\r\n\r\n      } );\r\n\r\n      if ( !noRecalculate ) {\r\n        this.recalculateSeries( force );\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n  static\r\n  default () {\r\n\r\n    return {\r\n\r\n      LRUName: 'PluginTimeSerieManager',\r\n      intervals: [ 1000, 15000, 60000, 900000, 3600000, 8640000 ],\r\n      maxParallelRequests: 3,\r\n      optimalPxPerPoint: 2,\r\n      nbPoints: 1000,\r\n      url: ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Init method\r\n   * @private\r\n   * @memberof PluginTimeSerieManager\r\n   */\r\n  init( graph, options ) {\r\n    this.graph = graph;\r\n    LRU.create( this.options.LRUName, 200 );\r\n    this.requestsRunning = 0;\r\n\r\n  }\r\n\r\n  setURL( url ) {\r\n    this.options.url = url;\r\n    return this;\r\n  }\r\n\r\n  setAvailableIntervals() {\r\n    this.options.intervals = arguments;\r\n  }\r\n\r\n  newSerie( serieName, serieOptions, serieType, dbElements, noZoneSerie ) {\r\n    var s = this.graph.newSerie( serieName, serieOptions, serieType );\r\n\r\n    this.currentSlots[ serieName ] = {\r\n      min: 0,\r\n      max: 0,\r\n      interval: 0\r\n    };\r\n\r\n    s.on( 'hide', function() {\r\n\r\n      if ( s._zoneSerie ) {\r\n\r\n        s._zoneSerie.hide();\r\n      }\r\n    } );\r\n\r\n    s.on( 'show', function() {\r\n\r\n      if ( s._zoneSerie ) {\r\n        s._zoneSerie.show();\r\n      }\r\n    } );\r\n\r\n    s.setInfo( 'timeSerieManagerDBElements', dbElements );\r\n\r\n    if ( !noZoneSerie ) {\r\n      s._zoneSerie = this.graph.newSerie( `${serieName }_zone`, {}, Graph.SERIE_ZONE );\r\n    }\r\n\r\n    this.series.push( s );\r\n    return s;\r\n  }\r\n\r\n  registerPlugin( plugin, event ) {\r\n\r\n    var index;\r\n    if ( ( index = this.plugins.indexOf( plugin ) ) > -1 ) {\r\n\r\n      for ( var i = 1; i < arguments.length; i++ ) {\r\n        plugin.removeListener( arguments[ i ], this.update );\r\n      }\r\n    }\r\n\r\n    for ( var i = 1; i < arguments.length; i++ ) {\r\n      plugin.on( arguments[ i ], this.update );\r\n    }\r\n  }\r\n\r\n  updateSerie( serie, noRecalculate ) {\r\n\r\n    var self = this;\r\n    var from = serie.getXAxis().getCurrentMin();\r\n    var to = serie.getXAxis().getCurrentMax();\r\n    var priority = 1;\r\n\r\n    var optimalInterval = this.getOptimalInterval( to - from );\r\n    var optimalIntervalIndex = this.options.intervals.indexOf( optimalInterval );\r\n    var interval;\r\n\r\n    this.cleanRegister( optimalIntervalIndex );\r\n\r\n    for ( var i = optimalIntervalIndex; i <= optimalIntervalIndex + 1; i++ ) {\r\n\r\n      interval = this.options.intervals[ i ];\r\n      var startSlotId = self.computeSlotID( from, interval );\r\n      var endSlotId = self.computeSlotID( to, interval );\r\n\r\n      var intervalMultipliers = [\r\n        [ 2, 5, 6 ],\r\n        [ 1, 2, 4 ],\r\n        [ 0, 1, 3 ]\r\n      ];\r\n\r\n      intervalMultipliers.forEach( function( multiplier ) {\r\n\r\n        var firstSlotId = startSlotId - multiplier[ 0 ] * ( endSlotId - startSlotId );\r\n        var lastSlotId = endSlotId + multiplier[ 0 ] * ( endSlotId - startSlotId );\r\n\r\n        var slotId = firstSlotId;\r\n\r\n        while ( slotId <= lastSlotId ) {\r\n\r\n          if ( self.computeTimeMin( slotId, interval ) > Date.now() ) {\r\n            break;\r\n          }\r\n\r\n          self.register( serie, slotId, interval, interval == optimalInterval ? multiplier[ 1 ] : multiplier[ 2 ], true, noRecalculate );\r\n          slotId++;\r\n        }\r\n\r\n      } );\r\n\r\n    }\r\n\r\n    this.processRequests();\r\n  }\r\n\r\n  cleanRegister( interval ) {\r\n\r\n    if ( !this.requestLevels ) {\r\n      return;\r\n    }\r\n\r\n    this.requestLevels.forEach( ( levelArray ) => {\r\n\r\n      levelArray.forEach( ( levelElement, levelIndex ) => {\r\n\r\n        if ( levelElement[ 4 ] < interval ) {\r\n          levelArray.splice( levelIndex, 1 );\r\n        }\r\n      } );\r\n\r\n    } );\r\n  }\r\n\r\n  register( serie, slotId, interval, priority, noProcess, noRecalculate ) {\r\n\r\n    var id = this.computeUniqueID( serie, slotId, interval );\r\n\r\n    var data = LRU.get( this.options.LRUName, id );\r\n\r\n    if ( !data || ( this.computeTimeMax( slotId, interval ) > Date.now() && data.timeout < ( Date.now() - ( noRecalculate ? 5000 : 100000 ) ) ) && priority == 1 ) {\r\n\r\n      this.request( serie, slotId, interval, priority, id, noProcess );\r\n    }\r\n  }\r\n\r\n  request( serie, slotId, interval, priority, slotName, noProcess ) {\r\n\r\n    for ( var i in this.requestLevels ) {\r\n\r\n      if ( i == priority ) {\r\n        continue;\r\n      }\r\n\r\n      if ( this.requestLevels[ i ][ slotName ] ) {\r\n\r\n        if ( this.requestLevels[ i ][ slotName ][ 0 ] !== 1 ) { // If the request is not pending\r\n\r\n          delete this.requestLevels[ i ][ slotName ];\r\n\r\n        } else {\r\n          this.requestLevels[ i ][ slotName ][ 5 ] = priority;\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    if ( this.requestLevels[ priority ] && this.requestLevels[ priority ][ slotName ] ) {\r\n      return;\r\n    }\r\n\r\n    this.requestLevels[ priority ] = this.requestLevels[ priority ] || {};\r\n    this.requestLevels[ priority ][ slotName ] = [ 0, slotName, serie.getName(), slotId, interval, priority, serie.getInfo( 'timeSerieManagerDBElements' ) ];\r\n\r\n    if ( !noProcess ) {\r\n      this.processRequests();\r\n    }\r\n  }\r\n\r\n  processRequests() {\r\n\r\n    if ( this.requestsRunning >= this.options.maxParallelRequests ) {\r\n      return;\r\n    }\r\n\r\n    var self = this,\r\n      currentLevelChecking = 1,\r\n      requestToMake;\r\n\r\n    while ( true ) {\r\n\r\n      for ( var i in this.requestLevels[ currentLevelChecking ] ) {\r\n\r\n        if ( this.requestLevels[ currentLevelChecking ][ i ][ 0 ] == 1 ) { // Running request\r\n          continue;\r\n        }\r\n\r\n        requestToMake = this.requestLevels[ currentLevelChecking ][ i ];\r\n        break;\r\n      }\r\n\r\n      if ( requestToMake ) {\r\n        break;\r\n      }\r\n\r\n      currentLevelChecking++;\r\n\r\n      if ( currentLevelChecking > 10 ) {\r\n        return;\r\n      }\r\n\r\n    }\r\n\r\n    this.requestsRunning++;\r\n\r\n    if ( !requestToMake ) {\r\n      return;\r\n    }\r\n\r\n    requestToMake[ 0 ] = 1;\r\n\r\n    util.ajaxGet( {\r\n\r\n      url: this.getURL( requestToMake ),\r\n      method: 'GET',\r\n      json: true\r\n\r\n    } ).done( function( data ) {\r\n\r\n      if ( data.status == 1 ) { // Success\r\n\r\n        self.requestsRunning--;\r\n\r\n        delete self.requestLevels[ currentLevelChecking ][ i ];\r\n\r\n        LRU.store( self.options.LRUName, requestToMake[ 1 ], data.data ); // Element 1 is the unique ID\r\n        self.processRequests();\r\n\r\n        if ( requestToMake[ 5 ] == 1 && Object.keys( self.requestLevels[ 1 ] ).length == 0 ) {\r\n\r\n          self.recalculateSeries( true );\r\n        }\r\n      }\r\n\r\n    } );\r\n  }\r\n\r\n  computeTimeMax( slotId, interval ) {\r\n    return ( slotId + 1 ) * ( interval * this.options.nbPoints );\r\n  }\r\n\r\n  computeTimeMin( slotId, interval ) {\r\n    return ( slotId ) * ( interval * this.options.nbPoints );\r\n  }\r\n\r\n  getURL( requestElements ) {\r\n\r\n    var url = this.options.url\r\n      .replace( '<measurementid>', requestElements[ 2 ] )\r\n      .replace( '<from>', this.computeTimeMin( requestElements[ 3 ], requestElements[ 4 ] ) )\r\n      .replace( '<to>', this.computeTimeMax( requestElements[ 3 ], requestElements[ 4 ] ) )\r\n      .replace( '<interval>', requestElements[ 4 ] );\r\n\r\n    var dbElements = requestElements[ 6 ] || {};\r\n\r\n    for ( var i in dbElements ) {\r\n      url = url.replace( `<${ i }>`, dbElements[ i ] );\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  getOptimalInterval( totalspan ) {\r\n\r\n    var optimalInterval = ( this.options.optimalPxPerPoint || 1 ) * totalspan / this.graph.getDrawingWidth(),\r\n      diff = Infinity,\r\n      optimalIntervalAmongAvailable;\r\n\r\n    this.options.intervals.forEach( function( interval ) {\r\n\r\n      var newDiff = Math.min( diff, Math.abs( interval - optimalInterval ) );\r\n      if ( diff !== newDiff ) {\r\n\r\n        optimalIntervalAmongAvailable = interval;\r\n        diff = newDiff;\r\n      }\r\n    } );\r\n\r\n    return optimalIntervalAmongAvailable || 1000;\r\n  }\r\n\r\n  computeUniqueID( serie, slotId, interval ) {\r\n    var extra = '';\r\n    var info = serie.getInfo( 'timeSerieManagerDBElements' );\r\n    for ( var i in info ) {\r\n      extra += `;${ i }:${ info[ i ]}`;\r\n    }\r\n\r\n    return `${serie.getName() };${ slotId };${ interval }${extra}`;\r\n  }\r\n\r\n  computeSlotID( time, interval ) {\r\n    return Math.floor( time / ( interval * this.options.nbPoints ) );\r\n  }\r\n\r\n  computeSlotTime( slotId, interval ) {\r\n    return slotId * ( interval * this.options.nbPoints );\r\n  }\r\n\r\n  getZoneSerie( serie ) {\r\n    return serie._zoneSerie;\r\n  }\r\n\r\n  updateZoneSerie( serieName ) {\r\n\r\n    var serie = this.graph.getSerie( serieName );\r\n\r\n    if ( !serie ) {\r\n      return;\r\n    }\r\n\r\n    if ( !serie._zoneSerie ) {\r\n      return;\r\n    }\r\n\r\n    serie._zoneSerie.setXAxis( serie.getXAxis() );\r\n    serie._zoneSerie.setYAxis( serie.getYAxis() );\r\n    serie._zoneSerie.setFillColor( serie.getLineColor() );\r\n    serie._zoneSerie.setLineColor( serie.getLineColor() );\r\n    serie._zoneSerie.setFillOpacity( 0.2 );\r\n    serie._zoneSerie.setLineOpacity( 0.3 );\r\n  }\r\n\r\n  recalculateSeries( force ) {\r\n\r\n    var self = this;\r\n\r\n    if ( this.locked ) {\r\n      return;\r\n    }\r\n\r\n    this.changed = false;\r\n\r\n    this.series.map( function( serie ) {\r\n      self.recalculateSerie( serie, force );\r\n    } );\r\n\r\n    /*if ( this.changed ) {\r\n        self.graph._applyToAxes( \"scaleToFitAxis\", [ this.graph.getXAxis(), false, undefined, undefined, false, true ], false, true );\r\n      }\r\n  */\r\n    this.changed = false;\r\n    //self.graph.autoscaleAxes();\r\n\r\n    self.graph.draw();\r\n  }\r\n\r\n  recalculateSerie( serie, force ) {\r\n\r\n    var from = serie.getXAxis().getCurrentMin(),\r\n      to = serie.getXAxis().getCurrentMax(),\r\n      interval = this.getOptimalInterval( to - from );\r\n\r\n    var startSlotId = this.computeSlotID( from, interval );\r\n    var endSlotId = this.computeSlotID( to, interval );\r\n\r\n    var data = [];\r\n    var dataMinMax = [];\r\n\r\n    if ( !force && interval == this.currentSlots[ serie.getName() ].interval && this.currentSlots[ serie.getName() ].min <= startSlotId && this.currentSlots[ serie.getName() ].max >= endSlotId ) {\r\n      return;\r\n    }\r\n\r\n    startSlotId -= 2;\r\n    endSlotId += 2;\r\n\r\n    this.currentSlots[ serie.getName() ].min = startSlotId;\r\n    this.currentSlots[ serie.getName() ].max = endSlotId;\r\n    this.currentSlots[ serie.getName() ].interval = interval;\r\n\r\n    var slotId = startSlotId;\r\n\r\n    while ( slotId <= endSlotId ) {\r\n\r\n      const lruData = LRU.get( this.options.LRUName, this.computeUniqueID( serie, slotId, interval ) );\r\n      if ( lruData ) {\r\n\r\n        data = data.concat( lruData.data.mean );\r\n        dataMinMax = dataMinMax.concat( lruData.data.minmax );\r\n\r\n      } else {\r\n\r\n        this.recalculateSerieUpwards( serie, slotId, interval, data, dataMinMax );\r\n      }\r\n\r\n      slotId++;\r\n    }\r\n\r\n    this.changed = true;\r\n\r\n    serie.setData( data );\r\n\r\n    if ( serie._zoneSerie ) {\r\n      serie._zoneSerie.setData( dataMinMax );\r\n    }\r\n  }\r\n\r\n  setIntervalCheck( interval ) {\r\n\r\n    if ( this.interval ) {\r\n      clearInterval( this.interval );\r\n    }\r\n\r\n    this.update( true, true );\r\n    this.interval = setInterval( () => {\r\n      this.update( true, false );\r\n    }, interval );\r\n  }\r\n\r\n  recalculateSerieUpwards( serie, downSlotId, downInterval, data, dataMinMax ) {\r\n\r\n    var intervals = this.options.intervals.slice( 0 );\r\n    intervals.sort();\r\n\r\n    var nextInterval = intervals[ intervals.indexOf( downInterval ) + 1 ] || -1;\r\n    if ( nextInterval < 0 ) {\r\n      return [];\r\n    }\r\n\r\n    var newSlotTime = this.computeSlotTime( downSlotId, downInterval );\r\n    var newSlotTimeEnd = this.computeSlotTime( downSlotId + 1, downInterval );\r\n    var newSlotId = this.computeSlotID( newSlotTime, nextInterval ),\r\n      start = false;\r\n\r\n    const lruData = LRU.get( this.options.LRUName, this.computeUniqueID( serie, newSlotId, nextInterval ) );\r\n    if ( lruData ) {\r\n\r\n      for ( var i = 0, l = lruData.data.mean.length; i < l; i += 2 ) {\r\n\r\n        if ( lruData.data.mean[ i ] < newSlotTime ) {\r\n          continue;\r\n\r\n        } else if ( start === false ) {\r\n          start = i;\r\n        }\r\n\r\n        if ( lruData.data.mean[ i ] >= newSlotTimeEnd ) {\r\n\r\n          data = data.concat( lruData.data.mean.slice( start, i ) );\r\n          dataMinMax = data.concat( lruData.data.minmax.slice( start, i ) );\r\n\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.recalculateSerieUpwards( serie, newSlotId, nextInterval, data, dataMinMax );\r\n  }\r\n\r\n  lockRedraw() {\r\n    this.locked = true;\r\n  }\r\n\r\n  unlockRedraw() {\r\n    this.locked = false;\r\n  }\r\n\r\n  isRedrawLocked() {\r\n    return !!this.locked;\r\n  }\r\n}\r\n\r\nexport default PluginTimeSerieManager;","import {\r\n  Waveform\r\n} from '../util/waveform.js';\r\n\r\nimport Plugin from './graph.plugin.js';\r\n\r\n/**\r\n * @class PluginSerieLineDifference\r\n * @implements Plugin\r\n */\r\nclass PluginSerieLineDifference extends Plugin {\r\n\r\n  constructor() {\r\n    super( ...arguments );\r\n  }\r\n\r\n  static\r\n  default () {\r\n    return {\r\n\r\n      positiveStyle: {\r\n\r\n        fillColor: 'green',\r\n        fillOpacity: 0.2,\r\n        strokeWidth: 0\r\n      },\r\n\r\n      negativeStyle: {\r\n        fillColor: 'red',\r\n        fillOpacity: 0.2,\r\n        strokeWidth: 0\r\n      },\r\n\r\n      from: 0,\r\n      to: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Init method\r\n   * @private\r\n   */\r\n  init( graph, options ) {\r\n    this.graph = graph;\r\n\r\n    this.series = [];\r\n    this.pathsPositive = [];\r\n    this.pathsNegative = [];\r\n\r\n    this.positivePolyline = this.graph.newShape( 'polyline' ).draw();\r\n\r\n    this.positivePolyline.\r\n    setFillColor( this.options.positiveStyle.fillColor ).\r\n    setFillOpacity( this.options.positiveStyle.fillOpacity ).\r\n    setStrokeWidth( this.options.positiveStyle.strokeWidth ).\r\n    applyStyle();\r\n\r\n    this.negativePolyline = this.graph.newShape( 'polyline' ).draw();\r\n\r\n    this.negativePolyline.\r\n    setFillColor( this.options.negativeStyle.fillColor ).\r\n    setFillOpacity( this.options.negativeStyle.fillOpacity ).\r\n    setStrokeWidth( this.options.negativeStyle.strokeWidth ).\r\n    applyStyle();\r\n  }\r\n\r\n  /**\r\n   * Assigns the two series for the shape. Postive values are defined when ```serieTop``` is higher than ```serieBottom```.\r\n   * @param {SerieLine} serieTop - The top serie\r\n   * @param {SerieLine} serieBottom - The bottom serie\r\n   */\r\n  setSeries( serieTop, serieBottom ) {\r\n    this.serie1 = serieTop;\r\n    this.serie2 = serieBottom;\r\n  }\r\n\r\n  /**\r\n   * Assigns the boundaries\r\n   */\r\n  setBoundaries( from, to ) {\r\n    this.options.from = from;\r\n    this.options.to = to;\r\n  }\r\n\r\n  /**\r\n   * @returns the starting value used to draw the zone\r\n   */\r\n  getFrom() {\r\n    return this.options.from;\r\n  }\r\n\r\n  /**\r\n   * @returns the ending value used to draw the zone\r\n   */\r\n  getTo() {\r\n    return this.options.to;\r\n  }\r\n\r\n  /**\r\n   * Calculates and draws the zone series\r\n   * @returns {Plugin} The current plugin instance\r\n   */\r\n  draw() {\r\n\r\n    var self = this;\r\n\r\n    const w1 = this.serie1.getWaveform();\r\n    const w2 = this.serie2.getWaveform();\r\n\r\n    const wFinal = w1.duplicate( true ).subtract( w2 ).add( w2 );\r\n    const wFinal2 = w1.duplicate( true ).subtract( w1.duplicate( true ).subtract( w2 ) );\r\n\r\n    const chunks = [];\r\n    let currentChunk;\r\n\r\n    var newChunk = ( force = false ) => {\r\n\r\n      if ( !force ) {\r\n        if ( currentChunk.wave1.length == 0 && currentChunk.wave2.length == 0 ) {\r\n          return;\r\n        }\r\n      }\r\n      currentChunk = {\r\n        above: undefined,\r\n        wave1: [],\r\n        wave2: []\r\n      };\r\n      chunks.push( currentChunk );\r\n    };\r\n\r\n    newChunk( true );\r\n\r\n    let currentlyAbove = true;\r\n\r\n    for ( var i = 0; i < wFinal.getLength(); i++ ) {\r\n\r\n      if ( isNaN( wFinal.getY( i ) ) || isNaN( wFinal2.getY( i ) ) ) {\r\n        newChunk();\r\n        continue;\r\n      }\r\n\r\n      if ( i > 0 && currentChunk.wave1.length > 0 ) {\r\n\r\n        if ( ( wFinal.getY( i ) > wFinal2.getY( i ) && !currentChunk.above ) ) {\r\n\r\n          const crossing = this.computeCrossing( wFinal.getX( i - 1 ), wFinal.getY( i - 1 ), wFinal.getX( i ), wFinal.getY( i ), wFinal2.getX( i - 1 ), wFinal2.getY( i - 1 ), wFinal2.getX( i ), wFinal2.getY( i ) );\r\n          currentChunk.wave1.push( [ crossing.x, crossing.y ] );\r\n          newChunk();\r\n          currentChunk.wave1.push( [ crossing.x, crossing.y ] );\r\n          currentChunk.above = true;\r\n        }\r\n\r\n        if ( ( wFinal.getY( i ) < wFinal2.getY( i ) && currentChunk.above ) ) {\r\n\r\n          const crossing = this.computeCrossing( wFinal.getX( i - 1 ), wFinal.getY( i - 1 ), wFinal.getX( i ), wFinal.getY( i ), wFinal2.getX( i - 1 ), wFinal2.getY( i - 1 ), wFinal2.getX( i ), wFinal2.getY( i ) );\r\n          currentChunk.wave1.push( [ crossing.x, crossing.y ] );\r\n          newChunk();\r\n          currentChunk.wave1.push( [ crossing.x, crossing.y ] );\r\n          currentChunk.above = false;\r\n\r\n        }\r\n      }\r\n\r\n      if ( currentChunk.wave1.length == 0 ) {\r\n        currentChunk.above = wFinal.getY( i ) > wFinal2.getY( 1 );\r\n      }\r\n\r\n      currentChunk.wave1.push( [ wFinal.getX( i ), wFinal.getY( i ) ] );\r\n      currentChunk.wave2.push( [ wFinal2.getX( i ), wFinal2.getY( i ) ] );\r\n    }\r\n\r\n    this.series.forEach( ( serie ) => serie.kill() );\r\n\r\n    this.series = chunks.forEach( ( chunk, index ) => {\r\n\r\n      const serie = this.graph.newSerie( `__graph_serielinedifference_${this.serie1.getName()}_${this.serie2.getName()}_${index}` );\r\n      const wave = new Waveform();\r\n\r\n      wave.setData(\r\n        chunk.wave1.map( ( el ) => el[ 1 ] ).concat( chunk.wave2.reverse().map( ( el ) => el[ 1 ] ) ),\r\n        chunk.wave1.map( ( el ) => el[ 0 ] ).concat( chunk.wave2.map( ( el ) => el[ 0 ] ) )\r\n      );\r\n\r\n      if ( chunk.wave1[ 0 ] ) {\r\n        wave.append( chunk.wave1[ 0 ][ 0 ], chunk.wave1[ 0 ][ 1 ] );\r\n      }\r\n\r\n      serie.setWaveform( wave );\r\n      serie.setXAxis( this.serie1.getXAxis() );\r\n      serie.setYAxis( this.serie1.getYAxis() );\r\n\r\n      if ( chunk.above ) {\r\n        serie.setFillColor( this.options.positiveStyle.fillColor );\r\n      } else {\r\n        serie.setFillColor( this.options.negativeStyle.fillColor );\r\n      }\r\n    } );\r\n\r\n  }\r\n\r\n  /**\r\n   * Finds the crossing point between two vector and returns it, or ```false``` if it is not within the x boundaries\r\n   * @returns {(Object|Boolean)} An object containing the crossing point in the following format: ```{ x: xCrossing, y: yCrossing }``` or ```false``` if no crossing point can be found\r\n   * @param {Number} x11 - First x point of the first vector\r\n   * @param {Number} y11 - First y point of the first vector\r\n   * @param {Number} x12 - Second x point of the first vector\r\n   * @param {Number} y12 - Second y point of the first vector\r\n   * @param {Number} x21 - First x point of the second vector\r\n   * @param {Number} y21 - First y point of the second vector\r\n   * @param {Number} y22 - Second x point of the second vector\r\n   * @param {Number} y22 - Second y point of the second vector\r\n   */\r\n  computeCrossing( x11, y11, x12, y12, x21, y21, x22, y22 ) {\r\n\r\n    var a1 = ( y12 - y11 ) / ( x12 - x11 );\r\n    var a2 = ( y22 - y21 ) / ( x22 - x21 );\r\n\r\n    var b1 = y12 - a1 * x12;\r\n    var b2 = y22 - a2 * x22;\r\n\r\n    if ( x11 == x12 || x21 == x22 ) {\r\n\r\n      return false;\r\n    }\r\n\r\n    if ( a1 == a2 ) {\r\n      return {\r\n        x: x11,\r\n        y1: y11,\r\n        y2: y11,\r\n        y: y11\r\n      };\r\n    }\r\n\r\n    var x = ( b1 - b2 ) / ( a2 - a1 );\r\n\r\n    if ( x > x12 || x < x11 || x < x21 || x > x22 ) {\r\n      return false;\r\n    }\r\n\r\n    return {\r\n      x: x,\r\n      y: a1 * x + b1\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns The positive polyline\r\n   */\r\n  getPositivePolyline() {\r\n    return this.positivePolyline;\r\n  }\r\n\r\n  /**\r\n   * @returns The negative polyline\r\n   */\r\n  getNegativePolyline() {\r\n    return this.negativePolyline;\r\n  }\r\n\r\n}\r\n\r\nexport default PluginSerieLineDifference;","import Graph from '../graph.core.js';\r\nimport AxisX from '../graph.axis.x.js';\r\nimport AxisY from '../graph.axis.y.js';\r\nimport * as util from '../graph.util.js';\r\nimport SerieLine from '../series/graph.serie.line.js';\r\nimport SerieScatter from '../series/graph.serie.scatter.js';\r\nimport Axis from '../graph.axis.js';\r\n\r\nimport Plugin from './graph.plugin.js';\r\n\r\nclass SerieLineExtended extends SerieLine {\r\n\r\n  constructor() {\r\n    super( ...arguments );\r\n\r\n    this.subSeries = [];\r\n  }\r\n\r\n  draw() {\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nclass SerieScatterExtended extends SerieScatter {\r\n\r\n  constructor() {\r\n\r\n    super( ...arguments );\r\n    this.subSeries = [];\r\n  }\r\n\r\n  draw() {\r\n    return this;\r\n  }\r\n\r\n  getMarkerForLegend() {\r\n    if ( !this.subSeries[ 0 ] ) {\r\n      return false;\r\n    }\r\n\r\n    return this.subSeries[ 0 ].getMarkerForLegend();\r\n  }\r\n}\r\n\r\nvar excludingMethods = [\r\n  'constructor',\r\n  'init',\r\n  'draw',\r\n  'setLineColor',\r\n  'setLineWidth',\r\n  'setLineStyle',\r\n  'getLineColor',\r\n  'getLineWidth',\r\n  'getLineStyle',\r\n  'setMarkers',\r\n  'getMarkerDom',\r\n  'getMarkerDomIndependant',\r\n  'getMarkerPath',\r\n  '_recalculateMarkerPoints',\r\n  'getSymbolForLegend',\r\n  '_getSymbolForLegendContainer'\r\n];\r\nvar addMethods = [];\r\n\r\nObject.getOwnPropertyNames( SerieLine.prototype ).concat( addMethods ).map( function( i ) {\r\n\r\n  if ( excludingMethods.indexOf( i ) > -1 ) {\r\n    return;\r\n  }\r\n\r\n  SerieLineExtended.prototype[ i ] = ( function( j ) {\r\n\r\n    return function() {\r\n\r\n      var args = arguments;\r\n      this.subSeries.map( ( subSerie ) => {\r\n        subSerie[ j ]( ...args );\r\n      } );\r\n    };\r\n\r\n  } )( i );\r\n} );\r\n\r\nvar returnMethods = [\r\n  'getSymbolForLegend'\r\n];\r\n\r\nvar addMethods = [\r\n  '_getSymbolForLegendContainer'\r\n];\r\n\r\nObject.getOwnPropertyNames( SerieLine.prototype ).map( function( i ) {\r\n\r\n  if ( returnMethods.indexOf( i ) == -1 ) {\r\n    return;\r\n  }\r\n\r\n  SerieLineExtended.prototype[ i ] = ( function( j ) {\r\n\r\n    return function() {\r\n      var args = arguments;\r\n      return this.subSeries[ 0 ][ j ]( ...args );\r\n    };\r\n\r\n  } )( i );\r\n\r\n  SerieScatterExtended.prototype[ i ] = ( function( j ) {\r\n\r\n    return function() {\r\n      var args = arguments;\r\n      return this.subSeries[ 0 ][ j ]( ...args );\r\n    };\r\n\r\n  } )( i );\r\n} );\r\n\r\naddMethods.map( ( method ) => {\r\n\r\n  SerieLineExtended.prototype[ method ] = ( function( j ) {\r\n\r\n    return function() {\r\n      var args = arguments;\r\n      return this.subSeries[ 0 ][ j ]( ...args );\r\n    };\r\n\r\n  } )( method );\r\n\r\n  SerieScatterExtended.prototype[ method ] = ( function( j ) {\r\n\r\n    return function() {\r\n      var args = arguments;\r\n      return this.subSeries[ 0 ][ j ]( ...args );\r\n    };\r\n\r\n  } )( method );\r\n\r\n} );\r\n\r\n/**\r\n * Axis splitting plugin\r\n * @augments Plugin\r\n */\r\nclass PluginAxisSplitting extends Plugin {\r\n\r\n  constructor( options ) {\r\n    super( ...arguments );\r\n    this.series = new Map();\r\n  }\r\n\r\n  static\r\n  default () {\r\n\r\n    return {\r\n      axes: {\r\n        margins: {\r\n          high: 5,\r\n          low: 5\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  init( graph ) {\r\n    this.graph = graph;\r\n  }\r\n\r\n  /**\r\n   *  Creates a new bottom split axis\r\n   *  @param {Object} [ options = {} ] The axis options\r\n   *  @return {Axis} The newly created split axis\r\n   */\r\n  newXAxis( options ) {\r\n    return this.newBottomAxis( options );\r\n  }\r\n\r\n  /**\r\n   *  Creates a new left split axis\r\n   *  @param {Object} [ options = {} ] The axis options\r\n   *  @return {Axis} The newly created split axis\r\n   */\r\n  newYAxis( options ) {\r\n    return this.newLeftAxis( options );\r\n  }\r\n\r\n  /**\r\n   *  Creates a new top split axis\r\n   *  @param {Object} [ options = {} ] The axis options\r\n   *  @return {Axis} The newly created split axis\r\n   */\r\n  newTopAxis( options ) {\r\n    options = this.getOptions( options );\r\n    return new SplitXAxis( this.graph, 'top', options );\r\n  }\r\n\r\n  /**\r\n   *  Creates a new bottom split axis\r\n   *  @param {Object} [ options = {} ] The axis options\r\n   *  @return {Axis} The newly created split axis\r\n   */\r\n  newBottomAxis( options ) {\r\n    options = this.getOptions( options );\r\n    return new SplitXAxis( this.graph, 'bottom', options );\r\n  }\r\n\r\n  /**\r\n   *  Creates a new left split axis\r\n   *  @param {Object} [ options = {} ] The axis options\r\n   *  @return {Axis} The newly created split axis\r\n   */\r\n  newLeftAxis( options ) {\r\n    options = this.getOptions( options );\r\n    return new SplitYAxis( this.graph, 'left', options );\r\n  }\r\n\r\n  /**\r\n   *  Creates a new right split axis\r\n   *  @param {Object} [ options = {} ] The axis options\r\n   *  @return {Axis} The newly created split axis\r\n   */\r\n  newRightAxis( options ) {\r\n    options = this.getOptions( options );\r\n    return new SplitYAxis( this.graph, 'right', options );\r\n  }\r\n\r\n  getOptions( options ) {\r\n    var defaults = {\r\n      marginMin: this.options.axes.margins.low,\r\n      marginMax: this.options.axes.margins.high,\r\n    };\r\n    return util.extend( true, defaults, options );\r\n  }\r\n\r\n  preDraw() {\r\n\r\n    var xAxis, yAxis;\r\n\r\n    //    for ( let { serie } of this.series.values() ) {\r\n    this.series.forEach( ( {\r\n      serie\r\n    } ) => {\r\n\r\n      xAxis = serie.getXAxis();\r\n      yAxis = serie.getYAxis();\r\n\r\n      let splits = 1;\r\n\r\n      if ( xAxis.splitNumber ) {\r\n        splits *= xAxis.splitNumber;\r\n      }\r\n\r\n      if ( yAxis.splitNumber ) {\r\n        splits *= yAxis.splitNumber;\r\n      }\r\n\r\n      while ( serie.subSeries.length < splits ) {\r\n\r\n        const name = `${serie.getName() }_${ serie.subSeries.length}`;\r\n\r\n        const s = this.graph.newSerie( name, {}, serie.getType() || Graph.SERIE_LINE );\r\n\r\n        s.excludedFromLegend = true;\r\n        s.styles = serie.styles;\r\n        s.waveform = serie.waveform; // Copy data\r\n\r\n        if ( serie.getType() == Graph.SERIE_LINE ) {\r\n          s.markerPoints = serie.markerPoints;\r\n          s.markerFamilies = serie.markerFamilies;\r\n        }\r\n\r\n        serie.subSeries.push( s );\r\n        serie.postInit();\r\n      }\r\n\r\n      while ( serie.subSeries.length > splits ) {\r\n\r\n        let subserie = this.graph.getSerie( `${serie.getName() }_${ serie.subSeries.length - 1}` );\r\n\r\n        if ( subserie && subserie.kill ) {\r\n          subserie.kill();\r\n        }\r\n        serie.subSeries.pop();\r\n\r\n      }\r\n\r\n      if ( !serie.getXAxis().splitNumber && serie.getXAxis().splitAxis ) {\r\n        serie.getXAxis().splitAxis();\r\n      }\r\n\r\n      if ( !serie.getYAxis().splitNumber && serie.getYAxis().splitAxis ) {\r\n        serie.getYAxis().splitAxis();\r\n      }\r\n\r\n      // Re-assign axes to the sub series\r\n      serie.subSeries.map( ( sserie, index ) => {\r\n\r\n        var xSubAxis, ySubAxis;\r\n\r\n        //sserie.groupMarkers = firstSubSerie.groupMarkers;\r\n\r\n        if ( serie.getXAxis().getSubAxis ) {\r\n          let subAxisIndex = index % ( ( xAxis.splitNumber || 1 ) );\r\n          xSubAxis = serie.getXAxis().getSubAxis( subAxisIndex );\r\n        } else {\r\n          xSubAxis = serie.getXAxis();\r\n        }\r\n\r\n        sserie.setXAxis( xSubAxis );\r\n\r\n        if ( serie.getYAxis().getSubAxis ) {\r\n\r\n          let subAxisIndex = Math.floor( index / ( ( xAxis.splitNumber || 1 ) ) );\r\n          ySubAxis = serie.getYAxis().getSubAxis( subAxisIndex );\r\n        } else {\r\n          ySubAxis = serie.getYAxis();\r\n        }\r\n\r\n        sserie.setYAxis( ySubAxis );\r\n\r\n        sserie.draw( true );\r\n      } );\r\n      //}\r\n\r\n    } );\r\n\r\n  }\r\n\r\n  /**\r\n   *  Creates a new serie\r\n   *  @param {(String|Number)} name - The name of the serie\r\n   *  @param {Object} [ options = {} ] The options of the serie\r\n   *  @param {String} type - The type of the serie\r\n   *  @return {Serie} The created serie\r\n   */\r\n  newSerie( name, options = {}, type ) {\r\n\r\n    switch ( type ) {\r\n\r\n      case 'line':\r\n        return this.newLineSerie( name, options );\r\n        break;\r\n\r\n      case 'scatter':\r\n        return this.newScatterSerie( name, options );\r\n        break;\r\n    }\r\n\r\n    throw `Cannot create a split serie of type ${ type}`;\r\n  }\r\n\r\n  /**\r\n   *  Creates a new line serie\r\n   *  @param {(String|Number)} name - The name of the serie\r\n   *  @param {Object} [ options = {} ] The options of the serie\r\n   *  @return {Serie} The created serie\r\n   */\r\n  newLineSerie( name, options ) {\r\n    var serieObj = {\r\n      type: 'lineSerie',\r\n      serie: new SerieLineExtended( this.graph, name, options, 'line' )\r\n    };\r\n    this.series.set( name, serieObj );\r\n    this.graph.series.push( serieObj.serie );\r\n    return serieObj.serie;\r\n  }\r\n\r\n  /**\r\n   *  Creates a new scatter serie\r\n   *  @param {(String|Number)} name - The name of the serie\r\n   *  @param {Object} [ options = {} ] The options of the serie\r\n   *  @return {Serie} The created serie\r\n   */\r\n  newScatterSerie( name, options ) {\r\n    var serieObj = {\r\n      type: 'scatterSerie',\r\n      serie: new SerieScatterExtended( this.graph, name, options, 'scatter' )\r\n    };\r\n    this.series.set( name, serieObj );\r\n    this.graph.series.push( serieObj.serie );\r\n    return serieObj.serie;\r\n  }\r\n\r\n}\r\n\r\nvar defaultAxisConstructorOptions = {\r\n  splitMarks: true\r\n};\r\n\r\nvar SplitAxis = function( mixin ) {\r\n\r\n  var delegateMethods = [\r\n\r\n    'turnGridsOff',\r\n    'turnGridsOn',\r\n    'gridsOff',\r\n    'gridsOn',\r\n    'setEngineering',\r\n    'setScientificScaleExponent',\r\n    'setScientific',\r\n    'setLabelColor',\r\n    'setSecondaryGridDasharray',\r\n    'setPrimaryGridDasharray',\r\n    'setSecondaryGridsOpacity',\r\n    'setPrimaryGridOpacity',\r\n    'setSecondaryGridWidth',\r\n    'setPrimaryGridWidth',\r\n    'setSecondaryGridColor',\r\n    'setPrimaryGridColor',\r\n    'setTicksLabelColor',\r\n    'setSecondaryTicksColor',\r\n    'setPrimaryTicksColor',\r\n    'setAxisColor',\r\n    'secondaryGridOn',\r\n    'secondaryGridOff',\r\n    'primaryGridOff',\r\n    'primaryGridOn',\r\n    'setSecondaryGrid',\r\n    'setPrimaryGrid',\r\n    'setGrids',\r\n    'setTickPosition',\r\n    'setExponentialFactor',\r\n    'setExponentialLabelFactor',\r\n    'setGridLinesStyle',\r\n    'forcePrimaryTickUnitMin',\r\n    'forcePrimaryTickUnitMax',\r\n    'forcePrimaryTickUnit',\r\n    'flip',\r\n    'show',\r\n    'hide',\r\n    'setDisplay'\r\n  ];\r\n\r\n  /**\r\n   * Split axis\r\n   * @mixes AxisX\r\n   * @mixes AxisY\r\n   * @name SplitAxis\r\n   * @static\r\n   */\r\n  var cl = class SplitAxis extends mixin {\r\n\r\n    constructor( graph, position, options = {} ) {\r\n\r\n      super( graph, position, options );\r\n      this.axes = [];\r\n      this.position = position;\r\n      this.constructorOptions = util.extend( true, {}, defaultAxisConstructorOptions, options );\r\n\r\n      this._splitVal = [];\r\n    }\r\n\r\n    /**\r\n     *  Calls a callback onto each chunk axes. The callback receives two parameters: 1) the ```axis``` itself and 2) the ```index``` of the axis in the stack\r\n     *  @param {Function} callback - The callback to be applied to each axes\r\n     *  @return {SplitAxis} The current axis instance\r\n     */\r\n    all( callback ) {\r\n\r\n      if ( !( typeof callback == 'function' ) ) {\r\n        return;\r\n      }\r\n\r\n      this.axes.map( callback );\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     *  Splits the axis into chunks at the positions defined as a list of parameters.\r\n     *  @param {Function} ...splits - The positions of axis splitting\r\n     *  @return {SplitAxis} The current axis instance\r\n     *  @example axis.splitAxis( 0.2, 0.5, 0.8 ); // Creates 4 chunks (0-20%, 20%-50%, 50%-80%, 80%-100%)\r\n     */\r\n    splitAxis( ...splits ) {\r\n\r\n      splits.push( 1 );\r\n      let splitNumber = splits.length;\r\n\r\n      while ( this.axes.length > splitNumber ) {\r\n        this.axes.pop().kill( true, true );\r\n      }\r\n\r\n      while ( this.axes.length < splitNumber ) {\r\n        let axis = new( this.getConstructor() )( this.graph, this.position, this.constructorOptions );\r\n        this.axes.push( axis );\r\n        axis.zoomLock = true;\r\n        axis.init( this.graph, this.constructorOptions );\r\n      }\r\n\r\n      let from = 0;\r\n      let i = 0;\r\n      for ( let axis of this.axes ) {\r\n\r\n        axis.options.marginMin = 10;\r\n        axis.options.marginMax = 10;\r\n\r\n        if ( i == 0 ) {\r\n          axis.options.marginMin = 0;\r\n        }\r\n\r\n        if ( i == this.axes.length - 1 ) {\r\n          axis.options.marginMax = 0;\r\n        }\r\n\r\n        axis.setSpan( from, ( from = splits[ i ] ) );\r\n        axis.setMinMaxFlipped();\r\n        i++;\r\n      }\r\n\r\n      this._splits = splits;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     *  Fixes the major tick interval of all axes based on the one provided as a parameter\r\n     *  @param {Number} axisIndex - The index of the reference axis (starting at 0)\r\n     *  @return {SplitAxis} The current axis instance\r\n     */\r\n    fixGridIntervalBasedOnAxis( axisIndex ) {\r\n\r\n      this.fixGridFor = axisIndex;\r\n      this.graph._axisHasChanged();\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     *  Spreads the chunks of the axis based on the relative interval of each one of them, so that the unit / px is constant for each chunk\r\n     *  @param {Boolean} bln - ```true``` to enable the spread, ```false``` otherwise\r\n     *  @return {SplitAxis} The current axis instance\r\n     */\r\n    splitSpread( bln ) {\r\n      this.autoSpread = !!bln;\r\n      return this;\r\n    }\r\n\r\n    hasAxis( axis ) {\r\n      return this.axes.indexOf( axis ) > -1;\r\n    }\r\n\r\n    _splitSpread() {\r\n\r\n      let splits = [],\r\n        total = 0,\r\n        currentSplit = 0;\r\n      for ( let split of this._splitVal ) {\r\n        total += split[ 1 ] - split[ 0 ];\r\n      }\r\n\r\n      for ( let split of this._splitVal ) {\r\n\r\n        splits.push( currentSplit += ( split[ 1 ] - split[ 0 ] ) / total );\r\n      }\r\n\r\n      splits.pop();\r\n      this.splitAxis( ...splits );\r\n    }\r\n\r\n    /**\r\n     *  Defines the boundaries of each chunk in axis unit.\r\n     *  @param {Array<(Array|Number)>} values - An array of either 2-component arrays (from-to) or number (mean)\r\n     *  @example axis.setChunkBoundaries( [ [ 12, 20 ], [ 100, 200 ] ] ); // First chunk from 12 to 20, second one from 100 to 200\r\n     *  @example axis.setChunkBoundaries( [ 12, [ 100, 200 ] ] ); // Second chunk from 100 to 200, first chunk with a mean at 12 and min / max determined by the relative widths of the chunks\r\n     *  @return {SplitAxis} The current axis instance\r\n     */\r\n    setChunkBoundaries( values ) {\r\n\r\n      let index = 0,\r\n        baseWidth,\r\n        baseWidthIndex;\r\n\r\n      for ( let axis of this.axes ) { // List all axes\r\n\r\n        // Two elements in the array => becomes the new reference\r\n        if ( Array.isArray( values[ index ] ) && values[ index ].length > 1 && !baseWidth ) {\r\n          baseWidth = values[ index ][ 1 ] - values[ index ][ 0 ];\r\n          baseWidthIndex = index;\r\n        }\r\n\r\n        if ( values[ index ].length == 1 || !Array.isArray( values[ index ] ) ) {\r\n          axis._mean = values[ index ];\r\n\r\n          if ( Array.isArray( axis._mean ) ) {\r\n            axis._mean = axis._mean[ 0 ];\r\n          }\r\n\r\n        } else {\r\n\r\n          axis\r\n            .forceMin( values[ index ][ 0 ] )\r\n            .forceMax( values[ index ][ 1 ] );\r\n        }\r\n\r\n        index++;\r\n      }\r\n\r\n      this._baseWidthVal = baseWidth;\r\n      this._baseWidthIndex = baseWidthIndex;\r\n\r\n      this._splitVal = values;\r\n\r\n      this.graph._axisHasChanged();\r\n\r\n      return this;\r\n    }\r\n\r\n    setMinMaxToFitSeries() {\r\n\r\n      if ( !this._splitVal || this._splitVal.length < 1 ) {\r\n        super.setMinMaxToFitSeries( ...arguments );\r\n        this._splitVal[ 0 ] = this._splitVal[ 0 ] || [];\r\n        this._splitVal[ this._splitVal.length - 1 ] = this._splitVal[ this._splitVal.length - 1 ] || [];\r\n\r\n        this._splitVal[ 0 ][ 0 ] = this.getCurrentMin();\r\n        this._splitVal[ this._splitVal.length - 1 ][ 1 ] = this.getCurrentMax();\r\n        this.setChunkBoundaries( this._splitVal );\r\n      }\r\n    }\r\n\r\n    draw() {\r\n\r\n      if ( this.autoSpread ) {\r\n        this._splitSpread();\r\n      }\r\n\r\n      let max = 0;\r\n      let unit;\r\n      let subAxis;\r\n      let spanReference;\r\n\r\n      if ( this._baseWidthIndex >= 0 && ( subAxis = this.getSubAxis( this._baseWidthIndex ) ) ) {\r\n        spanReference = subAxis.getSpan();\r\n      }\r\n\r\n      subAxis = undefined;\r\n\r\n      if ( this.fixGridFor >= 0 && ( subAxis = this.getSubAxis( this.fixGridFor ) ) ) {\r\n\r\n        if ( subAxis._mean !== undefined ) {\r\n          let width = ( subAxis.getSpan()[ 1 ] - subAxis.getSpan()[ 0 ] ) / ( spanReference[ 1 ] - spanReference[ 0 ] ) * this._baseWidthVal;\r\n          subAxis.forceMin( subAxis._mean - width / 2 );\r\n          subAxis.forceMax( subAxis._mean + width / 2 );\r\n        }\r\n\r\n        max = subAxis.draw();\r\n        unit = subAxis.getPrimaryTickUnit();\r\n      }\r\n\r\n      this.axes.map( ( axis ) => {\r\n\r\n        if ( subAxis === axis ) {\r\n          return;\r\n        }\r\n\r\n        if ( axis._mean !== undefined ) {\r\n          let width = ( axis.getSpan()[ 1 ] - axis.getSpan()[ 0 ] ) / ( spanReference[ 1 ] - spanReference[ 0 ] ) * this._baseWidthVal;\r\n          axis.forceMin( axis._mean - width / 2 );\r\n          axis.forceMax( axis._mean + width / 2 );\r\n        }\r\n\r\n        if ( unit ) {\r\n          axis.forcePrimaryTickUnit( unit );\r\n        }\r\n\r\n        max = Math.max( max, axis.draw() );\r\n\r\n      } );\r\n\r\n      //    this.drawLabel();\r\n      this.writeUnit();\r\n\r\n      return max;\r\n    }\r\n\r\n    setMinPx( min ) {\r\n\r\n      super.setMinPx( min );\r\n      for ( let axis of this.axes ) {\r\n        axis.setMinPx( min );\r\n      }\r\n    }\r\n\r\n    setMaxPx( max ) {\r\n\r\n      super.setMaxPx( max );\r\n\r\n      for ( let axis of this.axes ) {\r\n        axis.setMaxPx( max );\r\n      }\r\n    }\r\n\r\n    setShift() {\r\n\r\n      super.setShift( ...arguments );\r\n\r\n      for ( let axis of this.axes ) {\r\n        axis.setShift( ...arguments );\r\n      }\r\n    }\r\n\r\n    init() {\r\n      super.init( ...arguments );\r\n      this.splitAxis();\r\n    }\r\n\r\n    getAxisPosition() {\r\n      var max = 0;\r\n\r\n      this.axes.map( ( axis ) => {\r\n        max = Math.max( max, axis.getAxisPosition() );\r\n      } );\r\n\r\n      return max;\r\n    }\r\n\r\n    getSubAxis( index ) {\r\n\r\n      if ( this.axes.length <= index ) {\r\n        throw `Impossible to reach axis. Index ${ index } is out of range`;\r\n      }\r\n\r\n      return this.axes[ index ];\r\n    }\r\n\r\n    get splitNumber() {\r\n      return this._splits.length;\r\n    }\r\n  };\r\n\r\n  delegateMethods.map( ( methodName ) => {\r\n\r\n    cl.prototype[ methodName ] = ( function( method ) {\r\n\r\n      return function() {\r\n        //super[ method ]( ...arguments )\r\n\r\n        this.axes.map( ( axis ) => {\r\n          axis[ method ]( ...arguments );\r\n        } );\r\n        return this;\r\n      };\r\n\r\n    } )( methodName );\r\n  } );\r\n\r\n  return cl;\r\n};\r\n\r\nclass SplitXAxis extends SplitAxis( AxisX ) {\r\n\r\n  constructor( graph, topbottom, options ) {\r\n    super( ...arguments );\r\n    this.topbottom = topbottom;\r\n  }\r\n\r\n  getConstructor() {\r\n    return AxisX;\r\n  }\r\n\r\n  getAxisPosition() {\r\n    var max = super.getAxisPosition( ...arguments );\r\n\r\n    this.labelPosY = max;\r\n\r\n    if ( this.getLabel() ) {\r\n      max += this.graph.options.fontSize;\r\n    }\r\n\r\n    return max;\r\n  }\r\n\r\n  drawLabel() {\r\n    super.drawLabel();\r\n    this.label.setAttribute( 'y', ( this.top ? -1 : 1 ) * ( this.graph.options.fontSize + this.labelPosY ) );\r\n  }\r\n\r\n  draw() {\r\n    var height = super.draw( ...arguments );\r\n    this.drawLabel();\r\n    return height;\r\n  }\r\n\r\n}\r\n\r\nclass SplitYAxis extends SplitAxis( AxisY ) {\r\n\r\n  constructor( graph, leftright, options ) {\r\n    super( ...arguments );\r\n    ///this.leftright = leftright;\r\n  }\r\n\r\n  getConstructor() {\r\n    return AxisY;\r\n  }\r\n  /*\r\n    draw() {\r\n\r\n      if ( this.getLabel() ) {\r\n        this.axes.map( ( axis ) => {\r\n          axis.setAxisPosition( this.graph.options.fontSize );\r\n        } ); // Extra shift allowed for the label\r\n        //this.setShift( this.graph.options.fontSize );\r\n      }\r\n      return super.draw( ...arguments );\r\n    }\r\n  */\r\n  drawLabel() {\r\n    super.drawLabel();\r\n  }\r\n\r\n  equalizePosition( width ) {\r\n\r\n    var widthAfter = width;\r\n\r\n    if ( this.getLabel() ) {\r\n      this.axes.map( ( axis ) => {\r\n        widthAfter = Math.max( axis.equalizePosition( width ), widthAfter );\r\n      } ); // Extra shift allowed for the label\r\n      //this.setShift( this.graph.options.fontSize );\r\n    }\r\n\r\n    if ( this.getLabel() ) {\r\n      this.placeLabel( this.left ? -widthAfter : widthAfter );\r\n      return widthAfter + this.graph.options.fontSize;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nutil.mix( SplitXAxis, new AxisX() );\r\nutil.mix( SplitYAxis, new AxisY() );\r\n\r\nexport default PluginAxisSplitting;","import * as util from '../graph.util.js';\r\n\r\nimport Plugin from './graph.plugin.js';\r\n\r\n/**\r\n * The intent of this plugin is to provide methods for the user to make the traces on the graph automatically different\r\n * Options to provide colorization, markers and line styles should be provided\r\n * @extends Plugin\r\n */\r\nclass PluginMakeTracesDifferent extends Plugin {\r\n\r\n  constructor() {\r\n    super( ...arguments );\r\n  }\r\n\r\n  init( graph, options ) {\r\n    super.init( graph, options );\r\n  }\r\n  // Load this with defaults\r\n  static\r\n  default () {\r\n\r\n    return {\r\n\r\n    };\r\n  }\r\n\r\n  checkHSL( color ) {\r\n\r\n    let result = {},\r\n      hue, saturation, lightness;\r\n\r\n    if ( ( hue = ( color.h || color.hue ) ) ) {\r\n\r\n      if ( hue < 1 ) {\r\n        hue = Math.round( hue * 360 );\r\n      }\r\n\r\n      result.hue = hue;\r\n    } else {\r\n      result.h = 0;\r\n    }\r\n\r\n    if ( ( saturation = ( color.s || color.saturation ) ) ) {\r\n\r\n      if ( saturation > 1 ) {\r\n        saturation /= 100;\r\n      }\r\n\r\n      result.saturation = saturation;\r\n    } else {\r\n      result.saturation = 0.75;\r\n    }\r\n\r\n    if ( ( lightness = ( color.lightness || color.l ) ) ) {\r\n\r\n      if ( lightness > 1 ) {\r\n        lightness /= 100;\r\n      }\r\n\r\n      result.lightness = lightness;\r\n    } else {\r\n      result.lightness = 0.5;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  buildHSLString( hsl ) {\r\n    return `hsl( ${ Math.round( hsl.h ) }, ${ Math.round( hsl.s * 100 ) }%, ${ Math.round( hsl.l * 100 ) }%)`;\r\n  }\r\n\r\n  colorizeAll( options, callback = false ) {\r\n\r\n    let series,\r\n      seriesLength;\r\n\r\n    if ( options.serieTypes ) {\r\n\r\n      if ( !Array.isArray( options.serieTypes ) ) {\r\n        options.serieTypes = [ options.serieTypes ];\r\n      }\r\n\r\n      series = this.graph.allSeries( ...options.serieTypes );\r\n    } else {\r\n      series = this.graph.getSeries();\r\n    }\r\n\r\n    seriesLength = series.length;\r\n\r\n    if ( !options.startingColorHSL ) {\r\n\r\n      if ( options.colorHSL ) {\r\n        options.startingColorHSL = this.checkHSL( options.colorHSL );\r\n      } else {\r\n        throw 'No starting color was provided. There must exist either options.colorHSL or options.startingColorHSL';\r\n      }\r\n    }\r\n\r\n    if ( !options.endingColorHSL ) {\r\n\r\n      if ( !options.affect || ![ 'h', 's', 'l', 'hue', 'saturation', 'lightness' ].include( options.affect ) ) {\r\n        options.affect = 'h';\r\n      }\r\n\r\n      switch ( options.affect ) {\r\n\r\n        case 'h':\r\n        case 'hue':\r\n          options.endingColorHSL = {\r\n            h: options.startingColorHSL.h + 300,\r\n            s: options.startingColorHSL.s,\r\n            l: options.startingColorHSL.l\r\n          };\r\n          break;\r\n\r\n        case 'saturation':\r\n        case 's':\r\n          let endS;\r\n\r\n          if ( options.startingColorHSL.s > 0.5 ) {\r\n            endS = 0;\r\n          } else {\r\n            endS = 1;\r\n          }\r\n\r\n          options.endingColorHSL = {\r\n            h: options.startingColorHSL.h,\r\n            s: endS,\r\n            l: options.startingColorHSL.l\r\n          };\r\n          break;\r\n\r\n        case 'lightness':\r\n        case 'l':\r\n          let endL;\r\n\r\n          if ( options.startingColorHSL.l > 0.5 ) {\r\n            endL = 0;\r\n          } else {\r\n            endL = 0.75;\r\n          }\r\n\r\n          options.endingColorHSL = {\r\n            h: options.startingColorHSL.h,\r\n            s: options.startingColorHSL.s,\r\n            l: endL\r\n          };\r\n          break;\r\n      }\r\n    } else {\r\n      options.endingColorHSL = Object.assign( {}, options.startingColorHSL, options.endingColorHSL );\r\n    }\r\n\r\n    return series.map( ( serie, index ) => {\r\n\r\n      if ( !serie.setLineColor ) {\r\n        throw `The serie ${ serie.getName() } does not implement the method \\`startingColor\\``;\r\n      }\r\n\r\n      let colorString;\r\n\r\n      if ( seriesLength == 1 ) {\r\n\r\n        colorString = this.buildHSLString( {\r\n          h: options.startingColorHSL.h,\r\n          s: options.startingColorHSL.s,\r\n          l: options.startingColorHSL.l\r\n        } );\r\n\r\n      } else {\r\n\r\n        colorString = this.buildHSLString( {\r\n          h: options.startingColorHSL.h + index / ( seriesLength - 1 ) * ( options.endingColorHSL.h - options.startingColorHSL.h ),\r\n          s: options.startingColorHSL.s + index / ( seriesLength - 1 ) * ( options.endingColorHSL.s - options.startingColorHSL.s ),\r\n          l: options.startingColorHSL.l + index / ( seriesLength - 1 ) * ( options.endingColorHSL.l - options.startingColorHSL.l )\r\n        } );\r\n      }\r\n\r\n      serie.setLineColor( colorString );\r\n\r\n      if ( typeof callback == 'function' ) {\r\n        callback( index, colorString );\r\n      }\r\n\r\n      return colorString;\r\n    } );\r\n  }\r\n}\r\n\r\nexport default PluginMakeTracesDifferent;","import * as util from '../graph.util.js';\r\n\r\nimport Plugin from './graph.plugin.js';\r\n\r\n/*\r\n  What is it ?\r\n    It is a plugin for automatic peak detection on a line serie\r\n\r\n  How to use ?\r\n    Basic usage:\r\n\r\n    let graph = new Graph(\"dom\", {\r\n      plugins: {\r\n        'peakPicking': {}\r\n      }\r\n      }\r\n    );\r\n\r\n    let wv = Graph.newWaveform();\r\n    wv.setData( [ 1, 2, 1, 2, 1, 2, 1, 2, 1, 2 ] );\r\n    let s = graph.newSerie(\"serie\").setWaveform( wv ).autoAxis();\r\n\r\n    graph.getPlugin('peakPicking').setSerie( s );\r\n    graph.draw();\r\n*/\r\n\r\n/**\r\n * @extends Plugin\r\n */\r\nclass PluginPeakPicking extends Plugin {\r\n  constructor() {\r\n    super( ...arguments );\r\n  }\r\n\r\n  static\r\n  default () {\r\n    return {\r\n      autoPeakPicking: false,\r\n      autoPeakPickingNb: 4,\r\n      autoPeakPickingMinDistance: 10,\r\n      autoPeakPickingFormat: false,\r\n      autoPeakPickingAllowAllY: false\r\n    };\r\n  }\r\n\r\n  init( graph, options ) {\r\n    super.init( graph, options );\r\n    this.picks = [];\r\n\r\n    for ( var n = 0, m = this.options.autoPeakPickingNb; n < m; n++ ) {\r\n      var shape = this.graph.newShape( {\r\n        type: 'label',\r\n        label: {\r\n          text: '',\r\n          position: {\r\n            x: 0\r\n          },\r\n          anchor: 'middle'\r\n        },\r\n\r\n        selectable: true,\r\n\r\n        shapeOptions: {\r\n          minPosY: 15\r\n        }\r\n      } );\r\n\r\n      shape.draw();\r\n\r\n      this.picks.push( shape );\r\n    }\r\n  }\r\n\r\n  setSerie( serie ) {\r\n    this.serie = serie;\r\n\r\n    this.picks.map( ( pick ) => {\r\n      pick.show();\r\n    } );\r\n  }\r\n\r\n  serieRemoved( serie ) {\r\n    if ( this.serie == serie ) {\r\n      this.picks.map( ( pick ) => {\r\n        pick.hide();\r\n      } );\r\n    }\r\n  }\r\n\r\n  preDraw() {\r\n    if ( !this.serie ) {\r\n      return;\r\n    }\r\n\r\n    this.detectedPeaks = [];\r\n    this.lastYPeakPicking = false;\r\n  }\r\n\r\n  postDraw() {\r\n    if ( !this.serie ) {\r\n      return;\r\n    }\r\n    let lookForMaxima = true;\r\n    let lookForMinima = false;\r\n    let lastYPeakPicking;\r\n    let peaks = [];\r\n\r\n    let waveform = this.serie.getWaveform();\r\n\r\n    if ( !waveform ) {\r\n      throw 'The serie must have a waveform for the peak picking to work';\r\n    }\r\n\r\n    let length = waveform.getLength(),\r\n      i = 0,\r\n      y;\r\n\r\n    for ( ; i < length; i++ ) {\r\n      y = waveform.getY( i );\r\n\r\n      if ( this.serie.options.lineToZero ) {\r\n        peaks.push( [ waveform.getX( i ), y ] );\r\n        continue;\r\n      }\r\n\r\n      if ( !lastYPeakPicking ) {\r\n        lastYPeakPicking = [ waveform.getX( i ), y ];\r\n        continue;\r\n      }\r\n\r\n      if (\r\n        ( y >= lastYPeakPicking[ 1 ] && lookForMaxima ) ||\r\n        ( y <= lastYPeakPicking[ 1 ] && lookForMinima )\r\n      ) {\r\n        lastYPeakPicking = [ waveform.getX( i ), y ];\r\n      } else if (\r\n        ( y < lastYPeakPicking[ 1 ] && lookForMaxima ) ||\r\n        ( y > lastYPeakPicking[ 1 ] && lookForMinima )\r\n      ) {\r\n        if ( lookForMinima ) {\r\n          lookForMinima = false;\r\n          lookForMaxima = true;\r\n        } else {\r\n          lookForMinima = true;\r\n          lookForMaxima = false;\r\n\r\n          peaks.push( lastYPeakPicking );\r\n          lastYPeakPicking = false;\r\n        }\r\n\r\n        lastYPeakPicking = [ waveform.getX( i ), y ];\r\n      }\r\n    }\r\n\r\n    var ys = peaks;\r\n    var x,\r\n      px,\r\n      passed = [],\r\n      px,\r\n      l = ys.length,\r\n      k,\r\n      m,\r\n      index;\r\n\r\n    i = 0;\r\n\r\n    var selected = this.graph.selectedShapes.map( function( shape ) {\r\n      return shape.getProp( 'xval' );\r\n    } );\r\n\r\n    ys.sort( function( a, b ) {\r\n      return b[ 1 ] - a[ 1 ];\r\n    } );\r\n\r\n    m = 0;\r\n\r\n    for ( ; i < l; i++ ) {\r\n      x = ys[ i ][ 0 ];\r\n      px = this.serie.getX( x );\r\n      k = 0;\r\n      y = this.serie.getY( ys[ i ][ 1 ] );\r\n\r\n      if (\r\n        px < this.serie.getXAxis().getMinPx() ||\r\n        px > this.serie.getXAxis().getMaxPx()\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      if ( !this.options.autoPeakPickingAllowAllY &&\r\n        ( y > this.serie.getYAxis().getMinPx() ||\r\n          y < this.serie.getYAxis().getMaxPx() )\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      // Distance check\r\n      for ( ; k < passed.length; k++ ) {\r\n        if (\r\n          Math.abs( passed[ k ] - px ) < this.options.autoPeakPickingMinDistance\r\n        ) {\r\n          break;\r\n        }\r\n      }\r\n      if ( k < passed.length ) {\r\n        continue;\r\n      }\r\n\r\n      // Distance check end\r\n\r\n      // If the retained one has already been selected somewhere, continue;\r\n      if ( ( index = selected.indexOf( x ) ) > -1 ) {\r\n        passed.push( px );\r\n        continue;\r\n      }\r\n\r\n      if ( !this.picks[ m ] ) {\r\n        return;\r\n      }\r\n\r\n      //    this.picks[ m ].show();\r\n\r\n      if ( this.serie.getYAxis().getPx( ys[ i ][ 1 ] ) - 20 < 0 ) {\r\n        this.picks[ m ].setLabelPosition( {\r\n          x: x,\r\n          y: '5px'\r\n        } );\r\n\r\n        this.picks[ m ].setLabelBaseline( 'hanging' );\r\n      } else {\r\n        this.picks[ m ].setLabelBaseline( 'no-change' );\r\n\r\n        this.picks[ m ].setLabelPosition( {\r\n          x: x,\r\n          y: ys[ i ][ 1 ],\r\n          dy: '-15px'\r\n        } );\r\n      }\r\n\r\n      this.picks[ m ].setProp( 'xval', x );\r\n\r\n      if ( this.options.autoPeakPickingFormat ) {\r\n        this.picks[ m ].setLabelText(\r\n          this.options.autoPeakPickingFormat.call( this.picks[ m ], x, m )\r\n        );\r\n      } else {\r\n        this.picks[ m ].setLabelText( String( Math.round( x * 1000 ) / 1000 ) );\r\n      }\r\n\r\n      this.picks[ m ].makeLabels();\r\n\r\n      m++;\r\n      while ( this.picks[ m ] && this.picks[ m ].isSelected() ) {\r\n        m++;\r\n      }\r\n\r\n      if ( passed.length == this.options.autoPeakPickingNb ) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides the automatic peak picking (see the autoPeakPicking option)\r\n   * @memberof SerieLine\r\n   */\r\n  hidePeakPicking( lock ) {\r\n    if ( !this._hidePeakPickingLocked ) {\r\n      this._hidePeakPickingLocked = lock;\r\n    }\r\n\r\n    if ( !this.picks ) {\r\n      return;\r\n    }\r\n    for ( var i = 0; i < this.picks.length; i++ ) {\r\n      this.picks[ i ].hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the automatic peak picking (see the autoPeakPicking option)\r\n   * @memberof SerieLine\r\n   */\r\n  showPeakPicking( unlock ) {\r\n    if ( this._hidePeakPickingLocked && !unlock ) {\r\n      return;\r\n    }\r\n\r\n    if ( !this.picks ) {\r\n      return;\r\n    }\r\n\r\n    for ( var i = 0; i < this.picks.length; i++ ) {\r\n      this.picks[ i ].show();\r\n    }\r\n  }\r\n\r\n  killPeakPicking() {\r\n    if ( this.picks ) {\r\n      for ( var i = 0, l = this.picks.length; i < l; i++ ) {\r\n        this.picks[ i ].kill();\r\n      }\r\n    }\r\n  }\r\n\r\n  getSerie() {\r\n    return this.serie;\r\n  }\r\n}\r\n\r\nexport default PluginPeakPicking;","import Graph from './graph.core.js';\r\nimport GraphPosition from './graph.position.js';\r\nimport GraphLegend from './graph.legend.js';\r\nimport AxisX from './graph.axis.x.js';\r\nimport AxisY from './graph.axis.y.js';\r\nimport AxisXBar from './graph.axis.x.bar.js';\r\nimport AxisXTime from './graph.axis.x.time.js';\r\nimport SerieLine from './series/graph.serie.line.js';\r\nimport SerieLine3D from './series/graph.serie.line.3d.js';\r\nimport SerieBar from './series/graph.serie.bar.js';\r\nimport SerieBox from './series/graph.serie.box.js';\r\nimport SerieLineColor from './series/graph.serie.line.colored.js';\r\nimport SerieScatter from './series/graph.serie.scatter.js';\r\nimport SerieZone from './series/graph.serie.zone.js';\r\nimport SerieZone3D from './series/graph.serie.zone.3d.js';\r\nimport SerieDensityMap from './series/graph.serie.densitymap.js';\r\nimport SerieContour from './series/graph.serie.contour.js';\r\nimport Shape from './shapes/graph.shape.js';\r\nimport ShapeAreaUnderCurve from './shapes/graph.shape.areaundercurve.js';\r\nimport ShapeArrow from './shapes/graph.shape.arrow.js';\r\nimport ShapeEllipse from './shapes/graph.shape.ellipse.js';\r\nimport ShapeLabel from './shapes/graph.shape.label.js';\r\nimport ShapePolyline from './shapes/graph.shape.polyline.js';\r\nimport ShapePolygon from './shapes/graph.shape.polygon.js';\r\nimport ShapeLine from './shapes/graph.shape.line.js';\r\nimport ShapeNMRIntegral from './shapes/graph.shape.nmrintegral.js';\r\nimport ShapePeakIntegration2D from './shapes/graph.shape.peakintegration2d.js';\r\nimport ShapeRect from './shapes/graph.shape.rect.js';\r\nimport ShapeCross from './shapes/graph.shape.cross.js';\r\nimport ShapePeakBoundariesCenter from './shapes/graph.shape.peakboundariescenter.js';\r\nimport ShapeHTML from './shapes/graph.shape.html.js';\r\nimport GraphPlugin from './plugins/graph.plugin.js';\r\nimport GraphPluginDrag from './plugins/graph.plugin.drag.js';\r\nimport GraphPluginShape from './plugins/graph.plugin.shape.js';\r\nimport GraphPluginSelectScatter from './plugins/graph.plugin.selectScatter.js';\r\nimport GraphPluginZoom from './plugins/graph.plugin.zoom.js';\r\nimport GraphPluginTimeSerieManager from './plugins/graph.plugin.timeseriemanager.js';\r\nimport GraphPluginSerieLineDifference from './plugins/graph.plugin.serielinedifference.js';\r\nimport GraphPluginAxisSplitting from './plugins/graph.plugin.axissplitting.js';\r\nimport GraphPluginMakeTracesDifferent from './plugins/graph.plugin.makeTracesDifferent.js';\r\nimport GraphPluginPeakPicking from './plugins/graph.plugin.peakpicking.js';\r\nimport {\r\n  Waveform\r\n} from './util/waveform.js';\r\nimport FitLM from './util/fit_lm.js';\r\n\r\n// Corrent naming is important here !\r\n\r\nGraph.registerConstructor( 'graph.position', GraphPosition );\r\n\r\nGraph.registerConstructor( 'graph.axis.x', AxisX );\r\nGraph.registerConstructor( 'graph.axis.y', AxisY );\r\nGraph.registerConstructor( 'graph.axis.x.bar', AxisXBar );\r\nGraph.registerConstructor( 'graph.axis.x.time', AxisXTime );\r\n\r\nGraph.registerConstructor( 'graph.serie.line', SerieLine );\r\nGraph.registerConstructor( 'graph.serie.line.3d', SerieLine3D );\r\nGraph.registerConstructor( 'graph.serie.line.color', SerieLineColor );\r\nGraph.registerConstructor( 'graph.serie.contour', SerieContour );\r\nGraph.registerConstructor( 'graph.serie.bar', SerieBar );\r\nGraph.registerConstructor( 'graph.serie.box', SerieBox );\r\nGraph.registerConstructor( 'graph.serie.scatter', SerieScatter );\r\nGraph.registerConstructor( 'graph.serie.zone', SerieZone );\r\nGraph.registerConstructor( 'graph.serie.zone.3d', SerieZone3D );\r\nGraph.registerConstructor( 'graph.serie.densitymap', SerieDensityMap );\r\n\r\nGraph.registerConstructor( Graph.SERIE_LINE, SerieLine );\r\nGraph.registerConstructor( Graph.SERIE_LINE_3D, SerieLine3D );\r\nGraph.registerConstructor( Graph.SERIE_LINE_COLORED, SerieLineColor );\r\nGraph.registerConstructor( Graph.SERIE_CONTOUR, SerieContour );\r\nGraph.registerConstructor( Graph.SERIE_BAR, SerieBar );\r\nGraph.registerConstructor( Graph.SERIE_BOX, SerieBox );\r\nGraph.registerConstructor( Graph.SERIE_SCATTER, SerieScatter );\r\nGraph.registerConstructor( Graph.SERIE_ZONE, SerieZone );\r\nGraph.registerConstructor( Graph.SERIE_ZONE_3D, SerieZone3D );\r\nGraph.registerConstructor( Graph.SERIE_DENSITYMAP, SerieDensityMap );\r\n\r\n//Graph.registerConstructor( \"graph.serie.line.broken\", GraphSerieLineBroken );\r\n\r\nGraph.registerConstructor( 'graph.plugin.shape', GraphPluginShape );\r\nGraph.registerConstructor( 'graph.plugin.drag', GraphPluginDrag );\r\nGraph.registerConstructor( 'graph.plugin.zoom', GraphPluginZoom );\r\nGraph.registerConstructor( 'graph.plugin.selectScatter', GraphPluginSelectScatter );\r\nGraph.registerConstructor( 'graph.plugin.timeSerieManager', GraphPluginTimeSerieManager );\r\nGraph.registerConstructor( 'graph.plugin.serielinedifference', GraphPluginSerieLineDifference );\r\nGraph.registerConstructor( 'graph.plugin.serieLineDifference', GraphPluginSerieLineDifference );\r\nGraph.registerConstructor( 'graph.plugin.axissplitting', GraphPluginAxisSplitting );\r\nGraph.registerConstructor( 'graph.plugin.makeTracesDifferent', GraphPluginMakeTracesDifferent );\r\nGraph.registerConstructor( 'graph.plugin.peakPicking', GraphPluginPeakPicking );\r\n\r\nGraph.registerConstructor( 'graph.shape', Shape );\r\nGraph.registerConstructor( 'graph.shape.areaundercurve', ShapeAreaUnderCurve );\r\nGraph.registerConstructor( 'graph.shape.arrow', ShapeArrow );\r\nGraph.registerConstructor( 'graph.shape.ellipse', ShapeEllipse );\r\nGraph.registerConstructor( 'graph.shape.polygon', ShapePolygon );\r\nGraph.registerConstructor( 'graph.shape.label', ShapeLabel );\r\nGraph.registerConstructor( 'graph.shape.polyline', ShapePolyline );\r\nGraph.registerConstructor( 'graph.shape.line', ShapeLine );\r\nGraph.registerConstructor( 'graph.shape.nmrintegral', ShapeNMRIntegral );\r\nGraph.registerConstructor( 'graph.shape.html', ShapeHTML );\r\nGraph.registerConstructor( 'graph.shape.peakintegration2d', ShapePeakIntegration2D );\r\n//  Graph.registerConstructor( \"graph.shape.peakinterval\", GraphShapePeakInterval );\r\n//  Graph.registerConstructor( \"graph.shape.peakinterval2\", GraphShapePeakInterval2 );\r\n//  Graph.registerConstructor( \"graph.shape.rangex\", GraphShapeRangeX );\r\nGraph.registerConstructor( 'graph.shape.rect', ShapeRect );\r\nGraph.registerConstructor( 'graph.shape.rectangle', ShapeRect );\r\nGraph.registerConstructor( 'graph.shape.cross', ShapeCross );\r\n//Graph.registerConstructor( \"graph.shape.zoom2d\", GraphShapeZoom2D );\r\nGraph.registerConstructor( 'graph.shape.peakboundariescenter', ShapePeakBoundariesCenter );\r\n\r\n//   Graph.registerConstructor( \"graph.toolbar\", GraphToolbar );\r\nGraph.registerConstructor( 'graph.legend', GraphLegend );\r\nGraph.registerConstructor( 'graph.waveform', Waveform );\r\n\r\nexport default Graph;"],"file":"jsgraph-module.min.js"}