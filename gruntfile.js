

module.exports = function(grunt) {


    grunt.initConfig({



        build: {

            all: {
                
                output: 'dist/all.js'
            }
        },



    });


    function convert() {

        grunt.log.writeln( arguments );
    }

    grunt.registerMultiTask( 'build', 'Build jsGraphs distributions', function() {

        var done = this.async();
        var targetOutput = this.data.output;

        var rdefineEnd = /\}\s*\)\s*;[^}\w]*$/;


        /**
         * Strip all definitions generated by requirejs
         * Convert "var" modules to var declarations
         * "var module" means the module only contains a return
         * statement that should be converted to a var declaration
         * This is indicated by including the file in any "var" folder
         * @param {String} name
         * @param {String} path
         * @param {String} contents The contents to be written (including their AMD wrappers)
         */
        var buildConvert = function( name, path, contents ) {
            var amdName;
            // Convert var modules
       /*     if ( /.\/var\//.test( path ) ) {
                contents = contents
                    .replace( /define\([\w\W]*?return/, "var " + (/var\/([\w-]+)/.exec(name)[1]) + " =" )
                    .replace( rdefineEnd, "" );

            } else {
*/
                if( name !== 'graph' ) {
                    matches = contents
                        .match( /define\s*\(\s*'([^']*)'\s*,\s*\[\s*(.*)\s*\]\s*,\s*function\s*\(\s*([^)]*)\s*\)/i );

                    if( ! matches ) {
                        grunt.log.writeln("Possible error for file " + name + "(" + path + "). No define found");
                        grunt.log.writeln("Trying anonymous module");

                         matches = contents
                            .match( /define\s*\(\s*\[\s*(.*)\s*\]\s*,\s*function\s*\(\s*([^)]*)\s*\)/i );
                        
                        if( ! matches ) {
                            grunt.log.writeln("Still nothing...");
                            grunt.log.writeln("Skipping inclusion");
                            return "";
                        } else {
                            // Insert the current name in the matches
                            matches.splice( 1, 0, name );
                            grunt.log.writeln("Ok we're good");
                        }

                    }

                    contents = contents
                        .replace( /define\([^{]*?{/, "" )
                        .replace( rdefineEnd, "" );


                    var defineName = "./" + matches[ 1 ];
                    // For some reason defineName does not contain the original "./" ...

                    var dependencies = matches[ 2 ].split(",");
                    var objects = matches[ 3 ].split(',').map( function( val ) {

                        if( val.length == 0 || val.indexOf('require') > -1 ) return null;

                        return val;
                    }).join();
                    

                    contents = "build['" + defineName + "'] = ( function( " + objects + ") { " + contents + " } ) ( " + dependencies.map( function( val ) { if( val.length == 0 || val.indexOf('require') > -1 ) return null; return 'build[' + val + ']' } ).join() + " );\n"; 
                } else {

                    contents = "return build[ './graph.core' ];\n";
                   
                }



                // Remove anything wrapped with
                // /* ExcludeStart */ /* ExcludeEnd */
                // or a single line directly after a // BuildExclude comment
                contents = contents
                    .replace( /\/\*\s*ExcludeStart\s*\*\/[\w\W]*?\/\*\s*ExcludeEnd\s*\*\//ig, "" )
                    .replace( /\/\/\s*BuildExclude\n\r?[\w\W]*?\n\r?/ig, "" );

                // Remove empty definitions
                contents = contents
                    .replace( /define\(\[[^\]]+\]\)[\W\n]+$/, "" );
            
                // Remove empty lines
                contents = contents
                    .replace(/^\s*\"use strict\";\s*(\s)/ig, "$1" );
            //    }

                contents = contents
                    .replace(/ /ig, " " );

                
            contents = 

            "/* \n" +
            " * Build: new source file \n" +
            " * File name : " + name + "\n" + 
            " * File path : " + path + "\n" + 
            " */\n\n" +

            contents + 
            "\n\n" + 
            "// Build: End source file (" + name + ") \n\n\n\n";

            return contents;
        }



        var requirejs = require('requirejs'),
            requirejsConfig = {

                // It's all in the src folder
                baseUrl: "src",

                // Look out for the module graph
                name: "graph",
                
                // No optimization
                optimize: "none",

              
                wrap: {
                    startFile: "./src/build_utils/startfile.js",
                    endFile: "./src/build_utils/endfile.js"
                },


                paths: {
                    'jquery': '../lib/components/jquery/dist/jquery.min'
                },

                // Taken from the jquery build task
                onBuildWrite: buildConvert,

                exclude: [ 'jquery' ],
                //useStrict: true,

                out: './dist/graphs.js'
            };

//grunt.log.writeln( requirejs.optimize )


        requirejs.optimize( requirejsConfig, function() {
            
            done();

        }, function( error ) {

            done( error );
        } );
    } );
};
