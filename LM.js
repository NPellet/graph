
'use strict';
/**  FitHost 
  * Fits a function of x to a list of given {x,y} data. 
  * 
  *
  * Triggers LM by instantiating an object of class LM
  * Supplies four callback methods mandated by interface LMhost
  */
class FitHost {

  constructor() {
    this.DELTAP = 1e-6;
    this.BIGVAL = 9e99;
    this.WEIGHT = 1.0;
  }

  //[ [ x1, y1 ], [ x2, y2 ] ]
  setData( data ) {
    this.data = data;
    this.NPTS = data.length;

  }

  setInitialParams( params ) {
    this.parms = params;
    this.NPARMS = params.length;
  }
  

  setFunc( func ) {
    this._func = func;
  }


  init() {

    this.resid = new Array( this.NPTS ).fill( 0 ) ;
    this.jac = new Array( this.NPTS ).fill( 0 );
    this.jac = this.jac.map( ( el ) => new Array( this.NPARMS ) );
    
  }

  fit() {
    console.log( this.parms );
    var myLM = new LM(this, this.NPARMS, this.NPTS);
    console.log( this.parms );
  }
  
  func( i , data, param ) {
    return this._func( data[ i ][ 0 ], param );
  }
  
  dComputeResiduals() {
    // Called by mandated dNudge().
    // Uses current parms[] vector; 
    // Evaluates resid[i] = (model[i] - data[i])*WEIGHT. 
    // Returns sum-of-squares. 
        var sumsq = 0.0; 
        for( var i = 0; i < this.NPTS; i++ ) {
            this.resid[i] = (this.func( i, this.data, this.parms ) - this.data[i][1]) * this.WEIGHT; 
            sumsq += this.resid[i]*this.resid[i]; 
        }
        return sumsq; 
    }

    //------the four mandated interface methods------------

    dNudge( dp ) {
    // Allows LM to modify parms[] and reevaluate its fit.
    // Returns sum-of-squares for nudged params.
    // This is the only place that parms[] are modified.
    // If NADJ<NPARMS, this is the place for your LUT.
        for ( var j = 0; j < this.NPARMS; j++ ) {
          this.parms[j] += dp[j]; 
        }
        return this.dComputeResiduals(); 
    }

    bBuildJacobian() {
    // Allows LM to compute a new Jacobian.
    // Uses current parms[] and two-sided finite difference.
    // If current parms[] is bad, returns false.  
        var delta = new Array( this.NPARMS );
        var FACTOR = 0.5 / this.DELTAP; 
        var d = 0; 

        for (var j=0; j<this.NPARMS; j++)
        {
            for (var k=0; k<this.NPARMS; k++)
              delta[k] = (k==j) ? this.DELTAP : 0.0;

            d = this.dNudge(delta); // resid at pplus
            if (d==this.BIGVAL)
            {
                console.error("Bad dBuildJacobian() exit 2"); 
                return false;  
            }

            for (var i=0; i<this.NPTS; i++) {
              this.jac[i][j] = this.dGetResid(i);
            }


            for (var k=0; k<this.NPARMS; k++) {
              delta[k] = (k==j) ? -2*this.DELTAP : 0.0;
            }



            d = this.dNudge(delta); // resid at pminus

            if (d==this.BIGVAL)
            {
                console.error("Bad dBuildJacobian() exit 3"); 
                return false;  
            }

            for (var i=0; i<this.NPTS; i++)
              this.jac[i][j] -= this.dGetResid(i);  // fetches resid[]

            for (var i=0; i<this.NPTS; i++)
              this.jac[i][j] *= FACTOR;

            for (var k=0; k<this.NPARMS; k++)
              delta[k] = (k==j) ? this.DELTAP : 0.0;

            d = this.dNudge(delta);  
            if (d==this.BIGVAL)
            {
                console.error("Bad dBuildJacobian() exit 4"); 
                return false;  
            }
        }
        return true; 
    }

    dGetResid(i) {
    // Allows LM to see one element of the resid[] vector. 
        return this.resid[i];
    }

    dGetJac(i, j) {
    // Allows LM to see one element of the Jacobian matrix. 
        return this.jac[i][j]; 
    }
}


class LM {

  constructor( gH, gnadj, gnpnts ) {

    this.LMITER     =  100;     // max number of L-M iterations
    this.LMBOOST    =  2.0;     // damping increase per failed step
    this.LMSHRINK   = 0.10;     // damping decrease per successful step
    this.LAMBDAZERO = 0.001;    // initial damping
    this.LAMBDAMAX  =  1E9;     // max damping
    this.LMTOL      = 1E-12;    // exit tolerance
    this.BIGVAL     = 9e99;     // trouble flag 
 
    this.sos;
    this.sosprev;
    this.lambda;

    this.myH = null;    // overwritten by constructor
    this.nadj = 0;         // overwritten by constructor
    this.npts = 0;         // overwritten by constructor

    this.delta;       // local parm change
    this.beta;
    this.alpha;
    this.amatrix;
    
    this.LM( gH, gnadj, gnpnts );
  }
    
    LM(gH, gnadj, gnpts) {
    // Constructor sets up fields and drives iterations. 
        this.myH = gH;
        this.nadj = gnadj;
        this.npts = gnpts;  

        this.delta = new Array( this.nadj ).fill( 0 );
        this.beta = new Array( this.nadj ).fill( 0 );
        
        this.alpha = new Array( this.nadj ).fill( 0 );
        this.amatrix = new Array( this.nadj ).fill( 0 );
          
        this.alpha = this.alpha.map( ( ) => new Array( this.nadj ) );
        this.amatrix = this.amatrix.map( ( ) => new Array( this.nadj ) );

        this.lambda = this.LAMBDAZERO; 
        
        var niter = 0; 
        var done = false; 
        do {
            done = this.bLMiter();
            niter++;
        } 
        while (!done && (niter<this.LMITER));
    }

    bLMiter( ) {
    // Each call performs one LM iteration. 
    // Returns true if done with iterations; false=wants more. 
    // Global nadj, npts; needs nadj, myH to be preset. 
    // Ref: M.Lampton, Computers in Physics v.11 pp.110-115 1997.
        for (var k=0; k<this.nadj; k++)
          this.delta[k] = 0.0; 
        this.sos = this.myH.dNudge(this.delta);
        if (this.sos==this.BIGVAL)
        {
           console.error("  bLMiter finds faulty initial dNudge()");
           return false; 
        }
        this.sosprev = this.sos;

        console.error("  bLMiter..SumOfSquares= "+this.sos);
        if (!this.myH.bBuildJacobian())
        {
            console.error("  bLMiter finds bBuildJacobian()=false"); 
            return false;
        }

        for (var k=0; k<this.nadj; k++)      // get downhill gradient beta
        {
            this.beta[k] = 0.0;
            for (var i=0; i<this.npts; i++) {
              this.beta[k] -= this.myH.dGetResid(i)*this.myH.dGetJac(i,k);
            }
        }

        for (var k=0; k<this.nadj; k++)      // get curvature matrix alpha
          for (var j=0; j<this.nadj; j++)
          {
              this.alpha[j][k] = 0.0;
              for (var i=0; i<this.npts; i++) {
                this.alpha[j][k] += this.myH.dGetJac(i,j)*this.myH.dGetJac(i,k);
              }
          }
        var rrise = 0; 
        do  // inner damping loop searches for one downhill step
        {
            for (var k=0; k<this.nadj; k++) {       // copy and damp it
              for (var j=0; j<this.nadj; j++) {
                this.amatrix[j][k] = this.alpha[j][k] + ((j==k) ? this.lambda : 0.0);
              }
            }

            this.gaussj(this.amatrix, this.nadj);           // invert

            for (var k=0; k<this.nadj; k++)       // compute delta[]
            {
                this.delta[k] = 0.0; 
                for (var j=0; j<this.nadj; j++)
                  this.delta[k] += this.amatrix[j][k]*this.beta[j];
            }
            this.sos = this.myH.dNudge(this.delta);         // try it out.
            if (this.sos==this.BIGVAL)
            {
                console.error("  LMinner failed SOS step"); 
                return false;            
            }
            rrise = (this.sos-this.sosprev)/(1+this.sos);
            if (rrise <= 0.0)                // good step!
            {
                this.lambda *= this.LMSHRINK;          // shrink lambda
                break;                       // leave lmInner.
            }
            for (var q=0; q<this.nadj; q++) {      // reverse course!
              this.delta[q] *= -1.0;
            }
            this.myH.dNudge(this.delta);               // sosprev should still be OK
            if (rrise < this.LMTOL) {               // finished but keep prev parms
              break;                         // leave inner loop
            }
            this.lambda *= this.LMBOOST;               // else try more damping.
        } while (this.lambda<this.LAMBDAMAX);
        return (rrise>-this.LMTOL) || (this.lambda>this.LAMBDAMAX); 
    }

    gaussj( a, N ) {
    // Inverts the double array a[N][N] by Gauss-Jordan method
    // M.Lampton UCB SSL (c)2003, 2005
    
        var det = 1.0, big, save;
        var i,j,k,L;
        var ik = new Array( 100 );
        var jk = new Array( 100 );
        
        for (k=0; k<N; k++)
        {
            big = 0.0;
            for (i=k; i<N; i++)
              for (j=k; j<N; j++)          // find biggest element
                if (Math.abs(big) <= Math.abs(a[i][j]))
                {
                    big = a[i][j];
                    ik[k] = i;
                    jk[k] = j;
                }
            if (big == 0.0) return 0.0;
            i = ik[k];
            if (i>k)
              for (j=0; j<N; j++)          // exchange rows
              {
                  save = a[k][j];
                  a[k][j] = a[i][j];
                  a[i][j] = -save;
              }
            j = jk[k];
            if (j>k)
              for (i=0; i<N; i++)
              {
                  save = a[i][k];
                  a[i][k] = a[i][j];
                  a[i][j] = -save;
              }
            for (i=0; i<N; i++)            // build the inverse
              if (i != k)
                a[i][k] = -a[i][k]/big;
            for (i=0; i<N; i++)
              for (j=0; j<N; j++)
                if ((i != k) && (j != k))
                  a[i][j] += a[i][k]*a[k][j];
            for (j=0; j<N; j++)
              if (j != k)
                a[k][j] /= big;
            a[k][k] = 1.0/big;
            det *= big;                    // bomb point
        }                                  // end k loop
        for (L=0; L<N; L++)
        {
            k = N-L-1;
            j = ik[k];
            if (j>k)
              for (i=0; i<N; i++)
              {
                  save = a[i][k];
                  a[i][k] = -a[i][j];
                  a[i][j] = save;
              }
            i = jk[k];
            if (i>k)
              for (j=0; j<N; j++)
              {
                  save = a[k][j];
                  a[k][j] = -a[i][j];
                  a[i][j] = save;
              }
        }
        return det;
    }
} //-----------end of class LM--------------------



var host = new FitHost();

host.setData( [ 


[5, 0],
[4.99723, 0.0025],
[4.99447, 0.005],
[4.99171, 0.0075],
[4.98895, 0.01],
[4.98619, 0.0125],
[4.98344, 0.015],
[4.98069, 0.0175],
[4.97794, 0.02],
[4.9752, 0.0225],
[4.97245, 0.025],
[4.96971, 0.0275],
[4.96697, 0.03],
[4.96424, 0.0325],
[4.9615, 0.035],
[4.95877, 0.0375],
[4.95604, 0.04],
[4.95332, 0.0425],
[4.9506, 0.045],
[4.94788, 0.0475],
[4.94516, 0.05],
[4.94244, 0.0525],
[4.93973, 0.055],
[4.93702, 0.0575],
[4.93431, 0.06],
[4.9316, 0.0625],
[4.9289, 0.065],
[4.9262, 0.0675],
[4.9235, 0.07],
[4.92081, 0.0725],
[4.91811, 0.075],
[4.91542, 0.0775],
[4.91273, 0.08],
[4.91005, 0.0825],
[4.90736, 0.085],
[4.90468, 0.0875],
[4.90201, 0.09],
[4.89933, 0.0925],
[4.89666, 0.095],
[4.89398, 0.0975],
[4.89132, 0.1],
[4.88865, 0.1025],
[4.88599, 0.105],
[4.88333, 0.1075],
[4.88067, 0.11],
[4.87801, 0.1125],
[4.87536, 0.115],
[4.87271, 0.1175],
[4.87006, 0.12],
[4.86741, 0.1225],
[4.86477, 0.125],
[4.86212, 0.1275],
[4.85949, 0.13],
[4.85685, 0.1325],
[4.85421, 0.135],
[4.85158, 0.1375],
[4.84895, 0.14],
[4.84633, 0.1425],
[4.8437, 0.145],
[4.84108, 0.1475],
[4.83846, 0.15],
[4.83584, 0.1525],
[4.83323, 0.155],
[4.83062, 0.1575],
[4.82801, 0.16],
[4.8254, 0.1625],
[4.82279, 0.165],
[4.82019, 0.1675],
[4.81759, 0.17],
[4.81499, 0.1725],
[4.8124, 0.175],
[4.8098, 0.1775],
[4.80721, 0.18],
[4.80462, 0.1825],
[4.80204, 0.185],
[4.79945, 0.1875],
[4.79687, 0.19],
[4.79429, 0.1925],
[4.79172, 0.195],
[4.78914, 0.1975],
[4.78657, 0.2],
[4.784, 0.2025],
[4.78143, 0.205],
[4.77887, 0.2075],
[4.77631, 0.21],
[4.77375, 0.2125],
[4.77119, 0.215],
[4.76863, 0.2175],
[4.76608, 0.22],
[4.76353, 0.2225],
[4.76098, 0.225],
[4.75844, 0.2275],
[4.75589, 0.23],
[4.75335, 0.2325],
[4.75081, 0.235],
[4.74828, 0.2375],
[4.74574, 0.24],
[4.74321, 0.2425],
[4.74068, 0.245],
[4.73815, 0.2475],
[4.73563, 0.25],
[4.73311, 0.2525],
[4.73059, 0.255],
[4.72807, 0.2575],
[4.72555, 0.26],
[4.72304, 0.2625],
[4.72053, 0.265],
[4.71802, 0.2675],
[4.71551, 0.27],
[4.71301, 0.2725],
[4.71051, 0.275],
[4.70801, 0.2775],
[4.70551, 0.28],
[4.70302, 0.2825],
[4.70053, 0.285],
[4.69803, 0.2875],
[4.69555, 0.29],
[4.69306, 0.2925],
[4.69058, 0.295],
[4.6881, 0.2975],
[4.68562, 0.3],
[4.68314, 0.3025],
[4.68067, 0.305],
[4.6782, 0.3075],
[4.67573, 0.31],
[4.67326, 0.3125],
[4.67079, 0.315],
[4.66833, 0.3175],
[4.66587, 0.32],
[4.66341, 0.3225],
[4.66096, 0.325],
[4.6585, 0.3275],
[4.65605, 0.33],
[4.6536, 0.3325],
[4.65116, 0.335],
[4.64871, 0.3375],
[4.64627, 0.34],
[4.64383, 0.3425],
[4.64139, 0.345],
[4.63896, 0.3475],
[4.63652, 0.35],
[4.63409, 0.3525],
[4.63166, 0.355],
[4.62924, 0.3575],
[4.62681, 0.36],
[4.62439, 0.3625],
[4.62197, 0.365],
[4.61955, 0.3675],
[4.61714, 0.37],
[4.61472, 0.3725],
[4.61231, 0.375],
[4.6099, 0.3775],
[4.6075, 0.38],
[4.60509, 0.3825],
[4.60269, 0.385],
[4.60029, 0.3875],
[4.59789, 0.39],
[4.5955, 0.3925],
[4.5931, 0.395],
[4.59071, 0.3975],
[4.58832, 0.4],
[4.58594, 0.4025],
[4.58355, 0.405],
[4.58117, 0.4075],
[4.57879, 0.41],
[4.57641, 0.4125],
[4.57404, 0.415],
[4.57166, 0.4175],
[4.56929, 0.42],
[4.56692, 0.4225],
[4.56456, 0.425],
[4.56219, 0.4275],
[4.55983, 0.43],
[4.55747, 0.4325],
[4.55511, 0.435],
[4.55275, 0.4375],
[4.5504, 0.44],
[4.54805, 0.4425],
[4.5457, 0.445],
[4.54335, 0.4475],
[4.54101, 0.45],
[4.53866, 0.4525],
[4.53632, 0.455],
[4.53398, 0.4575],
[4.53165, 0.46],
[4.52931, 0.4625],
[4.52698, 0.465],
[4.52465, 0.4675],
[4.52232, 0.47],
[4.52, 0.4725],
[4.51767, 0.475],
[4.51535, 0.4775],
[4.51303, 0.48],
[4.51072, 0.4825],
[4.5084, 0.485],
[4.50609, 0.4875],
[4.50378, 0.49],
[4.50147, 0.4925],
[4.49916, 0.495],
[4.49686, 0.4975],
[4.49455, 0.5],
[4.49226, 0.5025],
[4.48996, 0.505],
[4.48766, 0.5075],
[4.48537, 0.51],
[4.48308, 0.5125],
[4.48079, 0.515],
[4.4785, 0.5175],
[4.47621, 0.52],
[4.47393, 0.5225],
[4.47165, 0.525],
[4.46937, 0.5275],
[4.46709, 0.53],
[4.46482, 0.5325],
[4.46254, 0.535],
[4.46027, 0.5375],
[4.45801, 0.54],
[4.45574, 0.5425],
[4.45347, 0.545],
[4.45121, 0.5475],
[4.44895, 0.55],
[4.44669, 0.5525],
[4.44444, 0.555],
[4.44218, 0.5575],
[4.43993, 0.56],
[4.43768, 0.5625],
[4.43543, 0.565],
[4.43319, 0.5675],
[4.43095, 0.57],
[4.4287, 0.5725],
[4.42646, 0.575],
[4.42423, 0.5775],
[4.42199, 0.58],
[4.41976, 0.5825],
[4.41753, 0.585],
[4.4153, 0.5875],
[4.41307, 0.59],
[4.41085, 0.5925],
[4.40862, 0.595],
[4.4064, 0.5975],
[4.40418, 0.6],
[4.40197, 0.6025],
[4.39975, 0.605],
[4.39754, 0.6075],
[4.39533, 0.61],
[4.39312, 0.6125],
[4.39091, 0.615],
[4.38871, 0.6175],
[4.38651, 0.62],
[4.3843, 0.6225],
[4.38211, 0.625],
[4.37991, 0.6275],
[4.37772, 0.63],
[4.37552, 0.6325],
[4.37333, 0.635],
[4.37114, 0.6375],
[4.36896, 0.64],
[4.36677, 0.6425],
[4.36459, 0.645],
[4.36241, 0.6475],
[4.36023, 0.65],
[4.35806, 0.6525],
[4.35588, 0.655],
[4.35371, 0.6575],
[4.35154, 0.66],
[4.34937, 0.6625],
[4.3472, 0.665],
[4.34504, 0.6675],
[4.34288, 0.67],
[4.34072, 0.6725],
[4.33856, 0.675],
[4.3364, 0.6775],
[4.33425, 0.68],
[4.3321, 0.6825],
[4.32995, 0.685],
[4.3278, 0.6875],
[4.32565, 0.69],
[4.32351, 0.6925],
[4.32136, 0.695],
[4.31922, 0.6975],
[4.31708, 0.7],
[4.31495, 0.7025],
[4.31281, 0.705],
[4.31068, 0.7075],
[4.30855, 0.71],
[4.30642, 0.7125],
[4.30429, 0.715],
[4.30217, 0.7175],
[4.30005, 0.72],
[4.29793, 0.7225],
[4.29581, 0.725],
[4.29369, 0.7275],
[4.29158, 0.73],
[4.28946, 0.7325],
[4.28735, 0.735],
[4.28524, 0.7375],
[4.28313, 0.74],
[4.28103, 0.7425],
[4.27893, 0.745],
[4.27683, 0.7475],
[4.27473, 0.75],
[4.27263, 0.7525],
[4.27053, 0.755],
[4.26844, 0.7575],
[4.26635, 0.76],
[4.26426, 0.7625],
[4.26217, 0.765],
[4.26008, 0.7675],
[4.258, 0.77],
[4.25592, 0.7725],
[4.25384, 0.775],
[4.25176, 0.7775],
[4.24968, 0.78],
[4.24761, 0.7825],
[4.24554, 0.785],
[4.24347, 0.7875],
[4.2414, 0.79],
[4.23933, 0.7925],
[4.23727, 0.795],
[4.2352, 0.7975],
[4.23314, 0.8],
[4.23108, 0.8025],
[4.22902, 0.805],
[4.22697, 0.8075],
[4.22492, 0.81],
[4.22286, 0.8125],
[4.22082, 0.815],
[4.21877, 0.8175],
[4.21672, 0.82],
[4.21468, 0.8225],
[4.21264, 0.825],
[4.2106, 0.8275],
[4.20856, 0.83],
[4.20652, 0.8325],
[4.20449, 0.835],
[4.20245, 0.8375],
[4.20042, 0.84],
[4.19839, 0.8425],
[4.19637, 0.845],
[4.19434, 0.8475],
[4.19232, 0.85],
[4.1903, 0.8525],
[4.18828, 0.855],
[4.18626, 0.8575],
[4.18424, 0.86],
[4.18223, 0.8625],
[4.18022, 0.865],
[4.17821, 0.8675],
[4.1762, 0.87],
[4.17419, 0.8725],
[4.17219, 0.875],
[4.17018, 0.8775],
[4.16818, 0.88],
[4.16618, 0.8825],
[4.16419, 0.885],
[4.16219, 0.8875],
[4.1602, 0.89],
[4.1582, 0.8925],
[4.15621, 0.895],
[4.15423, 0.8975],
[4.15224, 0.9],
[4.15026, 0.9025],
[4.14827, 0.905],
[4.14629, 0.9075],
[4.14431, 0.91],
[4.14233, 0.9125],
[4.14036, 0.915],
[4.13839, 0.9175],
[4.13641, 0.92],
[4.13444, 0.9225],
[4.13248, 0.925],
[4.13051, 0.9275],
[4.12855, 0.93],
[4.12658, 0.9325],
[4.12462, 0.935],
[4.12266, 0.9375],
[4.12071, 0.94],
[4.11875, 0.9425],
[4.1168, 0.945],
[4.11484, 0.9475],
[4.11289, 0.95],
[4.11095, 0.9525],
[4.109, 0.955],
[4.10706, 0.9575],
[4.10511, 0.96],
[4.10317, 0.9625],
[4.10123, 0.965],
[4.09929, 0.9675],
[4.09736, 0.97],
[4.09542, 0.9725],
[4.09349, 0.975],
[4.09156, 0.9775],
[4.08963, 0.98],
[4.08771, 0.9825],
[4.08578, 0.985],
[4.08386, 0.9875],
[4.08194, 0.99],
[4.08002, 0.9925],
[4.0781, 0.995],
[4.07618, 0.9975],
[4.07427, 1],
[4.07236, 1.0025],
[4.07045, 1.005],
[4.06854, 1.0075],
[4.06663, 1.01],
[4.06472, 1.0125],
[4.06282, 1.015],
[4.06092, 1.0175],
[4.05902, 1.02],
[4.05712, 1.0225],
[4.05522, 1.025],
[4.05333, 1.0275],
[4.05143, 1.03],
[4.04954, 1.0325],
[4.04765, 1.035],
[4.04576, 1.0375],
[4.04388, 1.04],
[4.04199, 1.0425],
[4.04011, 1.045],
[4.03823, 1.0475],
[4.03635, 1.05],
[4.03447, 1.0525],
[4.0326, 1.055],
[4.03072, 1.0575],
[4.02885, 1.06],
[4.02698, 1.0625],
[4.02511, 1.065],
[4.02324, 1.0675],
[4.02138, 1.07],
[4.01951, 1.0725],
[4.01765, 1.075],
[4.01579, 1.0775],
[4.01393, 1.08],
[4.01207, 1.0825],
[4.01022, 1.085],
[4.00836, 1.0875],
[4.00651, 1.09],
[4.00466, 1.0925],
[4.00281, 1.095],
[4.00097, 1.0975],
[3.99912, 1.1],
[3.99728, 1.1025],
[3.99544, 1.105],
[3.9936, 1.1075],
[3.99176, 1.11],
[3.98992, 1.1125],
[3.98809, 1.115],
[3.98625, 1.1175],
[3.98442, 1.12],
[3.98259, 1.1225],
[3.98077, 1.125],
[3.97894, 1.1275],
[3.97711, 1.13],
[3.97529, 1.1325],
[3.97347, 1.135],
[3.97165, 1.1375],
[3.96983, 1.14],
[3.96802, 1.1425],
[3.9662, 1.145],
[3.96439, 1.1475],
[3.96258, 1.15],
[3.96077, 1.1525],
[3.95896, 1.155],
[3.95715, 1.1575],
[3.95535, 1.16],
[3.95354, 1.1625],
[3.95174, 1.165],
[3.94994, 1.1675],
[3.94815, 1.17],
[3.94635, 1.1725],
[3.94455, 1.175],
[3.94276, 1.1775],
[3.94097, 1.18],
[3.93918, 1.1825],
[3.93739, 1.185],
[3.93561, 1.1875],
[3.93382, 1.19],
[3.93204, 1.1925],
[3.93026, 1.195],
[3.92848, 1.1975],
[3.9267, 1.2],
[3.92492, 1.2025],
[3.92315, 1.205],
[3.92137, 1.2075],
[3.9196, 1.21],
[3.91783, 1.2125],
[3.91606, 1.215],
[3.9143, 1.2175],
[3.91253, 1.22],
[3.91077, 1.2225],
[3.90901, 1.225],
[3.90725, 1.2275],
[3.90549, 1.23],
[3.90373, 1.2325],
[3.90197, 1.235],
[3.90022, 1.2375],
[3.89847, 1.24],
[3.89672, 1.2425],
[3.89497, 1.245],
[3.89322, 1.2475],
[3.89148, 1.25],
[3.88973, 1.2525],
[3.88799, 1.255],
[3.88625, 1.2575],
[3.88451, 1.26],
[3.88277, 1.2625],
[3.88104, 1.265],
[3.8793, 1.2675],
[3.87757, 1.27],
[3.87584, 1.2725],
[3.87411, 1.275],
[3.87238, 1.2775],
[3.87065, 1.28],
[3.86893, 1.2825],
[3.8672, 1.285],
[3.86548, 1.2875],
[3.86376, 1.29],
[3.86204, 1.2925],
[3.86033, 1.295],
[3.85861, 1.2975],
[3.8569, 1.3],
[3.85519, 1.3025],
[3.85348, 1.305],
[3.85177, 1.3075],
[3.85006, 1.31],
[3.84835, 1.3125],
[3.84665, 1.315],
[3.84495, 1.3175],
[3.84324, 1.32],
[3.84155, 1.3225],
[3.83985, 1.325],
[3.83815, 1.3275],
[3.83646, 1.33],
[3.83476, 1.3325],
[3.83307, 1.335],
[3.83138, 1.3375],
[3.82969, 1.34],
[3.828, 1.3425],
[3.82632, 1.345],
[3.82463, 1.3475],
[3.82295, 1.35],
[3.82127, 1.3525],
[3.81959, 1.355],
[3.81791, 1.3575],
[3.81624, 1.36],
[3.81456, 1.3625],
[3.81289, 1.365],
[3.81122, 1.3675],
[3.80955, 1.37],
[3.80788, 1.3725],
[3.80621, 1.375],
[3.80455, 1.3775],
[3.80288, 1.38],
[3.80122, 1.3825],
[3.79956, 1.385],
[3.7979, 1.3875],
[3.79624, 1.39],
[3.79459, 1.3925],
[3.79293, 1.395],
[3.79128, 1.3975],
[3.78963, 1.4],
[3.78798, 1.4025],
[3.78633, 1.405],
[3.78468, 1.4075],
[3.78304, 1.41],
[3.78139, 1.4125],
[3.77975, 1.415],
[3.77811, 1.4175],
[3.77647, 1.42],
[3.77483, 1.4225],
[3.77319, 1.425],
[3.77156, 1.4275],
[3.76992, 1.43],
[3.76829, 1.4325],
[3.76666, 1.435],
[3.76503, 1.4375],
[3.76341, 1.44],
[3.76178, 1.4425],
[3.76016, 1.445],
[3.75853, 1.4475],
[3.75691, 1.45],
[3.75529, 1.4525],
[3.75367, 1.455],
[3.75206, 1.4575],
[3.75044, 1.46],
[3.74883, 1.4625],
[3.74721, 1.465],
[3.7456, 1.4675],
[3.74399, 1.47],
[3.74238, 1.4725],
[3.74078, 1.475],
[3.73917, 1.4775],
[3.73757, 1.48],
[3.73597, 1.4825],
[3.73437, 1.485],
[3.73277, 1.4875],
[3.73117, 1.49],
[3.72957, 1.4925],
[3.72798, 1.495],
[3.72638, 1.4975],
[3.72479, 1.5],
[3.7232, 1.5025],
[3.72161, 1.505],
[3.72003, 1.5075],
[3.71844, 1.51],
[3.71686, 1.5125],
[3.71527, 1.515],
[3.71369, 1.5175],
[3.71211, 1.52],
[3.71053, 1.5225],
[3.70895, 1.525],
[3.70738, 1.5275],
[3.7058, 1.53],
[3.70423, 1.5325],
[3.70266, 1.535],
[3.70109, 1.5375],
[3.69952, 1.54],
[3.69795, 1.5425],
[3.69639, 1.545],
[3.69482, 1.5475],
[3.69326, 1.55],
[3.6917, 1.5525],
[3.69014, 1.555],
[3.68858, 1.5575],
[3.68702, 1.56],
[3.68547, 1.5625],
[3.68392, 1.565],
[3.68236, 1.5675],
[3.68081, 1.57],
[3.67926, 1.5725],
[3.67771, 1.575],
[3.67617, 1.5775],
[3.67462, 1.58],
[3.67308, 1.5825],
[3.67153, 1.585],
[3.66999, 1.5875],
[3.66845, 1.59],
[3.66691, 1.5925],
[3.66538, 1.595],
[3.66384, 1.5975],
[3.66231, 1.6],
[3.66077, 1.6025],
[3.65924, 1.605],
[3.65771, 1.6075],
[3.65618, 1.61],
[3.65466, 1.6125],
[3.65313, 1.615],
[3.65161, 1.6175],
[3.65008, 1.62],
[3.64856, 1.6225],
[3.64704, 1.625],
[3.64552, 1.6275],
[3.64401, 1.63],
[3.64249, 1.6325],
[3.64098, 1.635],
[3.63946, 1.6375],
[3.63795, 1.64],
[3.63644, 1.6425],
[3.63493, 1.645],
[3.63342, 1.6475],
[3.63192, 1.65],
[3.63041, 1.6525],
[3.62891, 1.655],
[3.62741, 1.6575],
[3.62591, 1.66],
[3.62441, 1.6625],
[3.62291, 1.665],
[3.62141, 1.6675],
[3.61992, 1.67],
[3.61843, 1.6725],
[3.61693, 1.675],
[3.61544, 1.6775],
[3.61395, 1.68],
[3.61246, 1.6825],
[3.61098, 1.685],
[3.60949, 1.6875],
[3.60801, 1.69],
[3.60653, 1.6925],
[3.60504, 1.695],
[3.60356, 1.6975],
[3.60209, 1.7],
[3.60061, 1.7025],
[3.59913, 1.705],
[3.59766, 1.7075],
[3.59618, 1.71],
[3.59471, 1.7125],
[3.59324, 1.715],
[3.59177, 1.7175],
[3.59031, 1.72],
[3.58884, 1.7225],
[3.58737, 1.725],
[3.58591, 1.7275],
[3.58445, 1.73],
[3.58299, 1.7325],
[3.58153, 1.735],
[3.58007, 1.7375],
[3.57861, 1.74],
[3.57716, 1.7425],
[3.5757, 1.745],
[3.57425, 1.7475],
[3.5728, 1.75],
[3.57135, 1.7525],
[3.5699, 1.755],
[3.56845, 1.7575],
[3.567, 1.76],
[3.56556, 1.7625],
[3.56412, 1.765],
[3.56267, 1.7675],
[3.56123, 1.77],
[3.55979, 1.7725],
[3.55835, 1.775],
[3.55692, 1.7775],
[3.55548, 1.78],
[3.55405, 1.7825],
[3.55262, 1.785],
[3.55118, 1.7875],
[3.54975, 1.79],
[3.54832, 1.7925],
[3.5469, 1.795],
[3.54547, 1.7975],
[3.54405, 1.8],
[3.54262, 1.8025],
[3.5412, 1.805],
[3.53978, 1.8075],
[3.53836, 1.81],
[3.53694, 1.8125],
[3.53552, 1.815],
[3.53411, 1.8175],
[3.53269, 1.82],
[3.53128, 1.8225],
[3.52987, 1.825],
[3.52846, 1.8275],
[3.52705, 1.83],
[3.52564, 1.8325],
[3.52423, 1.835],
[3.52283, 1.8375],
[3.52142, 1.84],
[3.52002, 1.8425],
[3.51862, 1.845],
[3.51722, 1.8475],
[3.51582, 1.85],
[3.51442, 1.8525],
[3.51302, 1.855],
[3.51163, 1.8575],
[3.51024, 1.86],
[3.50884, 1.8625],
[3.50745, 1.865],
[3.50606, 1.8675],
[3.50467, 1.87],
[3.50329, 1.8725],
[3.5019, 1.875],
[3.50051, 1.8775],
[3.49913, 1.88],
[3.49775, 1.8825],
[3.49637, 1.885],
[3.49499, 1.8875],
[3.49361, 1.89],
[3.49223, 1.8925],
[3.49086, 1.895],
[3.48948, 1.8975],
[3.48811, 1.9],
[3.48674, 1.9025],
[3.48536, 1.905],
[3.48399, 1.9075],
[3.48263, 1.91],
[3.48126, 1.9125],
[3.47989, 1.915],
[3.47853, 1.9175],
[3.47717, 1.92],
[3.4758, 1.9225],
[3.47444, 1.925],
[3.47308, 1.9275],
[3.47172, 1.93],
[3.47037, 1.9325],
[3.46901, 1.935],
[3.46766, 1.9375],
[3.4663, 1.94],
[3.46495, 1.9425],
[3.4636, 1.945],
[3.46225, 1.9475],
[3.4609, 1.95],
[3.45956, 1.9525],
[3.45821, 1.955],
[3.45687, 1.9575],
[3.45552, 1.96],
[3.45418, 1.9625],
[3.45284, 1.965],
[3.4515, 1.9675],
[3.45016, 1.97],
[3.44882, 1.9725],
[3.44749, 1.975],
[3.44615, 1.9775],
[3.44482, 1.98],
[3.44349, 1.9825],
[3.44216, 1.985],
[3.44083, 1.9875],
[3.4395, 1.99],
[3.43817, 1.9925],
[3.43685, 1.995],
[3.43552, 1.9975],
[3.4342, 2],
[3.43287, 2.0025],
[3.43155, 2.005],
[3.43023, 2.0075],
[3.42891, 2.01],
[3.4276, 2.0125],
[3.42628, 2.015],
[3.42497, 2.0175],
[3.42365, 2.02],
[3.42234, 2.0225],
[3.42103, 2.025],
[3.41972, 2.0275],
[3.41841, 2.03],
[3.4171, 2.0325],
[3.41579, 2.035],
[3.41449, 2.0375],
[3.41318, 2.04],
[3.41188, 2.0425],
[3.41058, 2.045],
[3.40928, 2.0475],
[3.40798, 2.05],
[3.40668, 2.0525],
[3.40538, 2.055],
[3.40409, 2.0575],
[3.40279, 2.06],
[3.4015, 2.0625],
[3.40021, 2.065],
[3.39892, 2.0675],
[3.39763, 2.07],
[3.39634, 2.0725],
[3.39505, 2.075],
[3.39376, 2.0775],
[3.39248, 2.08],
[3.39119, 2.0825],
[3.38991, 2.085],
[3.38863, 2.0875],
[3.38735, 2.09],
[3.38607, 2.0925],
[3.38479, 2.095],
[3.38351, 2.0975],
[3.38224, 2.1],
[3.38096, 2.1025],
[3.37969, 2.105],
[3.37842, 2.1075],
[3.37715, 2.11],
[3.37588, 2.1125],
[3.37461, 2.115],
[3.37334, 2.1175],
[3.37208, 2.12],
[3.37081, 2.1225],
[3.36955, 2.125],
[3.36828, 2.1275],
[3.36702, 2.13],
[3.36576, 2.1325],
[3.3645, 2.135],
[3.36324, 2.1375],
[3.36199, 2.14],
[3.36073, 2.1425],
[3.35948, 2.145],
[3.35822, 2.1475],
[3.35697, 2.15],
[3.35572, 2.1525],
[3.35447, 2.155],
[3.35322, 2.1575],
[3.35197, 2.16],
[3.35073, 2.1625],
[3.34948, 2.165],
[3.34824, 2.1675],
[3.34699, 2.17],
[3.34575, 2.1725],
[3.34451, 2.175],
[3.34327, 2.1775],
[3.34203, 2.18],
[3.34079, 2.1825],
[3.33956, 2.185],
[3.33832, 2.1875],
[3.33709, 2.19],
[3.33586, 2.1925],
[3.33462, 2.195],
[3.33339, 2.1975],
[3.33216, 2.2],
[3.33094, 2.2025],
[3.32971, 2.205],
[3.32848, 2.2075],
[3.32726, 2.21],
[3.32603, 2.2125],
[3.32481, 2.215],
[3.32359, 2.2175],
[3.32237, 2.22],
[3.32115, 2.2225],
[3.31993, 2.225],
[3.31871, 2.2275],
[3.3175, 2.23],
[3.31628, 2.2325],
[3.31507, 2.235],
[3.31386, 2.2375],
[3.31264, 2.24],
[3.31143, 2.2425],
[3.31023, 2.245],
[3.30902, 2.2475],
[3.30781, 2.25],
[3.3066, 2.2525],
[3.3054, 2.255],
[3.3042, 2.2575],
[3.30299, 2.26],
[3.30179, 2.2625],
[3.30059, 2.265],
[3.29939, 2.2675],
[3.29819, 2.27],
[3.297, 2.2725],
[3.2958, 2.275],
[3.29461, 2.2775],
[3.29341, 2.28],
[3.29222, 2.2825],
[3.29103, 2.285],
[3.28984, 2.2875],
[3.28865, 2.29],
[3.28746, 2.2925],
[3.28627, 2.295],
[3.28509, 2.2975],
[3.2839, 2.3],
[3.28272, 2.3025],
[3.28154, 2.305],
[3.28035, 2.3075],
[3.27917, 2.31],
[3.27799, 2.3125],
[3.27681, 2.315],
[3.27564, 2.3175],
[3.27446, 2.32],
[3.27329, 2.3225],
[3.27211, 2.325],
[3.27094, 2.3275],
[3.26977, 2.33],
[3.2686, 2.3325],
[3.26743, 2.335],
[3.26626, 2.3375],
[3.26509, 2.34],
[3.26392, 2.3425],
[3.26276, 2.345],
[3.26159, 2.3475],
[3.26043, 2.35],
[3.25927, 2.3525],
[3.25811, 2.355],
[3.25695, 2.3575],
[3.25579, 2.36],
[3.25463, 2.3625],
[3.25347, 2.365],
[3.25232, 2.3675],
[3.25116, 2.37],
[3.25001, 2.3725],
[3.24886, 2.375],
[3.24771, 2.3775],
[3.24655, 2.38],
[3.24541, 2.3825],
[3.24426, 2.385],
[3.24311, 2.3875],
[3.24196, 2.39],
[3.24082, 2.3925],
[3.23967, 2.395],
[3.23853, 2.3975],
[3.23739, 2.4],
[3.23625, 2.4025],
[3.23511, 2.405],
[3.23397, 2.4075],
[3.23283, 2.41],
[3.23169, 2.4125],
[3.23056, 2.415],
[3.22942, 2.4175],
[3.22829, 2.42],
[3.22716, 2.4225],
[3.22603, 2.425],
[3.2249, 2.4275],
[3.22377, 2.43],
[3.22264, 2.4325],
[3.22151, 2.435],
[3.22038, 2.4375],
[3.21926, 2.44],
[3.21813, 2.4425],
[3.21701, 2.445],
[3.21589, 2.4475],
[3.21477, 2.45],
[3.21365, 2.4525],
[3.21253, 2.455],
[3.21141, 2.4575],
[3.21029, 2.46],
[3.20918, 2.4625],
[3.20806, 2.465],
[3.20695, 2.4675],
[3.20584, 2.47],
[3.20472, 2.4725],
[3.20361, 2.475],
[3.2025, 2.4775],
[3.20139, 2.48],
[3.20029, 2.4825],
[3.19918, 2.485],
[3.19807, 2.4875],
[3.19697, 2.49],
[3.19587, 2.4925],
[3.19476, 2.495],
[3.19366, 2.4975]

 ] );

host.setInitialParams( [ 1, -1, 1 ] );
host.setFunc( function( x, p ) { return Math.exp( x * p[ 1 ] ) * p[ 0 ] + p[ 2 ] } );
host.init();
host.fit();